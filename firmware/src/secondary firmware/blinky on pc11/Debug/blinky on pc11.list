
blinky on pc11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a9c  08010194  08010194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000100b0  08018c30  08018c30  00018c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028ce0  08028ce0  00030120  2**0
                  CONTENTS
  4 .ARM          00000000  08028ce0  08028ce0  00030120  2**0
                  CONTENTS
  5 .preinit_array 00000000  08028ce0  08028ce0  00030120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028ce0  08028ce0  00028ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028ce4  08028ce4  00028ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  08028ce8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030120  2**0
                  CONTENTS
 10 .bss          00000a2c  20000120  20000120  00030120  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b4c  20000b4c  00030120  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016572  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000358e  00000000  00000000  000466c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b80  00000000  00000000  00049c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023205  00000000  00000000  0004a7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001171f  00000000  00000000  0006d9d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0d68  00000000  00000000  0007f0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013fe5c  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 000009e8  00000000  00000000  0013feb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002b90  00000000  00000000  00140898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010194 <__do_global_dtors_aux>:
 8010194:	b510      	push	{r4, lr}
 8010196:	4c05      	ldr	r4, [pc, #20]	; (80101ac <__do_global_dtors_aux+0x18>)
 8010198:	7823      	ldrb	r3, [r4, #0]
 801019a:	b933      	cbnz	r3, 80101aa <__do_global_dtors_aux+0x16>
 801019c:	4b04      	ldr	r3, [pc, #16]	; (80101b0 <__do_global_dtors_aux+0x1c>)
 801019e:	b113      	cbz	r3, 80101a6 <__do_global_dtors_aux+0x12>
 80101a0:	4804      	ldr	r0, [pc, #16]	; (80101b4 <__do_global_dtors_aux+0x20>)
 80101a2:	f3af 8000 	nop.w
 80101a6:	2301      	movs	r3, #1
 80101a8:	7023      	strb	r3, [r4, #0]
 80101aa:	bd10      	pop	{r4, pc}
 80101ac:	20000120 	.word	0x20000120
 80101b0:	00000000 	.word	0x00000000
 80101b4:	08018c18 	.word	0x08018c18

080101b8 <frame_dummy>:
 80101b8:	b508      	push	{r3, lr}
 80101ba:	4b03      	ldr	r3, [pc, #12]	; (80101c8 <frame_dummy+0x10>)
 80101bc:	b11b      	cbz	r3, 80101c6 <frame_dummy+0xe>
 80101be:	4903      	ldr	r1, [pc, #12]	; (80101cc <frame_dummy+0x14>)
 80101c0:	4803      	ldr	r0, [pc, #12]	; (80101d0 <frame_dummy+0x18>)
 80101c2:	f3af 8000 	nop.w
 80101c6:	bd08      	pop	{r3, pc}
 80101c8:	00000000 	.word	0x00000000
 80101cc:	20000124 	.word	0x20000124
 80101d0:	08018c18 	.word	0x08018c18

080101d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80101d8:	f000 f95a 	bl	8010490 <HAL_Init>

  /* USER CODE BEGIN Init */
  asm("cpsie i");//enable inturrupts
 80101dc:	b662      	cpsie	i
  asm("cpsie f");
 80101de:	b661      	cpsie	f

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80101e0:	f000 f810 	bl	8010204 <SystemClock_Config>
  //RCC->AHBENR |= RCC_AHBENR_GPIOCEN;//enable GPIOC

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80101e4:	f000 f86e 	bl	80102c4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80101e8:	f008 f868 	bl	80182bc <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 80101ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80101f0:	4803      	ldr	r0, [pc, #12]	; (8010200 <main+0x2c>)
 80101f2:	f000 fc8b 	bl	8010b0c <HAL_GPIO_TogglePin>
  	HAL_Delay(1000);
 80101f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80101fa:	f000 f9af 	bl	801055c <HAL_Delay>
  	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 80101fe:	e7f5      	b.n	80101ec <main+0x18>
 8010200:	48000800 	.word	0x48000800

08010204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b0a6      	sub	sp, #152	; 0x98
 8010208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801020a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801020e:	2228      	movs	r2, #40	; 0x28
 8010210:	2100      	movs	r1, #0
 8010212:	4618      	mov	r0, r3
 8010214:	f008 fcf8 	bl	8018c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010218:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801021c:	2200      	movs	r2, #0
 801021e:	601a      	str	r2, [r3, #0]
 8010220:	605a      	str	r2, [r3, #4]
 8010222:	609a      	str	r2, [r3, #8]
 8010224:	60da      	str	r2, [r3, #12]
 8010226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010228:	1d3b      	adds	r3, r7, #4
 801022a:	2258      	movs	r2, #88	; 0x58
 801022c:	2100      	movs	r1, #0
 801022e:	4618      	mov	r0, r3
 8010230:	f008 fcea 	bl	8018c08 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8010234:	2301      	movs	r3, #1
 8010236:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8010238:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801023c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801023e:	2301      	movs	r3, #1
 8010240:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010242:	2302      	movs	r3, #2
 8010244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8010248:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801024c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8010250:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8010254:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8010258:	2300      	movs	r3, #0
 801025a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801025e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010262:	4618      	mov	r0, r3
 8010264:	f002 f94e 	bl	8012504 <HAL_RCC_OscConfig>
 8010268:	4603      	mov	r3, r0
 801026a:	2b00      	cmp	r3, #0
 801026c:	d001      	beq.n	8010272 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 801026e:	f000 f875 	bl	801035c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010272:	230f      	movs	r3, #15
 8010274:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010276:	2302      	movs	r3, #2
 8010278:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801027a:	2300      	movs	r3, #0
 801027c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 801027e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010282:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8010284:	2300      	movs	r3, #0
 8010286:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8010288:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801028c:	2102      	movs	r1, #2
 801028e:	4618      	mov	r0, r3
 8010290:	f003 f84e 	bl	8013330 <HAL_RCC_ClockConfig>
 8010294:	4603      	mov	r3, r0
 8010296:	2b00      	cmp	r3, #0
 8010298:	d001      	beq.n	801029e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 801029a:	f000 f85f 	bl	801035c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801029e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80102a2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80102a4:	2300      	movs	r3, #0
 80102a6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80102a8:	1d3b      	adds	r3, r7, #4
 80102aa:	4618      	mov	r0, r3
 80102ac:	f003 fa10 	bl	80136d0 <HAL_RCCEx_PeriphCLKConfig>
 80102b0:	4603      	mov	r3, r0
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d001      	beq.n	80102ba <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80102b6:	f000 f851 	bl	801035c <Error_Handler>
  }
}
 80102ba:	bf00      	nop
 80102bc:	3798      	adds	r7, #152	; 0x98
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}
	...

080102c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b088      	sub	sp, #32
 80102c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80102ca:	f107 030c 	add.w	r3, r7, #12
 80102ce:	2200      	movs	r2, #0
 80102d0:	601a      	str	r2, [r3, #0]
 80102d2:	605a      	str	r2, [r3, #4]
 80102d4:	609a      	str	r2, [r3, #8]
 80102d6:	60da      	str	r2, [r3, #12]
 80102d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80102da:	4b1e      	ldr	r3, [pc, #120]	; (8010354 <MX_GPIO_Init+0x90>)
 80102dc:	695b      	ldr	r3, [r3, #20]
 80102de:	4a1d      	ldr	r2, [pc, #116]	; (8010354 <MX_GPIO_Init+0x90>)
 80102e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80102e4:	6153      	str	r3, [r2, #20]
 80102e6:	4b1b      	ldr	r3, [pc, #108]	; (8010354 <MX_GPIO_Init+0x90>)
 80102e8:	695b      	ldr	r3, [r3, #20]
 80102ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80102ee:	60bb      	str	r3, [r7, #8]
 80102f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80102f2:	4b18      	ldr	r3, [pc, #96]	; (8010354 <MX_GPIO_Init+0x90>)
 80102f4:	695b      	ldr	r3, [r3, #20]
 80102f6:	4a17      	ldr	r2, [pc, #92]	; (8010354 <MX_GPIO_Init+0x90>)
 80102f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80102fc:	6153      	str	r3, [r2, #20]
 80102fe:	4b15      	ldr	r3, [pc, #84]	; (8010354 <MX_GPIO_Init+0x90>)
 8010300:	695b      	ldr	r3, [r3, #20]
 8010302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010306:	607b      	str	r3, [r7, #4]
 8010308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801030a:	4b12      	ldr	r3, [pc, #72]	; (8010354 <MX_GPIO_Init+0x90>)
 801030c:	695b      	ldr	r3, [r3, #20]
 801030e:	4a11      	ldr	r2, [pc, #68]	; (8010354 <MX_GPIO_Init+0x90>)
 8010310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010314:	6153      	str	r3, [r2, #20]
 8010316:	4b0f      	ldr	r3, [pc, #60]	; (8010354 <MX_GPIO_Init+0x90>)
 8010318:	695b      	ldr	r3, [r3, #20]
 801031a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801031e:	603b      	str	r3, [r7, #0]
 8010320:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8010322:	2200      	movs	r2, #0
 8010324:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010328:	480b      	ldr	r0, [pc, #44]	; (8010358 <MX_GPIO_Init+0x94>)
 801032a:	f000 fbd7 	bl	8010adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 801032e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010332:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010334:	2301      	movs	r3, #1
 8010336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010338:	2300      	movs	r3, #0
 801033a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801033c:	2300      	movs	r3, #0
 801033e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010340:	f107 030c 	add.w	r3, r7, #12
 8010344:	4619      	mov	r1, r3
 8010346:	4804      	ldr	r0, [pc, #16]	; (8010358 <MX_GPIO_Init+0x94>)
 8010348:	f000 fa3e 	bl	80107c8 <HAL_GPIO_Init>

}
 801034c:	bf00      	nop
 801034e:	3720      	adds	r7, #32
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}
 8010354:	40021000 	.word	0x40021000
 8010358:	48000800 	.word	0x48000800

0801035c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801035c:	b480      	push	{r7}
 801035e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8010360:	b672      	cpsid	i
}
 8010362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8010364:	e7fe      	b.n	8010364 <Error_Handler+0x8>
	...

08010368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010368:	b480      	push	{r7}
 801036a:	b083      	sub	sp, #12
 801036c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801036e:	4b0f      	ldr	r3, [pc, #60]	; (80103ac <HAL_MspInit+0x44>)
 8010370:	699b      	ldr	r3, [r3, #24]
 8010372:	4a0e      	ldr	r2, [pc, #56]	; (80103ac <HAL_MspInit+0x44>)
 8010374:	f043 0301 	orr.w	r3, r3, #1
 8010378:	6193      	str	r3, [r2, #24]
 801037a:	4b0c      	ldr	r3, [pc, #48]	; (80103ac <HAL_MspInit+0x44>)
 801037c:	699b      	ldr	r3, [r3, #24]
 801037e:	f003 0301 	and.w	r3, r3, #1
 8010382:	607b      	str	r3, [r7, #4]
 8010384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010386:	4b09      	ldr	r3, [pc, #36]	; (80103ac <HAL_MspInit+0x44>)
 8010388:	69db      	ldr	r3, [r3, #28]
 801038a:	4a08      	ldr	r2, [pc, #32]	; (80103ac <HAL_MspInit+0x44>)
 801038c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010390:	61d3      	str	r3, [r2, #28]
 8010392:	4b06      	ldr	r3, [pc, #24]	; (80103ac <HAL_MspInit+0x44>)
 8010394:	69db      	ldr	r3, [r3, #28]
 8010396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801039a:	603b      	str	r3, [r7, #0]
 801039c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801039e:	bf00      	nop
 80103a0:	370c      	adds	r7, #12
 80103a2:	46bd      	mov	sp, r7
 80103a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a8:	4770      	bx	lr
 80103aa:	bf00      	nop
 80103ac:	40021000 	.word	0x40021000

080103b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80103b0:	b480      	push	{r7}
 80103b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80103b4:	e7fe      	b.n	80103b4 <NMI_Handler+0x4>

080103b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80103b6:	b480      	push	{r7}
 80103b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80103ba:	e7fe      	b.n	80103ba <HardFault_Handler+0x4>

080103bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80103bc:	b480      	push	{r7}
 80103be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80103c0:	e7fe      	b.n	80103c0 <MemManage_Handler+0x4>

080103c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80103c2:	b480      	push	{r7}
 80103c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80103c6:	e7fe      	b.n	80103c6 <BusFault_Handler+0x4>

080103c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80103c8:	b480      	push	{r7}
 80103ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80103cc:	e7fe      	b.n	80103cc <UsageFault_Handler+0x4>

080103ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80103ce:	b480      	push	{r7}
 80103d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80103d2:	bf00      	nop
 80103d4:	46bd      	mov	sp, r7
 80103d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103da:	4770      	bx	lr

080103dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80103dc:	b480      	push	{r7}
 80103de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80103e0:	bf00      	nop
 80103e2:	46bd      	mov	sp, r7
 80103e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e8:	4770      	bx	lr

080103ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80103ea:	b480      	push	{r7}
 80103ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80103ee:	bf00      	nop
 80103f0:	46bd      	mov	sp, r7
 80103f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f6:	4770      	bx	lr

080103f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80103fc:	f000 f88e 	bl	801051c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010400:	bf00      	nop
 8010402:	bd80      	pop	{r7, pc}

08010404 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8010408:	4802      	ldr	r0, [pc, #8]	; (8010414 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 801040a:	f000 fc86 	bl	8010d1a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 801040e:	bf00      	nop
 8010410:	bd80      	pop	{r7, pc}
 8010412:	bf00      	nop
 8010414:	20000878 	.word	0x20000878

08010418 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010418:	b480      	push	{r7}
 801041a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801041c:	4b06      	ldr	r3, [pc, #24]	; (8010438 <SystemInit+0x20>)
 801041e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010422:	4a05      	ldr	r2, [pc, #20]	; (8010438 <SystemInit+0x20>)
 8010424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 801042c:	bf00      	nop
 801042e:	46bd      	mov	sp, r7
 8010430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010434:	4770      	bx	lr
 8010436:	bf00      	nop
 8010438:	e000ed00 	.word	0xe000ed00

0801043c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 801043c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010474 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8010440:	f7ff ffea 	bl	8010418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8010444:	480c      	ldr	r0, [pc, #48]	; (8010478 <LoopForever+0x6>)
  ldr r1, =_edata
 8010446:	490d      	ldr	r1, [pc, #52]	; (801047c <LoopForever+0xa>)
  ldr r2, =_sidata
 8010448:	4a0d      	ldr	r2, [pc, #52]	; (8010480 <LoopForever+0xe>)
  movs r3, #0
 801044a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801044c:	e002      	b.n	8010454 <LoopCopyDataInit>

0801044e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801044e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010452:	3304      	adds	r3, #4

08010454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010458:	d3f9      	bcc.n	801044e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801045a:	4a0a      	ldr	r2, [pc, #40]	; (8010484 <LoopForever+0x12>)
  ldr r4, =_ebss
 801045c:	4c0a      	ldr	r4, [pc, #40]	; (8010488 <LoopForever+0x16>)
  movs r3, #0
 801045e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010460:	e001      	b.n	8010466 <LoopFillZerobss>

08010462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010464:	3204      	adds	r2, #4

08010466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010468:	d3fb      	bcc.n	8010462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801046a:	f008 fb9b 	bl	8018ba4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801046e:	f7ff feb1 	bl	80101d4 <main>

08010472 <LoopForever>:

LoopForever:
    b LoopForever
 8010472:	e7fe      	b.n	8010472 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8010474:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8010478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801047c:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8010480:	08028ce8 	.word	0x08028ce8
  ldr r2, =_sbss
 8010484:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8010488:	20000b4c 	.word	0x20000b4c

0801048c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 801048c:	e7fe      	b.n	801048c <ADC1_2_IRQHandler>
	...

08010490 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010490:	b580      	push	{r7, lr}
 8010492:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010494:	4b08      	ldr	r3, [pc, #32]	; (80104b8 <HAL_Init+0x28>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	4a07      	ldr	r2, [pc, #28]	; (80104b8 <HAL_Init+0x28>)
 801049a:	f043 0310 	orr.w	r3, r3, #16
 801049e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80104a0:	2003      	movs	r0, #3
 80104a2:	f000 f94f 	bl	8010744 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80104a6:	200f      	movs	r0, #15
 80104a8:	f000 f808 	bl	80104bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80104ac:	f7ff ff5c 	bl	8010368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80104b0:	2300      	movs	r3, #0
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	bd80      	pop	{r7, pc}
 80104b6:	bf00      	nop
 80104b8:	40022000 	.word	0x40022000

080104bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b082      	sub	sp, #8
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80104c4:	4b12      	ldr	r3, [pc, #72]	; (8010510 <HAL_InitTick+0x54>)
 80104c6:	681a      	ldr	r2, [r3, #0]
 80104c8:	4b12      	ldr	r3, [pc, #72]	; (8010514 <HAL_InitTick+0x58>)
 80104ca:	781b      	ldrb	r3, [r3, #0]
 80104cc:	4619      	mov	r1, r3
 80104ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80104d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80104d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80104da:	4618      	mov	r0, r3
 80104dc:	f000 f967 	bl	80107ae <HAL_SYSTICK_Config>
 80104e0:	4603      	mov	r3, r0
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d001      	beq.n	80104ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80104e6:	2301      	movs	r3, #1
 80104e8:	e00e      	b.n	8010508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2b0f      	cmp	r3, #15
 80104ee:	d80a      	bhi.n	8010506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80104f0:	2200      	movs	r2, #0
 80104f2:	6879      	ldr	r1, [r7, #4]
 80104f4:	f04f 30ff 	mov.w	r0, #4294967295
 80104f8:	f000 f92f 	bl	801075a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80104fc:	4a06      	ldr	r2, [pc, #24]	; (8010518 <HAL_InitTick+0x5c>)
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8010502:	2300      	movs	r3, #0
 8010504:	e000      	b.n	8010508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8010506:	2301      	movs	r3, #1
}
 8010508:	4618      	mov	r0, r3
 801050a:	3708      	adds	r7, #8
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}
 8010510:	20000000 	.word	0x20000000
 8010514:	20000008 	.word	0x20000008
 8010518:	20000004 	.word	0x20000004

0801051c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801051c:	b480      	push	{r7}
 801051e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010520:	4b06      	ldr	r3, [pc, #24]	; (801053c <HAL_IncTick+0x20>)
 8010522:	781b      	ldrb	r3, [r3, #0]
 8010524:	461a      	mov	r2, r3
 8010526:	4b06      	ldr	r3, [pc, #24]	; (8010540 <HAL_IncTick+0x24>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	4413      	add	r3, r2
 801052c:	4a04      	ldr	r2, [pc, #16]	; (8010540 <HAL_IncTick+0x24>)
 801052e:	6013      	str	r3, [r2, #0]
}
 8010530:	bf00      	nop
 8010532:	46bd      	mov	sp, r7
 8010534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010538:	4770      	bx	lr
 801053a:	bf00      	nop
 801053c:	20000008 	.word	0x20000008
 8010540:	200003b0 	.word	0x200003b0

08010544 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010544:	b480      	push	{r7}
 8010546:	af00      	add	r7, sp, #0
  return uwTick;  
 8010548:	4b03      	ldr	r3, [pc, #12]	; (8010558 <HAL_GetTick+0x14>)
 801054a:	681b      	ldr	r3, [r3, #0]
}
 801054c:	4618      	mov	r0, r3
 801054e:	46bd      	mov	sp, r7
 8010550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010554:	4770      	bx	lr
 8010556:	bf00      	nop
 8010558:	200003b0 	.word	0x200003b0

0801055c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b084      	sub	sp, #16
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010564:	f7ff ffee 	bl	8010544 <HAL_GetTick>
 8010568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010574:	d005      	beq.n	8010582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010576:	4b0a      	ldr	r3, [pc, #40]	; (80105a0 <HAL_Delay+0x44>)
 8010578:	781b      	ldrb	r3, [r3, #0]
 801057a:	461a      	mov	r2, r3
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	4413      	add	r3, r2
 8010580:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8010582:	bf00      	nop
 8010584:	f7ff ffde 	bl	8010544 <HAL_GetTick>
 8010588:	4602      	mov	r2, r0
 801058a:	68bb      	ldr	r3, [r7, #8]
 801058c:	1ad3      	subs	r3, r2, r3
 801058e:	68fa      	ldr	r2, [r7, #12]
 8010590:	429a      	cmp	r2, r3
 8010592:	d8f7      	bhi.n	8010584 <HAL_Delay+0x28>
  {
  }
}
 8010594:	bf00      	nop
 8010596:	bf00      	nop
 8010598:	3710      	adds	r7, #16
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}
 801059e:	bf00      	nop
 80105a0:	20000008 	.word	0x20000008

080105a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80105a4:	b480      	push	{r7}
 80105a6:	b085      	sub	sp, #20
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	f003 0307 	and.w	r3, r3, #7
 80105b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80105b4:	4b0c      	ldr	r3, [pc, #48]	; (80105e8 <__NVIC_SetPriorityGrouping+0x44>)
 80105b6:	68db      	ldr	r3, [r3, #12]
 80105b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80105ba:	68ba      	ldr	r2, [r7, #8]
 80105bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80105c0:	4013      	ands	r3, r2
 80105c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80105cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80105d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80105d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80105d6:	4a04      	ldr	r2, [pc, #16]	; (80105e8 <__NVIC_SetPriorityGrouping+0x44>)
 80105d8:	68bb      	ldr	r3, [r7, #8]
 80105da:	60d3      	str	r3, [r2, #12]
}
 80105dc:	bf00      	nop
 80105de:	3714      	adds	r7, #20
 80105e0:	46bd      	mov	sp, r7
 80105e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e6:	4770      	bx	lr
 80105e8:	e000ed00 	.word	0xe000ed00

080105ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80105ec:	b480      	push	{r7}
 80105ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80105f0:	4b04      	ldr	r3, [pc, #16]	; (8010604 <__NVIC_GetPriorityGrouping+0x18>)
 80105f2:	68db      	ldr	r3, [r3, #12]
 80105f4:	0a1b      	lsrs	r3, r3, #8
 80105f6:	f003 0307 	and.w	r3, r3, #7
}
 80105fa:	4618      	mov	r0, r3
 80105fc:	46bd      	mov	sp, r7
 80105fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010602:	4770      	bx	lr
 8010604:	e000ed00 	.word	0xe000ed00

08010608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010608:	b480      	push	{r7}
 801060a:	b083      	sub	sp, #12
 801060c:	af00      	add	r7, sp, #0
 801060e:	4603      	mov	r3, r0
 8010610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010616:	2b00      	cmp	r3, #0
 8010618:	db0b      	blt.n	8010632 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801061a:	79fb      	ldrb	r3, [r7, #7]
 801061c:	f003 021f 	and.w	r2, r3, #31
 8010620:	4907      	ldr	r1, [pc, #28]	; (8010640 <__NVIC_EnableIRQ+0x38>)
 8010622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010626:	095b      	lsrs	r3, r3, #5
 8010628:	2001      	movs	r0, #1
 801062a:	fa00 f202 	lsl.w	r2, r0, r2
 801062e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8010632:	bf00      	nop
 8010634:	370c      	adds	r7, #12
 8010636:	46bd      	mov	sp, r7
 8010638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063c:	4770      	bx	lr
 801063e:	bf00      	nop
 8010640:	e000e100 	.word	0xe000e100

08010644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010644:	b480      	push	{r7}
 8010646:	b083      	sub	sp, #12
 8010648:	af00      	add	r7, sp, #0
 801064a:	4603      	mov	r3, r0
 801064c:	6039      	str	r1, [r7, #0]
 801064e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010654:	2b00      	cmp	r3, #0
 8010656:	db0a      	blt.n	801066e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	b2da      	uxtb	r2, r3
 801065c:	490c      	ldr	r1, [pc, #48]	; (8010690 <__NVIC_SetPriority+0x4c>)
 801065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010662:	0112      	lsls	r2, r2, #4
 8010664:	b2d2      	uxtb	r2, r2
 8010666:	440b      	add	r3, r1
 8010668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801066c:	e00a      	b.n	8010684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	b2da      	uxtb	r2, r3
 8010672:	4908      	ldr	r1, [pc, #32]	; (8010694 <__NVIC_SetPriority+0x50>)
 8010674:	79fb      	ldrb	r3, [r7, #7]
 8010676:	f003 030f 	and.w	r3, r3, #15
 801067a:	3b04      	subs	r3, #4
 801067c:	0112      	lsls	r2, r2, #4
 801067e:	b2d2      	uxtb	r2, r2
 8010680:	440b      	add	r3, r1
 8010682:	761a      	strb	r2, [r3, #24]
}
 8010684:	bf00      	nop
 8010686:	370c      	adds	r7, #12
 8010688:	46bd      	mov	sp, r7
 801068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068e:	4770      	bx	lr
 8010690:	e000e100 	.word	0xe000e100
 8010694:	e000ed00 	.word	0xe000ed00

08010698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010698:	b480      	push	{r7}
 801069a:	b089      	sub	sp, #36	; 0x24
 801069c:	af00      	add	r7, sp, #0
 801069e:	60f8      	str	r0, [r7, #12]
 80106a0:	60b9      	str	r1, [r7, #8]
 80106a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	f003 0307 	and.w	r3, r3, #7
 80106aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80106ac:	69fb      	ldr	r3, [r7, #28]
 80106ae:	f1c3 0307 	rsb	r3, r3, #7
 80106b2:	2b04      	cmp	r3, #4
 80106b4:	bf28      	it	cs
 80106b6:	2304      	movcs	r3, #4
 80106b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80106ba:	69fb      	ldr	r3, [r7, #28]
 80106bc:	3304      	adds	r3, #4
 80106be:	2b06      	cmp	r3, #6
 80106c0:	d902      	bls.n	80106c8 <NVIC_EncodePriority+0x30>
 80106c2:	69fb      	ldr	r3, [r7, #28]
 80106c4:	3b03      	subs	r3, #3
 80106c6:	e000      	b.n	80106ca <NVIC_EncodePriority+0x32>
 80106c8:	2300      	movs	r3, #0
 80106ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80106cc:	f04f 32ff 	mov.w	r2, #4294967295
 80106d0:	69bb      	ldr	r3, [r7, #24]
 80106d2:	fa02 f303 	lsl.w	r3, r2, r3
 80106d6:	43da      	mvns	r2, r3
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	401a      	ands	r2, r3
 80106dc:	697b      	ldr	r3, [r7, #20]
 80106de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80106e0:	f04f 31ff 	mov.w	r1, #4294967295
 80106e4:	697b      	ldr	r3, [r7, #20]
 80106e6:	fa01 f303 	lsl.w	r3, r1, r3
 80106ea:	43d9      	mvns	r1, r3
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80106f0:	4313      	orrs	r3, r2
         );
}
 80106f2:	4618      	mov	r0, r3
 80106f4:	3724      	adds	r7, #36	; 0x24
 80106f6:	46bd      	mov	sp, r7
 80106f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fc:	4770      	bx	lr
	...

08010700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b082      	sub	sp, #8
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	3b01      	subs	r3, #1
 801070c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010710:	d301      	bcc.n	8010716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010712:	2301      	movs	r3, #1
 8010714:	e00f      	b.n	8010736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010716:	4a0a      	ldr	r2, [pc, #40]	; (8010740 <SysTick_Config+0x40>)
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	3b01      	subs	r3, #1
 801071c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801071e:	210f      	movs	r1, #15
 8010720:	f04f 30ff 	mov.w	r0, #4294967295
 8010724:	f7ff ff8e 	bl	8010644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010728:	4b05      	ldr	r3, [pc, #20]	; (8010740 <SysTick_Config+0x40>)
 801072a:	2200      	movs	r2, #0
 801072c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801072e:	4b04      	ldr	r3, [pc, #16]	; (8010740 <SysTick_Config+0x40>)
 8010730:	2207      	movs	r2, #7
 8010732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010734:	2300      	movs	r3, #0
}
 8010736:	4618      	mov	r0, r3
 8010738:	3708      	adds	r7, #8
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}
 801073e:	bf00      	nop
 8010740:	e000e010 	.word	0xe000e010

08010744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b082      	sub	sp, #8
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f7ff ff29 	bl	80105a4 <__NVIC_SetPriorityGrouping>
}
 8010752:	bf00      	nop
 8010754:	3708      	adds	r7, #8
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}

0801075a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801075a:	b580      	push	{r7, lr}
 801075c:	b086      	sub	sp, #24
 801075e:	af00      	add	r7, sp, #0
 8010760:	4603      	mov	r3, r0
 8010762:	60b9      	str	r1, [r7, #8]
 8010764:	607a      	str	r2, [r7, #4]
 8010766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010768:	2300      	movs	r3, #0
 801076a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801076c:	f7ff ff3e 	bl	80105ec <__NVIC_GetPriorityGrouping>
 8010770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010772:	687a      	ldr	r2, [r7, #4]
 8010774:	68b9      	ldr	r1, [r7, #8]
 8010776:	6978      	ldr	r0, [r7, #20]
 8010778:	f7ff ff8e 	bl	8010698 <NVIC_EncodePriority>
 801077c:	4602      	mov	r2, r0
 801077e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010782:	4611      	mov	r1, r2
 8010784:	4618      	mov	r0, r3
 8010786:	f7ff ff5d 	bl	8010644 <__NVIC_SetPriority>
}
 801078a:	bf00      	nop
 801078c:	3718      	adds	r7, #24
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}

08010792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010792:	b580      	push	{r7, lr}
 8010794:	b082      	sub	sp, #8
 8010796:	af00      	add	r7, sp, #0
 8010798:	4603      	mov	r3, r0
 801079a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801079c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80107a0:	4618      	mov	r0, r3
 80107a2:	f7ff ff31 	bl	8010608 <__NVIC_EnableIRQ>
}
 80107a6:	bf00      	nop
 80107a8:	3708      	adds	r7, #8
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd80      	pop	{r7, pc}

080107ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80107ae:	b580      	push	{r7, lr}
 80107b0:	b082      	sub	sp, #8
 80107b2:	af00      	add	r7, sp, #0
 80107b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	f7ff ffa2 	bl	8010700 <SysTick_Config>
 80107bc:	4603      	mov	r3, r0
}
 80107be:	4618      	mov	r0, r3
 80107c0:	3708      	adds	r7, #8
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bd80      	pop	{r7, pc}
	...

080107c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80107c8:	b480      	push	{r7}
 80107ca:	b087      	sub	sp, #28
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
 80107d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80107d2:	2300      	movs	r3, #0
 80107d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80107d6:	e160      	b.n	8010a9a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80107d8:	683b      	ldr	r3, [r7, #0]
 80107da:	681a      	ldr	r2, [r3, #0]
 80107dc:	2101      	movs	r1, #1
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	fa01 f303 	lsl.w	r3, r1, r3
 80107e4:	4013      	ands	r3, r2
 80107e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	f000 8152 	beq.w	8010a94 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	685b      	ldr	r3, [r3, #4]
 80107f4:	f003 0303 	and.w	r3, r3, #3
 80107f8:	2b01      	cmp	r3, #1
 80107fa:	d005      	beq.n	8010808 <HAL_GPIO_Init+0x40>
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	685b      	ldr	r3, [r3, #4]
 8010800:	f003 0303 	and.w	r3, r3, #3
 8010804:	2b02      	cmp	r3, #2
 8010806:	d130      	bne.n	801086a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	689b      	ldr	r3, [r3, #8]
 801080c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 801080e:	697b      	ldr	r3, [r7, #20]
 8010810:	005b      	lsls	r3, r3, #1
 8010812:	2203      	movs	r2, #3
 8010814:	fa02 f303 	lsl.w	r3, r2, r3
 8010818:	43db      	mvns	r3, r3
 801081a:	693a      	ldr	r2, [r7, #16]
 801081c:	4013      	ands	r3, r2
 801081e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	68da      	ldr	r2, [r3, #12]
 8010824:	697b      	ldr	r3, [r7, #20]
 8010826:	005b      	lsls	r3, r3, #1
 8010828:	fa02 f303 	lsl.w	r3, r2, r3
 801082c:	693a      	ldr	r2, [r7, #16]
 801082e:	4313      	orrs	r3, r2
 8010830:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	693a      	ldr	r2, [r7, #16]
 8010836:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	685b      	ldr	r3, [r3, #4]
 801083c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801083e:	2201      	movs	r2, #1
 8010840:	697b      	ldr	r3, [r7, #20]
 8010842:	fa02 f303 	lsl.w	r3, r2, r3
 8010846:	43db      	mvns	r3, r3
 8010848:	693a      	ldr	r2, [r7, #16]
 801084a:	4013      	ands	r3, r2
 801084c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	685b      	ldr	r3, [r3, #4]
 8010852:	091b      	lsrs	r3, r3, #4
 8010854:	f003 0201 	and.w	r2, r3, #1
 8010858:	697b      	ldr	r3, [r7, #20]
 801085a:	fa02 f303 	lsl.w	r3, r2, r3
 801085e:	693a      	ldr	r2, [r7, #16]
 8010860:	4313      	orrs	r3, r2
 8010862:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	693a      	ldr	r2, [r7, #16]
 8010868:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	685b      	ldr	r3, [r3, #4]
 801086e:	f003 0303 	and.w	r3, r3, #3
 8010872:	2b03      	cmp	r3, #3
 8010874:	d017      	beq.n	80108a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	68db      	ldr	r3, [r3, #12]
 801087a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 801087c:	697b      	ldr	r3, [r7, #20]
 801087e:	005b      	lsls	r3, r3, #1
 8010880:	2203      	movs	r2, #3
 8010882:	fa02 f303 	lsl.w	r3, r2, r3
 8010886:	43db      	mvns	r3, r3
 8010888:	693a      	ldr	r2, [r7, #16]
 801088a:	4013      	ands	r3, r2
 801088c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	689a      	ldr	r2, [r3, #8]
 8010892:	697b      	ldr	r3, [r7, #20]
 8010894:	005b      	lsls	r3, r3, #1
 8010896:	fa02 f303 	lsl.w	r3, r2, r3
 801089a:	693a      	ldr	r2, [r7, #16]
 801089c:	4313      	orrs	r3, r2
 801089e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	693a      	ldr	r2, [r7, #16]
 80108a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80108a6:	683b      	ldr	r3, [r7, #0]
 80108a8:	685b      	ldr	r3, [r3, #4]
 80108aa:	f003 0303 	and.w	r3, r3, #3
 80108ae:	2b02      	cmp	r3, #2
 80108b0:	d123      	bne.n	80108fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	08da      	lsrs	r2, r3, #3
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	3208      	adds	r2, #8
 80108ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80108c0:	697b      	ldr	r3, [r7, #20]
 80108c2:	f003 0307 	and.w	r3, r3, #7
 80108c6:	009b      	lsls	r3, r3, #2
 80108c8:	220f      	movs	r2, #15
 80108ca:	fa02 f303 	lsl.w	r3, r2, r3
 80108ce:	43db      	mvns	r3, r3
 80108d0:	693a      	ldr	r2, [r7, #16]
 80108d2:	4013      	ands	r3, r2
 80108d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	691a      	ldr	r2, [r3, #16]
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	f003 0307 	and.w	r3, r3, #7
 80108e0:	009b      	lsls	r3, r3, #2
 80108e2:	fa02 f303 	lsl.w	r3, r2, r3
 80108e6:	693a      	ldr	r2, [r7, #16]
 80108e8:	4313      	orrs	r3, r2
 80108ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80108ec:	697b      	ldr	r3, [r7, #20]
 80108ee:	08da      	lsrs	r2, r3, #3
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	3208      	adds	r2, #8
 80108f4:	6939      	ldr	r1, [r7, #16]
 80108f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	005b      	lsls	r3, r3, #1
 8010904:	2203      	movs	r2, #3
 8010906:	fa02 f303 	lsl.w	r3, r2, r3
 801090a:	43db      	mvns	r3, r3
 801090c:	693a      	ldr	r2, [r7, #16]
 801090e:	4013      	ands	r3, r2
 8010910:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	f003 0203 	and.w	r2, r3, #3
 801091a:	697b      	ldr	r3, [r7, #20]
 801091c:	005b      	lsls	r3, r3, #1
 801091e:	fa02 f303 	lsl.w	r3, r2, r3
 8010922:	693a      	ldr	r2, [r7, #16]
 8010924:	4313      	orrs	r3, r2
 8010926:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	693a      	ldr	r2, [r7, #16]
 801092c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	685b      	ldr	r3, [r3, #4]
 8010932:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010936:	2b00      	cmp	r3, #0
 8010938:	f000 80ac 	beq.w	8010a94 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801093c:	4b5e      	ldr	r3, [pc, #376]	; (8010ab8 <HAL_GPIO_Init+0x2f0>)
 801093e:	699b      	ldr	r3, [r3, #24]
 8010940:	4a5d      	ldr	r2, [pc, #372]	; (8010ab8 <HAL_GPIO_Init+0x2f0>)
 8010942:	f043 0301 	orr.w	r3, r3, #1
 8010946:	6193      	str	r3, [r2, #24]
 8010948:	4b5b      	ldr	r3, [pc, #364]	; (8010ab8 <HAL_GPIO_Init+0x2f0>)
 801094a:	699b      	ldr	r3, [r3, #24]
 801094c:	f003 0301 	and.w	r3, r3, #1
 8010950:	60bb      	str	r3, [r7, #8]
 8010952:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8010954:	4a59      	ldr	r2, [pc, #356]	; (8010abc <HAL_GPIO_Init+0x2f4>)
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	089b      	lsrs	r3, r3, #2
 801095a:	3302      	adds	r3, #2
 801095c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010960:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	f003 0303 	and.w	r3, r3, #3
 8010968:	009b      	lsls	r3, r3, #2
 801096a:	220f      	movs	r2, #15
 801096c:	fa02 f303 	lsl.w	r3, r2, r3
 8010970:	43db      	mvns	r3, r3
 8010972:	693a      	ldr	r2, [r7, #16]
 8010974:	4013      	ands	r3, r2
 8010976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801097e:	d025      	beq.n	80109cc <HAL_GPIO_Init+0x204>
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	4a4f      	ldr	r2, [pc, #316]	; (8010ac0 <HAL_GPIO_Init+0x2f8>)
 8010984:	4293      	cmp	r3, r2
 8010986:	d01f      	beq.n	80109c8 <HAL_GPIO_Init+0x200>
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	4a4e      	ldr	r2, [pc, #312]	; (8010ac4 <HAL_GPIO_Init+0x2fc>)
 801098c:	4293      	cmp	r3, r2
 801098e:	d019      	beq.n	80109c4 <HAL_GPIO_Init+0x1fc>
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	4a4d      	ldr	r2, [pc, #308]	; (8010ac8 <HAL_GPIO_Init+0x300>)
 8010994:	4293      	cmp	r3, r2
 8010996:	d013      	beq.n	80109c0 <HAL_GPIO_Init+0x1f8>
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	4a4c      	ldr	r2, [pc, #304]	; (8010acc <HAL_GPIO_Init+0x304>)
 801099c:	4293      	cmp	r3, r2
 801099e:	d00d      	beq.n	80109bc <HAL_GPIO_Init+0x1f4>
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	4a4b      	ldr	r2, [pc, #300]	; (8010ad0 <HAL_GPIO_Init+0x308>)
 80109a4:	4293      	cmp	r3, r2
 80109a6:	d007      	beq.n	80109b8 <HAL_GPIO_Init+0x1f0>
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	4a4a      	ldr	r2, [pc, #296]	; (8010ad4 <HAL_GPIO_Init+0x30c>)
 80109ac:	4293      	cmp	r3, r2
 80109ae:	d101      	bne.n	80109b4 <HAL_GPIO_Init+0x1ec>
 80109b0:	2306      	movs	r3, #6
 80109b2:	e00c      	b.n	80109ce <HAL_GPIO_Init+0x206>
 80109b4:	2307      	movs	r3, #7
 80109b6:	e00a      	b.n	80109ce <HAL_GPIO_Init+0x206>
 80109b8:	2305      	movs	r3, #5
 80109ba:	e008      	b.n	80109ce <HAL_GPIO_Init+0x206>
 80109bc:	2304      	movs	r3, #4
 80109be:	e006      	b.n	80109ce <HAL_GPIO_Init+0x206>
 80109c0:	2303      	movs	r3, #3
 80109c2:	e004      	b.n	80109ce <HAL_GPIO_Init+0x206>
 80109c4:	2302      	movs	r3, #2
 80109c6:	e002      	b.n	80109ce <HAL_GPIO_Init+0x206>
 80109c8:	2301      	movs	r3, #1
 80109ca:	e000      	b.n	80109ce <HAL_GPIO_Init+0x206>
 80109cc:	2300      	movs	r3, #0
 80109ce:	697a      	ldr	r2, [r7, #20]
 80109d0:	f002 0203 	and.w	r2, r2, #3
 80109d4:	0092      	lsls	r2, r2, #2
 80109d6:	4093      	lsls	r3, r2
 80109d8:	693a      	ldr	r2, [r7, #16]
 80109da:	4313      	orrs	r3, r2
 80109dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80109de:	4937      	ldr	r1, [pc, #220]	; (8010abc <HAL_GPIO_Init+0x2f4>)
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	089b      	lsrs	r3, r3, #2
 80109e4:	3302      	adds	r3, #2
 80109e6:	693a      	ldr	r2, [r7, #16]
 80109e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80109ec:	4b3a      	ldr	r3, [pc, #232]	; (8010ad8 <HAL_GPIO_Init+0x310>)
 80109ee:	689b      	ldr	r3, [r3, #8]
 80109f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	43db      	mvns	r3, r3
 80109f6:	693a      	ldr	r2, [r7, #16]
 80109f8:	4013      	ands	r3, r2
 80109fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80109fc:	683b      	ldr	r3, [r7, #0]
 80109fe:	685b      	ldr	r3, [r3, #4]
 8010a00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d003      	beq.n	8010a10 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8010a08:	693a      	ldr	r2, [r7, #16]
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	4313      	orrs	r3, r2
 8010a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8010a10:	4a31      	ldr	r2, [pc, #196]	; (8010ad8 <HAL_GPIO_Init+0x310>)
 8010a12:	693b      	ldr	r3, [r7, #16]
 8010a14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010a16:	4b30      	ldr	r3, [pc, #192]	; (8010ad8 <HAL_GPIO_Init+0x310>)
 8010a18:	68db      	ldr	r3, [r3, #12]
 8010a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	43db      	mvns	r3, r3
 8010a20:	693a      	ldr	r2, [r7, #16]
 8010a22:	4013      	ands	r3, r2
 8010a24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8010a26:	683b      	ldr	r3, [r7, #0]
 8010a28:	685b      	ldr	r3, [r3, #4]
 8010a2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d003      	beq.n	8010a3a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8010a32:	693a      	ldr	r2, [r7, #16]
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	4313      	orrs	r3, r2
 8010a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8010a3a:	4a27      	ldr	r2, [pc, #156]	; (8010ad8 <HAL_GPIO_Init+0x310>)
 8010a3c:	693b      	ldr	r3, [r7, #16]
 8010a3e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8010a40:	4b25      	ldr	r3, [pc, #148]	; (8010ad8 <HAL_GPIO_Init+0x310>)
 8010a42:	685b      	ldr	r3, [r3, #4]
 8010a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	43db      	mvns	r3, r3
 8010a4a:	693a      	ldr	r2, [r7, #16]
 8010a4c:	4013      	ands	r3, r2
 8010a4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	685b      	ldr	r3, [r3, #4]
 8010a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d003      	beq.n	8010a64 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8010a5c:	693a      	ldr	r2, [r7, #16]
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	4313      	orrs	r3, r2
 8010a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8010a64:	4a1c      	ldr	r2, [pc, #112]	; (8010ad8 <HAL_GPIO_Init+0x310>)
 8010a66:	693b      	ldr	r3, [r7, #16]
 8010a68:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010a6a:	4b1b      	ldr	r3, [pc, #108]	; (8010ad8 <HAL_GPIO_Init+0x310>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	43db      	mvns	r3, r3
 8010a74:	693a      	ldr	r2, [r7, #16]
 8010a76:	4013      	ands	r3, r2
 8010a78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	685b      	ldr	r3, [r3, #4]
 8010a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d003      	beq.n	8010a8e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8010a86:	693a      	ldr	r2, [r7, #16]
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	4313      	orrs	r3, r2
 8010a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8010a8e:	4a12      	ldr	r2, [pc, #72]	; (8010ad8 <HAL_GPIO_Init+0x310>)
 8010a90:	693b      	ldr	r3, [r7, #16]
 8010a92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8010a94:	697b      	ldr	r3, [r7, #20]
 8010a96:	3301      	adds	r3, #1
 8010a98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	681a      	ldr	r2, [r3, #0]
 8010a9e:	697b      	ldr	r3, [r7, #20]
 8010aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	f47f ae97 	bne.w	80107d8 <HAL_GPIO_Init+0x10>
  }
}
 8010aaa:	bf00      	nop
 8010aac:	bf00      	nop
 8010aae:	371c      	adds	r7, #28
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab6:	4770      	bx	lr
 8010ab8:	40021000 	.word	0x40021000
 8010abc:	40010000 	.word	0x40010000
 8010ac0:	48000400 	.word	0x48000400
 8010ac4:	48000800 	.word	0x48000800
 8010ac8:	48000c00 	.word	0x48000c00
 8010acc:	48001000 	.word	0x48001000
 8010ad0:	48001400 	.word	0x48001400
 8010ad4:	48001800 	.word	0x48001800
 8010ad8:	40010400 	.word	0x40010400

08010adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010adc:	b480      	push	{r7}
 8010ade:	b083      	sub	sp, #12
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
 8010ae4:	460b      	mov	r3, r1
 8010ae6:	807b      	strh	r3, [r7, #2]
 8010ae8:	4613      	mov	r3, r2
 8010aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010aec:	787b      	ldrb	r3, [r7, #1]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d003      	beq.n	8010afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8010af2:	887a      	ldrh	r2, [r7, #2]
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8010af8:	e002      	b.n	8010b00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8010afa:	887a      	ldrh	r2, [r7, #2]
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8010b00:	bf00      	nop
 8010b02:	370c      	adds	r7, #12
 8010b04:	46bd      	mov	sp, r7
 8010b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0a:	4770      	bx	lr

08010b0c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8010b0c:	b480      	push	{r7}
 8010b0e:	b085      	sub	sp, #20
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
 8010b14:	460b      	mov	r3, r1
 8010b16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	695b      	ldr	r3, [r3, #20]
 8010b1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8010b1e:	887a      	ldrh	r2, [r7, #2]
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	4013      	ands	r3, r2
 8010b24:	041a      	lsls	r2, r3, #16
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	43d9      	mvns	r1, r3
 8010b2a:	887b      	ldrh	r3, [r7, #2]
 8010b2c:	400b      	ands	r3, r1
 8010b2e:	431a      	orrs	r2, r3
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	619a      	str	r2, [r3, #24]
}
 8010b34:	bf00      	nop
 8010b36:	3714      	adds	r7, #20
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3e:	4770      	bx	lr

08010b40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b084      	sub	sp, #16
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d101      	bne.n	8010b52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8010b4e:	2301      	movs	r3, #1
 8010b50:	e0b9      	b.n	8010cc6 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8010b58:	b2db      	uxtb	r3, r3
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d106      	bne.n	8010b6c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2200      	movs	r2, #0
 8010b62:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f007 fd56 	bl	8018618 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2203      	movs	r2, #3
 8010b70:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f002 ffde 	bl	8013b3a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010b7e:	2300      	movs	r3, #0
 8010b80:	73fb      	strb	r3, [r7, #15]
 8010b82:	e03e      	b.n	8010c02 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8010b84:	7bfa      	ldrb	r2, [r7, #15]
 8010b86:	6879      	ldr	r1, [r7, #4]
 8010b88:	4613      	mov	r3, r2
 8010b8a:	009b      	lsls	r3, r3, #2
 8010b8c:	4413      	add	r3, r2
 8010b8e:	00db      	lsls	r3, r3, #3
 8010b90:	440b      	add	r3, r1
 8010b92:	3311      	adds	r3, #17
 8010b94:	2201      	movs	r2, #1
 8010b96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8010b98:	7bfa      	ldrb	r2, [r7, #15]
 8010b9a:	6879      	ldr	r1, [r7, #4]
 8010b9c:	4613      	mov	r3, r2
 8010b9e:	009b      	lsls	r3, r3, #2
 8010ba0:	4413      	add	r3, r2
 8010ba2:	00db      	lsls	r3, r3, #3
 8010ba4:	440b      	add	r3, r1
 8010ba6:	3310      	adds	r3, #16
 8010ba8:	7bfa      	ldrb	r2, [r7, #15]
 8010baa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8010bac:	7bfa      	ldrb	r2, [r7, #15]
 8010bae:	6879      	ldr	r1, [r7, #4]
 8010bb0:	4613      	mov	r3, r2
 8010bb2:	009b      	lsls	r3, r3, #2
 8010bb4:	4413      	add	r3, r2
 8010bb6:	00db      	lsls	r3, r3, #3
 8010bb8:	440b      	add	r3, r1
 8010bba:	3313      	adds	r3, #19
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8010bc0:	7bfa      	ldrb	r2, [r7, #15]
 8010bc2:	6879      	ldr	r1, [r7, #4]
 8010bc4:	4613      	mov	r3, r2
 8010bc6:	009b      	lsls	r3, r3, #2
 8010bc8:	4413      	add	r3, r2
 8010bca:	00db      	lsls	r3, r3, #3
 8010bcc:	440b      	add	r3, r1
 8010bce:	3320      	adds	r3, #32
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8010bd4:	7bfa      	ldrb	r2, [r7, #15]
 8010bd6:	6879      	ldr	r1, [r7, #4]
 8010bd8:	4613      	mov	r3, r2
 8010bda:	009b      	lsls	r3, r3, #2
 8010bdc:	4413      	add	r3, r2
 8010bde:	00db      	lsls	r3, r3, #3
 8010be0:	440b      	add	r3, r1
 8010be2:	3324      	adds	r3, #36	; 0x24
 8010be4:	2200      	movs	r2, #0
 8010be6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8010be8:	7bfb      	ldrb	r3, [r7, #15]
 8010bea:	6879      	ldr	r1, [r7, #4]
 8010bec:	1c5a      	adds	r2, r3, #1
 8010bee:	4613      	mov	r3, r2
 8010bf0:	009b      	lsls	r3, r3, #2
 8010bf2:	4413      	add	r3, r2
 8010bf4:	00db      	lsls	r3, r3, #3
 8010bf6:	440b      	add	r3, r1
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010bfc:	7bfb      	ldrb	r3, [r7, #15]
 8010bfe:	3301      	adds	r3, #1
 8010c00:	73fb      	strb	r3, [r7, #15]
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	791b      	ldrb	r3, [r3, #4]
 8010c06:	7bfa      	ldrb	r2, [r7, #15]
 8010c08:	429a      	cmp	r2, r3
 8010c0a:	d3bb      	bcc.n	8010b84 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	73fb      	strb	r3, [r7, #15]
 8010c10:	e044      	b.n	8010c9c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8010c12:	7bfa      	ldrb	r2, [r7, #15]
 8010c14:	6879      	ldr	r1, [r7, #4]
 8010c16:	4613      	mov	r3, r2
 8010c18:	009b      	lsls	r3, r3, #2
 8010c1a:	4413      	add	r3, r2
 8010c1c:	00db      	lsls	r3, r3, #3
 8010c1e:	440b      	add	r3, r1
 8010c20:	f203 1351 	addw	r3, r3, #337	; 0x151
 8010c24:	2200      	movs	r2, #0
 8010c26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8010c28:	7bfa      	ldrb	r2, [r7, #15]
 8010c2a:	6879      	ldr	r1, [r7, #4]
 8010c2c:	4613      	mov	r3, r2
 8010c2e:	009b      	lsls	r3, r3, #2
 8010c30:	4413      	add	r3, r2
 8010c32:	00db      	lsls	r3, r3, #3
 8010c34:	440b      	add	r3, r1
 8010c36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010c3a:	7bfa      	ldrb	r2, [r7, #15]
 8010c3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8010c3e:	7bfa      	ldrb	r2, [r7, #15]
 8010c40:	6879      	ldr	r1, [r7, #4]
 8010c42:	4613      	mov	r3, r2
 8010c44:	009b      	lsls	r3, r3, #2
 8010c46:	4413      	add	r3, r2
 8010c48:	00db      	lsls	r3, r3, #3
 8010c4a:	440b      	add	r3, r1
 8010c4c:	f203 1353 	addw	r3, r3, #339	; 0x153
 8010c50:	2200      	movs	r2, #0
 8010c52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8010c54:	7bfa      	ldrb	r2, [r7, #15]
 8010c56:	6879      	ldr	r1, [r7, #4]
 8010c58:	4613      	mov	r3, r2
 8010c5a:	009b      	lsls	r3, r3, #2
 8010c5c:	4413      	add	r3, r2
 8010c5e:	00db      	lsls	r3, r3, #3
 8010c60:	440b      	add	r3, r1
 8010c62:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8010c66:	2200      	movs	r2, #0
 8010c68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8010c6a:	7bfa      	ldrb	r2, [r7, #15]
 8010c6c:	6879      	ldr	r1, [r7, #4]
 8010c6e:	4613      	mov	r3, r2
 8010c70:	009b      	lsls	r3, r3, #2
 8010c72:	4413      	add	r3, r2
 8010c74:	00db      	lsls	r3, r3, #3
 8010c76:	440b      	add	r3, r1
 8010c78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8010c80:	7bfa      	ldrb	r2, [r7, #15]
 8010c82:	6879      	ldr	r1, [r7, #4]
 8010c84:	4613      	mov	r3, r2
 8010c86:	009b      	lsls	r3, r3, #2
 8010c88:	4413      	add	r3, r2
 8010c8a:	00db      	lsls	r3, r3, #3
 8010c8c:	440b      	add	r3, r1
 8010c8e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8010c92:	2200      	movs	r2, #0
 8010c94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010c96:	7bfb      	ldrb	r3, [r7, #15]
 8010c98:	3301      	adds	r3, #1
 8010c9a:	73fb      	strb	r3, [r7, #15]
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	791b      	ldrb	r3, [r3, #4]
 8010ca0:	7bfa      	ldrb	r2, [r7, #15]
 8010ca2:	429a      	cmp	r2, r3
 8010ca4:	d3b5      	bcc.n	8010c12 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	6818      	ldr	r0, [r3, #0]
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	3304      	adds	r3, #4
 8010cae:	e893 0006 	ldmia.w	r3, {r1, r2}
 8010cb2:	f002 ff5d 	bl	8013b70 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	2200      	movs	r2, #0
 8010cba:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2201      	movs	r2, #1
 8010cc0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  return HAL_OK;
 8010cc4:	2300      	movs	r3, #0
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3710      	adds	r7, #16
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}

08010cce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8010cce:	b580      	push	{r7, lr}
 8010cd0:	b082      	sub	sp, #8
 8010cd2:	af00      	add	r7, sp, #0
 8010cd4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8010cdc:	2b01      	cmp	r3, #1
 8010cde:	d101      	bne.n	8010ce4 <HAL_PCD_Start+0x16>
 8010ce0:	2302      	movs	r3, #2
 8010ce2:	e016      	b.n	8010d12 <HAL_PCD_Start+0x44>
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2201      	movs	r2, #1
 8010ce8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f002 ff0b 	bl	8013b0c <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8010cf6:	2101      	movs	r1, #1
 8010cf8:	6878      	ldr	r0, [r7, #4]
 8010cfa:	f007 ff1b 	bl	8018b34 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	4618      	mov	r0, r3
 8010d04:	f004 ff7a 	bl	8015bfc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8010d10:	2300      	movs	r3, #0
}
 8010d12:	4618      	mov	r0, r3
 8010d14:	3708      	adds	r7, #8
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd80      	pop	{r7, pc}

08010d1a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8010d1a:	b580      	push	{r7, lr}
 8010d1c:	b084      	sub	sp, #16
 8010d1e:	af00      	add	r7, sp, #0
 8010d20:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	4618      	mov	r0, r3
 8010d28:	f004 ff73 	bl	8015c12 <USB_ReadInterrupts>
 8010d2c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d003      	beq.n	8010d40 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8010d38:	6878      	ldr	r0, [r7, #4]
 8010d3a:	f000 fade 	bl	80112fa <PCD_EP_ISR_Handler>

    return;
 8010d3e:	e0bd      	b.n	8010ebc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d013      	beq.n	8010d72 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010d52:	b29a      	uxth	r2, r3
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010d5c:	b292      	uxth	r2, r2
 8010d5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8010d62:	6878      	ldr	r0, [r7, #4]
 8010d64:	f007 fcd3 	bl	801870e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8010d68:	2100      	movs	r1, #0
 8010d6a:	6878      	ldr	r0, [r7, #4]
 8010d6c:	f000 f8a9 	bl	8010ec2 <HAL_PCD_SetAddress>

    return;
 8010d70:	e0a4      	b.n	8010ebc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d00c      	beq.n	8010d96 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010d84:	b29a      	uxth	r2, r3
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010d8e:	b292      	uxth	r2, r2
 8010d90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8010d94:	e092      	b.n	8010ebc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d00c      	beq.n	8010dba <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010da8:	b29a      	uxth	r2, r3
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010db2:	b292      	uxth	r2, r2
 8010db4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8010db8:	e080      	b.n	8010ebc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d027      	beq.n	8010e14 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8010dcc:	b29a      	uxth	r2, r3
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	f022 0204 	bic.w	r2, r2, #4
 8010dd6:	b292      	uxth	r2, r2
 8010dd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8010de4:	b29a      	uxth	r2, r3
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	f022 0208 	bic.w	r2, r2, #8
 8010dee:	b292      	uxth	r2, r2
 8010df0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8010df4:	6878      	ldr	r0, [r7, #4]
 8010df6:	f007 fcc3 	bl	8018780 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010e02:	b29a      	uxth	r2, r3
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010e0c:	b292      	uxth	r2, r2
 8010e0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8010e12:	e053      	b.n	8010ebc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d027      	beq.n	8010e6e <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8010e26:	b29a      	uxth	r2, r3
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	f042 0208 	orr.w	r2, r2, #8
 8010e30:	b292      	uxth	r2, r2
 8010e32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010e3e:	b29a      	uxth	r2, r3
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010e48:	b292      	uxth	r2, r2
 8010e4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8010e56:	b29a      	uxth	r2, r3
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	f042 0204 	orr.w	r2, r2, #4
 8010e60:	b292      	uxth	r2, r2
 8010e62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8010e66:	6878      	ldr	r0, [r7, #4]
 8010e68:	f007 fc70 	bl	801874c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8010e6c:	e026      	b.n	8010ebc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d00f      	beq.n	8010e98 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010e80:	b29a      	uxth	r2, r3
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8010e8a:	b292      	uxth	r2, r2
 8010e8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f007 fc2e 	bl	80186f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8010e96:	e011      	b.n	8010ebc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d00c      	beq.n	8010ebc <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010eaa:	b29a      	uxth	r2, r3
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010eb4:	b292      	uxth	r2, r2
 8010eb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8010eba:	bf00      	nop
  }
}
 8010ebc:	3710      	adds	r7, #16
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd80      	pop	{r7, pc}

08010ec2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8010ec2:	b580      	push	{r7, lr}
 8010ec4:	b082      	sub	sp, #8
 8010ec6:	af00      	add	r7, sp, #0
 8010ec8:	6078      	str	r0, [r7, #4]
 8010eca:	460b      	mov	r3, r1
 8010ecc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8010ed4:	2b01      	cmp	r3, #1
 8010ed6:	d101      	bne.n	8010edc <HAL_PCD_SetAddress+0x1a>
 8010ed8:	2302      	movs	r3, #2
 8010eda:	e012      	b.n	8010f02 <HAL_PCD_SetAddress+0x40>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	2201      	movs	r2, #1
 8010ee0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	78fa      	ldrb	r2, [r7, #3]
 8010ee8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	78fa      	ldrb	r2, [r7, #3]
 8010ef0:	4611      	mov	r1, r2
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f004 fe6e 	bl	8015bd4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	2200      	movs	r2, #0
 8010efc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8010f00:	2300      	movs	r3, #0
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	3708      	adds	r7, #8
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}

08010f0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8010f0a:	b580      	push	{r7, lr}
 8010f0c:	b084      	sub	sp, #16
 8010f0e:	af00      	add	r7, sp, #0
 8010f10:	6078      	str	r0, [r7, #4]
 8010f12:	4608      	mov	r0, r1
 8010f14:	4611      	mov	r1, r2
 8010f16:	461a      	mov	r2, r3
 8010f18:	4603      	mov	r3, r0
 8010f1a:	70fb      	strb	r3, [r7, #3]
 8010f1c:	460b      	mov	r3, r1
 8010f1e:	803b      	strh	r3, [r7, #0]
 8010f20:	4613      	mov	r3, r2
 8010f22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8010f24:	2300      	movs	r3, #0
 8010f26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8010f28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	da0e      	bge.n	8010f4e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010f30:	78fb      	ldrb	r3, [r7, #3]
 8010f32:	f003 0207 	and.w	r2, r3, #7
 8010f36:	4613      	mov	r3, r2
 8010f38:	009b      	lsls	r3, r3, #2
 8010f3a:	4413      	add	r3, r2
 8010f3c:	00db      	lsls	r3, r3, #3
 8010f3e:	3310      	adds	r3, #16
 8010f40:	687a      	ldr	r2, [r7, #4]
 8010f42:	4413      	add	r3, r2
 8010f44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	2201      	movs	r2, #1
 8010f4a:	705a      	strb	r2, [r3, #1]
 8010f4c:	e00e      	b.n	8010f6c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010f4e:	78fb      	ldrb	r3, [r7, #3]
 8010f50:	f003 0207 	and.w	r2, r3, #7
 8010f54:	4613      	mov	r3, r2
 8010f56:	009b      	lsls	r3, r3, #2
 8010f58:	4413      	add	r3, r2
 8010f5a:	00db      	lsls	r3, r3, #3
 8010f5c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010f60:	687a      	ldr	r2, [r7, #4]
 8010f62:	4413      	add	r3, r2
 8010f64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	2200      	movs	r2, #0
 8010f6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8010f6c:	78fb      	ldrb	r3, [r7, #3]
 8010f6e:	f003 0307 	and.w	r3, r3, #7
 8010f72:	b2da      	uxtb	r2, r3
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8010f78:	883a      	ldrh	r2, [r7, #0]
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	78ba      	ldrb	r2, [r7, #2]
 8010f82:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8010f84:	78bb      	ldrb	r3, [r7, #2]
 8010f86:	2b02      	cmp	r3, #2
 8010f88:	d102      	bne.n	8010f90 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8010f96:	2b01      	cmp	r3, #1
 8010f98:	d101      	bne.n	8010f9e <HAL_PCD_EP_Open+0x94>
 8010f9a:	2302      	movs	r3, #2
 8010f9c:	e00e      	b.n	8010fbc <HAL_PCD_EP_Open+0xb2>
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	2201      	movs	r2, #1
 8010fa2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	68f9      	ldr	r1, [r7, #12]
 8010fac:	4618      	mov	r0, r3
 8010fae:	f002 fe15 	bl	8013bdc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8010fba:	7afb      	ldrb	r3, [r7, #11]
}
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	3710      	adds	r7, #16
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	bd80      	pop	{r7, pc}

08010fc4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b084      	sub	sp, #16
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
 8010fcc:	460b      	mov	r3, r1
 8010fce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8010fd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	da0e      	bge.n	8010ff6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010fd8:	78fb      	ldrb	r3, [r7, #3]
 8010fda:	f003 0207 	and.w	r2, r3, #7
 8010fde:	4613      	mov	r3, r2
 8010fe0:	009b      	lsls	r3, r3, #2
 8010fe2:	4413      	add	r3, r2
 8010fe4:	00db      	lsls	r3, r3, #3
 8010fe6:	3310      	adds	r3, #16
 8010fe8:	687a      	ldr	r2, [r7, #4]
 8010fea:	4413      	add	r3, r2
 8010fec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	2201      	movs	r2, #1
 8010ff2:	705a      	strb	r2, [r3, #1]
 8010ff4:	e00e      	b.n	8011014 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010ff6:	78fb      	ldrb	r3, [r7, #3]
 8010ff8:	f003 0207 	and.w	r2, r3, #7
 8010ffc:	4613      	mov	r3, r2
 8010ffe:	009b      	lsls	r3, r3, #2
 8011000:	4413      	add	r3, r2
 8011002:	00db      	lsls	r3, r3, #3
 8011004:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011008:	687a      	ldr	r2, [r7, #4]
 801100a:	4413      	add	r3, r2
 801100c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	2200      	movs	r2, #0
 8011012:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8011014:	78fb      	ldrb	r3, [r7, #3]
 8011016:	f003 0307 	and.w	r3, r3, #7
 801101a:	b2da      	uxtb	r2, r3
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8011026:	2b01      	cmp	r3, #1
 8011028:	d101      	bne.n	801102e <HAL_PCD_EP_Close+0x6a>
 801102a:	2302      	movs	r3, #2
 801102c:	e00e      	b.n	801104c <HAL_PCD_EP_Close+0x88>
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	2201      	movs	r2, #1
 8011032:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	68f9      	ldr	r1, [r7, #12]
 801103c:	4618      	mov	r0, r3
 801103e:	f003 f991 	bl	8014364 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2200      	movs	r2, #0
 8011046:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 801104a:	2300      	movs	r3, #0
}
 801104c:	4618      	mov	r0, r3
 801104e:	3710      	adds	r7, #16
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}

08011054 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b086      	sub	sp, #24
 8011058:	af00      	add	r7, sp, #0
 801105a:	60f8      	str	r0, [r7, #12]
 801105c:	607a      	str	r2, [r7, #4]
 801105e:	603b      	str	r3, [r7, #0]
 8011060:	460b      	mov	r3, r1
 8011062:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011064:	7afb      	ldrb	r3, [r7, #11]
 8011066:	f003 0207 	and.w	r2, r3, #7
 801106a:	4613      	mov	r3, r2
 801106c:	009b      	lsls	r3, r3, #2
 801106e:	4413      	add	r3, r2
 8011070:	00db      	lsls	r3, r3, #3
 8011072:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011076:	68fa      	ldr	r2, [r7, #12]
 8011078:	4413      	add	r3, r2
 801107a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801107c:	697b      	ldr	r3, [r7, #20]
 801107e:	687a      	ldr	r2, [r7, #4]
 8011080:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8011082:	697b      	ldr	r3, [r7, #20]
 8011084:	683a      	ldr	r2, [r7, #0]
 8011086:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8011088:	697b      	ldr	r3, [r7, #20]
 801108a:	2200      	movs	r2, #0
 801108c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 801108e:	697b      	ldr	r3, [r7, #20]
 8011090:	2200      	movs	r2, #0
 8011092:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8011094:	7afb      	ldrb	r3, [r7, #11]
 8011096:	f003 0307 	and.w	r3, r3, #7
 801109a:	b2da      	uxtb	r2, r3
 801109c:	697b      	ldr	r3, [r7, #20]
 801109e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	6979      	ldr	r1, [r7, #20]
 80110a6:	4618      	mov	r0, r3
 80110a8:	f003 fb49 	bl	801473e <USB_EPStartXfer>

  return HAL_OK;
 80110ac:	2300      	movs	r3, #0
}
 80110ae:	4618      	mov	r0, r3
 80110b0:	3718      	adds	r7, #24
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bd80      	pop	{r7, pc}

080110b6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80110b6:	b480      	push	{r7}
 80110b8:	b083      	sub	sp, #12
 80110ba:	af00      	add	r7, sp, #0
 80110bc:	6078      	str	r0, [r7, #4]
 80110be:	460b      	mov	r3, r1
 80110c0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80110c2:	78fb      	ldrb	r3, [r7, #3]
 80110c4:	f003 0207 	and.w	r2, r3, #7
 80110c8:	6879      	ldr	r1, [r7, #4]
 80110ca:	4613      	mov	r3, r2
 80110cc:	009b      	lsls	r3, r3, #2
 80110ce:	4413      	add	r3, r2
 80110d0:	00db      	lsls	r3, r3, #3
 80110d2:	440b      	add	r3, r1
 80110d4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80110d8:	681b      	ldr	r3, [r3, #0]
}
 80110da:	4618      	mov	r0, r3
 80110dc:	370c      	adds	r7, #12
 80110de:	46bd      	mov	sp, r7
 80110e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e4:	4770      	bx	lr

080110e6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80110e6:	b580      	push	{r7, lr}
 80110e8:	b086      	sub	sp, #24
 80110ea:	af00      	add	r7, sp, #0
 80110ec:	60f8      	str	r0, [r7, #12]
 80110ee:	607a      	str	r2, [r7, #4]
 80110f0:	603b      	str	r3, [r7, #0]
 80110f2:	460b      	mov	r3, r1
 80110f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80110f6:	7afb      	ldrb	r3, [r7, #11]
 80110f8:	f003 0207 	and.w	r2, r3, #7
 80110fc:	4613      	mov	r3, r2
 80110fe:	009b      	lsls	r3, r3, #2
 8011100:	4413      	add	r3, r2
 8011102:	00db      	lsls	r3, r3, #3
 8011104:	3310      	adds	r3, #16
 8011106:	68fa      	ldr	r2, [r7, #12]
 8011108:	4413      	add	r3, r2
 801110a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801110c:	697b      	ldr	r3, [r7, #20]
 801110e:	687a      	ldr	r2, [r7, #4]
 8011110:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8011112:	697b      	ldr	r3, [r7, #20]
 8011114:	683a      	ldr	r2, [r7, #0]
 8011116:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8011118:	697b      	ldr	r3, [r7, #20]
 801111a:	2201      	movs	r2, #1
 801111c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8011120:	697b      	ldr	r3, [r7, #20]
 8011122:	683a      	ldr	r2, [r7, #0]
 8011124:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	2200      	movs	r2, #0
 801112a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 801112c:	697b      	ldr	r3, [r7, #20]
 801112e:	2201      	movs	r2, #1
 8011130:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8011132:	7afb      	ldrb	r3, [r7, #11]
 8011134:	f003 0307 	and.w	r3, r3, #7
 8011138:	b2da      	uxtb	r2, r3
 801113a:	697b      	ldr	r3, [r7, #20]
 801113c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	6979      	ldr	r1, [r7, #20]
 8011144:	4618      	mov	r0, r3
 8011146:	f003 fafa 	bl	801473e <USB_EPStartXfer>

  return HAL_OK;
 801114a:	2300      	movs	r3, #0
}
 801114c:	4618      	mov	r0, r3
 801114e:	3718      	adds	r7, #24
 8011150:	46bd      	mov	sp, r7
 8011152:	bd80      	pop	{r7, pc}

08011154 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b084      	sub	sp, #16
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
 801115c:	460b      	mov	r3, r1
 801115e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8011160:	78fb      	ldrb	r3, [r7, #3]
 8011162:	f003 0307 	and.w	r3, r3, #7
 8011166:	687a      	ldr	r2, [r7, #4]
 8011168:	7912      	ldrb	r2, [r2, #4]
 801116a:	4293      	cmp	r3, r2
 801116c:	d901      	bls.n	8011172 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 801116e:	2301      	movs	r3, #1
 8011170:	e03e      	b.n	80111f0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8011172:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011176:	2b00      	cmp	r3, #0
 8011178:	da0e      	bge.n	8011198 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801117a:	78fb      	ldrb	r3, [r7, #3]
 801117c:	f003 0207 	and.w	r2, r3, #7
 8011180:	4613      	mov	r3, r2
 8011182:	009b      	lsls	r3, r3, #2
 8011184:	4413      	add	r3, r2
 8011186:	00db      	lsls	r3, r3, #3
 8011188:	3310      	adds	r3, #16
 801118a:	687a      	ldr	r2, [r7, #4]
 801118c:	4413      	add	r3, r2
 801118e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	2201      	movs	r2, #1
 8011194:	705a      	strb	r2, [r3, #1]
 8011196:	e00c      	b.n	80111b2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8011198:	78fa      	ldrb	r2, [r7, #3]
 801119a:	4613      	mov	r3, r2
 801119c:	009b      	lsls	r3, r3, #2
 801119e:	4413      	add	r3, r2
 80111a0:	00db      	lsls	r3, r3, #3
 80111a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80111a6:	687a      	ldr	r2, [r7, #4]
 80111a8:	4413      	add	r3, r2
 80111aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	2200      	movs	r2, #0
 80111b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	2201      	movs	r2, #1
 80111b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80111b8:	78fb      	ldrb	r3, [r7, #3]
 80111ba:	f003 0307 	and.w	r3, r3, #7
 80111be:	b2da      	uxtb	r2, r3
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80111ca:	2b01      	cmp	r3, #1
 80111cc:	d101      	bne.n	80111d2 <HAL_PCD_EP_SetStall+0x7e>
 80111ce:	2302      	movs	r3, #2
 80111d0:	e00e      	b.n	80111f0 <HAL_PCD_EP_SetStall+0x9c>
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	2201      	movs	r2, #1
 80111d6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	68f9      	ldr	r1, [r7, #12]
 80111e0:	4618      	mov	r0, r3
 80111e2:	f004 fbf8 	bl	80159d6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	2200      	movs	r2, #0
 80111ea:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80111ee:	2300      	movs	r3, #0
}
 80111f0:	4618      	mov	r0, r3
 80111f2:	3710      	adds	r7, #16
 80111f4:	46bd      	mov	sp, r7
 80111f6:	bd80      	pop	{r7, pc}

080111f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b084      	sub	sp, #16
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
 8011200:	460b      	mov	r3, r1
 8011202:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8011204:	78fb      	ldrb	r3, [r7, #3]
 8011206:	f003 030f 	and.w	r3, r3, #15
 801120a:	687a      	ldr	r2, [r7, #4]
 801120c:	7912      	ldrb	r2, [r2, #4]
 801120e:	4293      	cmp	r3, r2
 8011210:	d901      	bls.n	8011216 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8011212:	2301      	movs	r3, #1
 8011214:	e040      	b.n	8011298 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8011216:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801121a:	2b00      	cmp	r3, #0
 801121c:	da0e      	bge.n	801123c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801121e:	78fb      	ldrb	r3, [r7, #3]
 8011220:	f003 0207 	and.w	r2, r3, #7
 8011224:	4613      	mov	r3, r2
 8011226:	009b      	lsls	r3, r3, #2
 8011228:	4413      	add	r3, r2
 801122a:	00db      	lsls	r3, r3, #3
 801122c:	3310      	adds	r3, #16
 801122e:	687a      	ldr	r2, [r7, #4]
 8011230:	4413      	add	r3, r2
 8011232:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	2201      	movs	r2, #1
 8011238:	705a      	strb	r2, [r3, #1]
 801123a:	e00e      	b.n	801125a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801123c:	78fb      	ldrb	r3, [r7, #3]
 801123e:	f003 0207 	and.w	r2, r3, #7
 8011242:	4613      	mov	r3, r2
 8011244:	009b      	lsls	r3, r3, #2
 8011246:	4413      	add	r3, r2
 8011248:	00db      	lsls	r3, r3, #3
 801124a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801124e:	687a      	ldr	r2, [r7, #4]
 8011250:	4413      	add	r3, r2
 8011252:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	2200      	movs	r2, #0
 8011258:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	2200      	movs	r2, #0
 801125e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8011260:	78fb      	ldrb	r3, [r7, #3]
 8011262:	f003 0307 	and.w	r3, r3, #7
 8011266:	b2da      	uxtb	r2, r3
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8011272:	2b01      	cmp	r3, #1
 8011274:	d101      	bne.n	801127a <HAL_PCD_EP_ClrStall+0x82>
 8011276:	2302      	movs	r3, #2
 8011278:	e00e      	b.n	8011298 <HAL_PCD_EP_ClrStall+0xa0>
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	2201      	movs	r2, #1
 801127e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	68f9      	ldr	r1, [r7, #12]
 8011288:	4618      	mov	r0, r3
 801128a:	f004 fbf5 	bl	8015a78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	2200      	movs	r2, #0
 8011292:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8011296:	2300      	movs	r3, #0
}
 8011298:	4618      	mov	r0, r3
 801129a:	3710      	adds	r7, #16
 801129c:	46bd      	mov	sp, r7
 801129e:	bd80      	pop	{r7, pc}

080112a0 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b082      	sub	sp, #8
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
 80112a8:	460b      	mov	r3, r1
 80112aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80112b2:	2b01      	cmp	r3, #1
 80112b4:	d101      	bne.n	80112ba <HAL_PCD_EP_Flush+0x1a>
 80112b6:	2302      	movs	r3, #2
 80112b8:	e01b      	b.n	80112f2 <HAL_PCD_EP_Flush+0x52>
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	2201      	movs	r2, #1
 80112be:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  if ((ep_addr & 0x80U) == 0x80U)
 80112c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	da09      	bge.n	80112de <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	681a      	ldr	r2, [r3, #0]
 80112ce:	78fb      	ldrb	r3, [r7, #3]
 80112d0:	f003 0307 	and.w	r3, r3, #7
 80112d4:	4619      	mov	r1, r3
 80112d6:	4610      	mov	r0, r2
 80112d8:	f002 fc68 	bl	8013bac <USB_FlushTxFifo>
 80112dc:	e004      	b.n	80112e8 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	4618      	mov	r0, r3
 80112e4:	f002 fc6e 	bl	8013bc4 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	2200      	movs	r2, #0
 80112ec:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80112f0:	2300      	movs	r3, #0
}
 80112f2:	4618      	mov	r0, r3
 80112f4:	3708      	adds	r7, #8
 80112f6:	46bd      	mov	sp, r7
 80112f8:	bd80      	pop	{r7, pc}

080112fa <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80112fa:	b580      	push	{r7, lr}
 80112fc:	b096      	sub	sp, #88	; 0x58
 80112fe:	af00      	add	r7, sp, #0
 8011300:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8011302:	e3ae      	b.n	8011a62 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801130c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8011310:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8011314:	b2db      	uxtb	r3, r3
 8011316:	f003 030f 	and.w	r3, r3, #15
 801131a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    if (epindex == 0U)
 801131e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011322:	2b00      	cmp	r3, #0
 8011324:	f040 8170 	bne.w	8011608 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8011328:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801132c:	f003 0310 	and.w	r3, r3, #16
 8011330:	2b00      	cmp	r3, #0
 8011332:	d14d      	bne.n	80113d0 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	881b      	ldrh	r3, [r3, #0]
 801133a:	b29b      	uxth	r3, r3
 801133c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8011340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011344:	81fb      	strh	r3, [r7, #14]
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	681a      	ldr	r2, [r3, #0]
 801134a:	89fb      	ldrh	r3, [r7, #14]
 801134c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011354:	b29b      	uxth	r3, r3
 8011356:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	3310      	adds	r3, #16
 801135c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011366:	b29b      	uxth	r3, r3
 8011368:	461a      	mov	r2, r3
 801136a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801136c:	781b      	ldrb	r3, [r3, #0]
 801136e:	00db      	lsls	r3, r3, #3
 8011370:	4413      	add	r3, r2
 8011372:	687a      	ldr	r2, [r7, #4]
 8011374:	6812      	ldr	r2, [r2, #0]
 8011376:	4413      	add	r3, r2
 8011378:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801137c:	881b      	ldrh	r3, [r3, #0]
 801137e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8011382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011384:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8011386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011388:	695a      	ldr	r2, [r3, #20]
 801138a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801138c:	69db      	ldr	r3, [r3, #28]
 801138e:	441a      	add	r2, r3
 8011390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011392:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8011394:	2100      	movs	r1, #0
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	f007 f991 	bl	80186be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	7b1b      	ldrb	r3, [r3, #12]
 80113a0:	b2db      	uxtb	r3, r3
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	f000 835d 	beq.w	8011a62 <PCD_EP_ISR_Handler+0x768>
 80113a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113aa:	699b      	ldr	r3, [r3, #24]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	f040 8358 	bne.w	8011a62 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	7b1b      	ldrb	r3, [r3, #12]
 80113b6:	b2db      	uxtb	r3, r3
 80113b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80113bc:	b2da      	uxtb	r2, r3
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	b292      	uxth	r2, r2
 80113c4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	2200      	movs	r2, #0
 80113cc:	731a      	strb	r2, [r3, #12]
 80113ce:	e348      	b.n	8011a62 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80113d6:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	881b      	ldrh	r3, [r3, #0]
 80113de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80113e2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80113e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d032      	beq.n	8011454 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80113f6:	b29b      	uxth	r3, r3
 80113f8:	461a      	mov	r2, r3
 80113fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113fc:	781b      	ldrb	r3, [r3, #0]
 80113fe:	00db      	lsls	r3, r3, #3
 8011400:	4413      	add	r3, r2
 8011402:	687a      	ldr	r2, [r7, #4]
 8011404:	6812      	ldr	r2, [r2, #0]
 8011406:	4413      	add	r3, r2
 8011408:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801140c:	881b      	ldrh	r3, [r3, #0]
 801140e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8011412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011414:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6818      	ldr	r0, [r3, #0]
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8011420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011422:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8011424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011426:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8011428:	b29b      	uxth	r3, r3
 801142a:	f004 fc44 	bl	8015cb6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	881b      	ldrh	r3, [r3, #0]
 8011434:	b29a      	uxth	r2, r3
 8011436:	f640 738f 	movw	r3, #3983	; 0xf8f
 801143a:	4013      	ands	r3, r2
 801143c:	823b      	strh	r3, [r7, #16]
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	8a3a      	ldrh	r2, [r7, #16]
 8011444:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011448:	b292      	uxth	r2, r2
 801144a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 801144c:	6878      	ldr	r0, [r7, #4]
 801144e:	f007 f909 	bl	8018664 <HAL_PCD_SetupStageCallback>
 8011452:	e306      	b.n	8011a62 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8011454:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8011458:	2b00      	cmp	r3, #0
 801145a:	f280 8302 	bge.w	8011a62 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	881b      	ldrh	r3, [r3, #0]
 8011464:	b29a      	uxth	r2, r3
 8011466:	f640 738f 	movw	r3, #3983	; 0xf8f
 801146a:	4013      	ands	r3, r2
 801146c:	83fb      	strh	r3, [r7, #30]
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	8bfa      	ldrh	r2, [r7, #30]
 8011474:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011478:	b292      	uxth	r2, r2
 801147a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011484:	b29b      	uxth	r3, r3
 8011486:	461a      	mov	r2, r3
 8011488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801148a:	781b      	ldrb	r3, [r3, #0]
 801148c:	00db      	lsls	r3, r3, #3
 801148e:	4413      	add	r3, r2
 8011490:	687a      	ldr	r2, [r7, #4]
 8011492:	6812      	ldr	r2, [r2, #0]
 8011494:	4413      	add	r3, r2
 8011496:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801149a:	881b      	ldrh	r3, [r3, #0]
 801149c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80114a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114a2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80114a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114a6:	69db      	ldr	r3, [r3, #28]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d019      	beq.n	80114e0 <PCD_EP_ISR_Handler+0x1e6>
 80114ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114ae:	695b      	ldr	r3, [r3, #20]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d015      	beq.n	80114e0 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	6818      	ldr	r0, [r3, #0]
 80114b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114ba:	6959      	ldr	r1, [r3, #20]
 80114bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114be:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80114c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114c2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80114c4:	b29b      	uxth	r3, r3
 80114c6:	f004 fbf6 	bl	8015cb6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80114ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114cc:	695a      	ldr	r2, [r3, #20]
 80114ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114d0:	69db      	ldr	r3, [r3, #28]
 80114d2:	441a      	add	r2, r3
 80114d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114d6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80114d8:	2100      	movs	r1, #0
 80114da:	6878      	ldr	r0, [r7, #4]
 80114dc:	f007 f8d4 	bl	8018688 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	881b      	ldrh	r3, [r3, #0]
 80114e6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80114ea:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80114ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	f040 82b5 	bne.w	8011a62 <PCD_EP_ISR_Handler+0x768>
 80114f8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80114fc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8011500:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011504:	f000 82ad 	beq.w	8011a62 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	61bb      	str	r3, [r7, #24]
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011516:	b29b      	uxth	r3, r3
 8011518:	461a      	mov	r2, r3
 801151a:	69bb      	ldr	r3, [r7, #24]
 801151c:	4413      	add	r3, r2
 801151e:	61bb      	str	r3, [r7, #24]
 8011520:	69bb      	ldr	r3, [r7, #24]
 8011522:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011526:	617b      	str	r3, [r7, #20]
 8011528:	697b      	ldr	r3, [r7, #20]
 801152a:	881b      	ldrh	r3, [r3, #0]
 801152c:	b29b      	uxth	r3, r3
 801152e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011532:	b29a      	uxth	r2, r3
 8011534:	697b      	ldr	r3, [r7, #20]
 8011536:	801a      	strh	r2, [r3, #0]
 8011538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801153a:	691b      	ldr	r3, [r3, #16]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d10a      	bne.n	8011556 <PCD_EP_ISR_Handler+0x25c>
 8011540:	697b      	ldr	r3, [r7, #20]
 8011542:	881b      	ldrh	r3, [r3, #0]
 8011544:	b29b      	uxth	r3, r3
 8011546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801154a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801154e:	b29a      	uxth	r2, r3
 8011550:	697b      	ldr	r3, [r7, #20]
 8011552:	801a      	strh	r2, [r3, #0]
 8011554:	e039      	b.n	80115ca <PCD_EP_ISR_Handler+0x2d0>
 8011556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011558:	691b      	ldr	r3, [r3, #16]
 801155a:	2b3e      	cmp	r3, #62	; 0x3e
 801155c:	d818      	bhi.n	8011590 <PCD_EP_ISR_Handler+0x296>
 801155e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011560:	691b      	ldr	r3, [r3, #16]
 8011562:	085b      	lsrs	r3, r3, #1
 8011564:	647b      	str	r3, [r7, #68]	; 0x44
 8011566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011568:	691b      	ldr	r3, [r3, #16]
 801156a:	f003 0301 	and.w	r3, r3, #1
 801156e:	2b00      	cmp	r3, #0
 8011570:	d002      	beq.n	8011578 <PCD_EP_ISR_Handler+0x27e>
 8011572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011574:	3301      	adds	r3, #1
 8011576:	647b      	str	r3, [r7, #68]	; 0x44
 8011578:	697b      	ldr	r3, [r7, #20]
 801157a:	881b      	ldrh	r3, [r3, #0]
 801157c:	b29a      	uxth	r2, r3
 801157e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011580:	b29b      	uxth	r3, r3
 8011582:	029b      	lsls	r3, r3, #10
 8011584:	b29b      	uxth	r3, r3
 8011586:	4313      	orrs	r3, r2
 8011588:	b29a      	uxth	r2, r3
 801158a:	697b      	ldr	r3, [r7, #20]
 801158c:	801a      	strh	r2, [r3, #0]
 801158e:	e01c      	b.n	80115ca <PCD_EP_ISR_Handler+0x2d0>
 8011590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011592:	691b      	ldr	r3, [r3, #16]
 8011594:	095b      	lsrs	r3, r3, #5
 8011596:	647b      	str	r3, [r7, #68]	; 0x44
 8011598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801159a:	691b      	ldr	r3, [r3, #16]
 801159c:	f003 031f 	and.w	r3, r3, #31
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d102      	bne.n	80115aa <PCD_EP_ISR_Handler+0x2b0>
 80115a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115a6:	3b01      	subs	r3, #1
 80115a8:	647b      	str	r3, [r7, #68]	; 0x44
 80115aa:	697b      	ldr	r3, [r7, #20]
 80115ac:	881b      	ldrh	r3, [r3, #0]
 80115ae:	b29a      	uxth	r2, r3
 80115b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115b2:	b29b      	uxth	r3, r3
 80115b4:	029b      	lsls	r3, r3, #10
 80115b6:	b29b      	uxth	r3, r3
 80115b8:	4313      	orrs	r3, r2
 80115ba:	b29b      	uxth	r3, r3
 80115bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80115c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80115c4:	b29a      	uxth	r2, r3
 80115c6:	697b      	ldr	r3, [r7, #20]
 80115c8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	881b      	ldrh	r3, [r3, #0]
 80115d0:	b29b      	uxth	r3, r3
 80115d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80115d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80115da:	827b      	strh	r3, [r7, #18]
 80115dc:	8a7b      	ldrh	r3, [r7, #18]
 80115de:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80115e2:	827b      	strh	r3, [r7, #18]
 80115e4:	8a7b      	ldrh	r3, [r7, #18]
 80115e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80115ea:	827b      	strh	r3, [r7, #18]
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	681a      	ldr	r2, [r3, #0]
 80115f0:	8a7b      	ldrh	r3, [r7, #18]
 80115f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80115f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80115fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80115fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011602:	b29b      	uxth	r3, r3
 8011604:	8013      	strh	r3, [r2, #0]
 8011606:	e22c      	b.n	8011a62 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	461a      	mov	r2, r3
 801160e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011612:	009b      	lsls	r3, r3, #2
 8011614:	4413      	add	r3, r2
 8011616:	881b      	ldrh	r3, [r3, #0]
 8011618:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801161c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8011620:	2b00      	cmp	r3, #0
 8011622:	f280 80f6 	bge.w	8011812 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	461a      	mov	r2, r3
 801162c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011630:	009b      	lsls	r3, r3, #2
 8011632:	4413      	add	r3, r2
 8011634:	881b      	ldrh	r3, [r3, #0]
 8011636:	b29a      	uxth	r2, r3
 8011638:	f640 738f 	movw	r3, #3983	; 0xf8f
 801163c:	4013      	ands	r3, r2
 801163e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	461a      	mov	r2, r3
 8011648:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801164c:	009b      	lsls	r3, r3, #2
 801164e:	4413      	add	r3, r2
 8011650:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8011654:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011658:	b292      	uxth	r2, r2
 801165a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 801165c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8011660:	4613      	mov	r3, r2
 8011662:	009b      	lsls	r3, r3, #2
 8011664:	4413      	add	r3, r2
 8011666:	00db      	lsls	r3, r3, #3
 8011668:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801166c:	687a      	ldr	r2, [r7, #4]
 801166e:	4413      	add	r3, r2
 8011670:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8011672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011674:	7b1b      	ldrb	r3, [r3, #12]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d123      	bne.n	80116c2 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011682:	b29b      	uxth	r3, r3
 8011684:	461a      	mov	r2, r3
 8011686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011688:	781b      	ldrb	r3, [r3, #0]
 801168a:	00db      	lsls	r3, r3, #3
 801168c:	4413      	add	r3, r2
 801168e:	687a      	ldr	r2, [r7, #4]
 8011690:	6812      	ldr	r2, [r2, #0]
 8011692:	4413      	add	r3, r2
 8011694:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011698:	881b      	ldrh	r3, [r3, #0]
 801169a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801169e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80116a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	f000 808e 	beq.w	80117c8 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	6818      	ldr	r0, [r3, #0]
 80116b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116b2:	6959      	ldr	r1, [r3, #20]
 80116b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116b6:	88da      	ldrh	r2, [r3, #6]
 80116b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80116bc:	f004 fafb 	bl	8015cb6 <USB_ReadPMA>
 80116c0:	e082      	b.n	80117c8 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80116c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116c4:	78db      	ldrb	r3, [r3, #3]
 80116c6:	2b02      	cmp	r3, #2
 80116c8:	d10a      	bne.n	80116e0 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80116ca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80116ce:	461a      	mov	r2, r3
 80116d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80116d2:	6878      	ldr	r0, [r7, #4]
 80116d4:	f000 f9d3 	bl	8011a7e <HAL_PCD_EP_DB_Receive>
 80116d8:	4603      	mov	r3, r0
 80116da:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80116de:	e073      	b.n	80117c8 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	461a      	mov	r2, r3
 80116e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116e8:	781b      	ldrb	r3, [r3, #0]
 80116ea:	009b      	lsls	r3, r3, #2
 80116ec:	4413      	add	r3, r2
 80116ee:	881b      	ldrh	r3, [r3, #0]
 80116f0:	b29b      	uxth	r3, r3
 80116f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80116f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80116fa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	461a      	mov	r2, r3
 8011704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011706:	781b      	ldrb	r3, [r3, #0]
 8011708:	009b      	lsls	r3, r3, #2
 801170a:	441a      	add	r2, r3
 801170c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8011710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801171c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011720:	b29b      	uxth	r3, r3
 8011722:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	461a      	mov	r2, r3
 801172a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801172c:	781b      	ldrb	r3, [r3, #0]
 801172e:	009b      	lsls	r3, r3, #2
 8011730:	4413      	add	r3, r2
 8011732:	881b      	ldrh	r3, [r3, #0]
 8011734:	b29b      	uxth	r3, r3
 8011736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801173a:	2b00      	cmp	r3, #0
 801173c:	d022      	beq.n	8011784 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011746:	b29b      	uxth	r3, r3
 8011748:	461a      	mov	r2, r3
 801174a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801174c:	781b      	ldrb	r3, [r3, #0]
 801174e:	00db      	lsls	r3, r3, #3
 8011750:	4413      	add	r3, r2
 8011752:	687a      	ldr	r2, [r7, #4]
 8011754:	6812      	ldr	r2, [r2, #0]
 8011756:	4413      	add	r3, r2
 8011758:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801175c:	881b      	ldrh	r3, [r3, #0]
 801175e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011762:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8011766:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801176a:	2b00      	cmp	r3, #0
 801176c:	d02c      	beq.n	80117c8 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	6818      	ldr	r0, [r3, #0]
 8011772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011774:	6959      	ldr	r1, [r3, #20]
 8011776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011778:	891a      	ldrh	r2, [r3, #8]
 801177a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801177e:	f004 fa9a 	bl	8015cb6 <USB_ReadPMA>
 8011782:	e021      	b.n	80117c8 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801178c:	b29b      	uxth	r3, r3
 801178e:	461a      	mov	r2, r3
 8011790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011792:	781b      	ldrb	r3, [r3, #0]
 8011794:	00db      	lsls	r3, r3, #3
 8011796:	4413      	add	r3, r2
 8011798:	687a      	ldr	r2, [r7, #4]
 801179a:	6812      	ldr	r2, [r2, #0]
 801179c:	4413      	add	r3, r2
 801179e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80117a2:	881b      	ldrh	r3, [r3, #0]
 80117a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80117a8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80117ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d009      	beq.n	80117c8 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	6818      	ldr	r0, [r3, #0]
 80117b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117ba:	6959      	ldr	r1, [r3, #20]
 80117bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117be:	895a      	ldrh	r2, [r3, #10]
 80117c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80117c4:	f004 fa77 	bl	8015cb6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80117c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117ca:	69da      	ldr	r2, [r3, #28]
 80117cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80117d0:	441a      	add	r2, r3
 80117d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80117d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117d8:	695a      	ldr	r2, [r3, #20]
 80117da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80117de:	441a      	add	r2, r3
 80117e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117e2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80117e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117e6:	699b      	ldr	r3, [r3, #24]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d005      	beq.n	80117f8 <PCD_EP_ISR_Handler+0x4fe>
 80117ec:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80117f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117f2:	691b      	ldr	r3, [r3, #16]
 80117f4:	429a      	cmp	r2, r3
 80117f6:	d206      	bcs.n	8011806 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80117f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117fa:	781b      	ldrb	r3, [r3, #0]
 80117fc:	4619      	mov	r1, r3
 80117fe:	6878      	ldr	r0, [r7, #4]
 8011800:	f006 ff42 	bl	8018688 <HAL_PCD_DataOutStageCallback>
 8011804:	e005      	b.n	8011812 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801180c:	4618      	mov	r0, r3
 801180e:	f002 ff96 	bl	801473e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8011812:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8011816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801181a:	2b00      	cmp	r3, #0
 801181c:	f000 8121 	beq.w	8011a62 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8011820:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8011824:	4613      	mov	r3, r2
 8011826:	009b      	lsls	r3, r3, #2
 8011828:	4413      	add	r3, r2
 801182a:	00db      	lsls	r3, r3, #3
 801182c:	3310      	adds	r3, #16
 801182e:	687a      	ldr	r2, [r7, #4]
 8011830:	4413      	add	r3, r2
 8011832:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	461a      	mov	r2, r3
 801183a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801183e:	009b      	lsls	r3, r3, #2
 8011840:	4413      	add	r3, r2
 8011842:	881b      	ldrh	r3, [r3, #0]
 8011844:	b29b      	uxth	r3, r3
 8011846:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 801184a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801184e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	461a      	mov	r2, r3
 8011858:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801185c:	009b      	lsls	r3, r3, #2
 801185e:	441a      	add	r2, r3
 8011860:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801186c:	b29b      	uxth	r3, r3
 801186e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8011870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011872:	78db      	ldrb	r3, [r3, #3]
 8011874:	2b01      	cmp	r3, #1
 8011876:	f040 80a2 	bne.w	80119be <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 801187a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801187c:	2200      	movs	r2, #0
 801187e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8011880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011882:	7b1b      	ldrb	r3, [r3, #12]
 8011884:	2b00      	cmp	r3, #0
 8011886:	f000 8093 	beq.w	80119b0 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801188a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 801188e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011892:	2b00      	cmp	r3, #0
 8011894:	d046      	beq.n	8011924 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8011896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011898:	785b      	ldrb	r3, [r3, #1]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d126      	bne.n	80118ec <PCD_EP_ISR_Handler+0x5f2>
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	627b      	str	r3, [r7, #36]	; 0x24
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80118ac:	b29b      	uxth	r3, r3
 80118ae:	461a      	mov	r2, r3
 80118b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118b2:	4413      	add	r3, r2
 80118b4:	627b      	str	r3, [r7, #36]	; 0x24
 80118b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118b8:	781b      	ldrb	r3, [r3, #0]
 80118ba:	00da      	lsls	r2, r3, #3
 80118bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118be:	4413      	add	r3, r2
 80118c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80118c4:	623b      	str	r3, [r7, #32]
 80118c6:	6a3b      	ldr	r3, [r7, #32]
 80118c8:	881b      	ldrh	r3, [r3, #0]
 80118ca:	b29b      	uxth	r3, r3
 80118cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80118d0:	b29a      	uxth	r2, r3
 80118d2:	6a3b      	ldr	r3, [r7, #32]
 80118d4:	801a      	strh	r2, [r3, #0]
 80118d6:	6a3b      	ldr	r3, [r7, #32]
 80118d8:	881b      	ldrh	r3, [r3, #0]
 80118da:	b29b      	uxth	r3, r3
 80118dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80118e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80118e4:	b29a      	uxth	r2, r3
 80118e6:	6a3b      	ldr	r3, [r7, #32]
 80118e8:	801a      	strh	r2, [r3, #0]
 80118ea:	e061      	b.n	80119b0 <PCD_EP_ISR_Handler+0x6b6>
 80118ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118ee:	785b      	ldrb	r3, [r3, #1]
 80118f0:	2b01      	cmp	r3, #1
 80118f2:	d15d      	bne.n	80119b0 <PCD_EP_ISR_Handler+0x6b6>
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011902:	b29b      	uxth	r3, r3
 8011904:	461a      	mov	r2, r3
 8011906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011908:	4413      	add	r3, r2
 801190a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801190c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801190e:	781b      	ldrb	r3, [r3, #0]
 8011910:	00da      	lsls	r2, r3, #3
 8011912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011914:	4413      	add	r3, r2
 8011916:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801191a:	62bb      	str	r3, [r7, #40]	; 0x28
 801191c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801191e:	2200      	movs	r2, #0
 8011920:	801a      	strh	r2, [r3, #0]
 8011922:	e045      	b.n	80119b0 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	63fb      	str	r3, [r7, #60]	; 0x3c
 801192a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801192c:	785b      	ldrb	r3, [r3, #1]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d126      	bne.n	8011980 <PCD_EP_ISR_Handler+0x686>
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	637b      	str	r3, [r7, #52]	; 0x34
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011940:	b29b      	uxth	r3, r3
 8011942:	461a      	mov	r2, r3
 8011944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011946:	4413      	add	r3, r2
 8011948:	637b      	str	r3, [r7, #52]	; 0x34
 801194a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801194c:	781b      	ldrb	r3, [r3, #0]
 801194e:	00da      	lsls	r2, r3, #3
 8011950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011952:	4413      	add	r3, r2
 8011954:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011958:	633b      	str	r3, [r7, #48]	; 0x30
 801195a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801195c:	881b      	ldrh	r3, [r3, #0]
 801195e:	b29b      	uxth	r3, r3
 8011960:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011964:	b29a      	uxth	r2, r3
 8011966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011968:	801a      	strh	r2, [r3, #0]
 801196a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801196c:	881b      	ldrh	r3, [r3, #0]
 801196e:	b29b      	uxth	r3, r3
 8011970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011978:	b29a      	uxth	r2, r3
 801197a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801197c:	801a      	strh	r2, [r3, #0]
 801197e:	e017      	b.n	80119b0 <PCD_EP_ISR_Handler+0x6b6>
 8011980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011982:	785b      	ldrb	r3, [r3, #1]
 8011984:	2b01      	cmp	r3, #1
 8011986:	d113      	bne.n	80119b0 <PCD_EP_ISR_Handler+0x6b6>
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011990:	b29b      	uxth	r3, r3
 8011992:	461a      	mov	r2, r3
 8011994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011996:	4413      	add	r3, r2
 8011998:	63fb      	str	r3, [r7, #60]	; 0x3c
 801199a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801199c:	781b      	ldrb	r3, [r3, #0]
 801199e:	00da      	lsls	r2, r3, #3
 80119a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119a2:	4413      	add	r3, r2
 80119a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80119a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80119aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ac:	2200      	movs	r2, #0
 80119ae:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80119b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119b2:	781b      	ldrb	r3, [r3, #0]
 80119b4:	4619      	mov	r1, r3
 80119b6:	6878      	ldr	r0, [r7, #4]
 80119b8:	f006 fe81 	bl	80186be <HAL_PCD_DataInStageCallback>
 80119bc:	e051      	b.n	8011a62 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80119be:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80119c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d144      	bne.n	8011a54 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80119d2:	b29b      	uxth	r3, r3
 80119d4:	461a      	mov	r2, r3
 80119d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119d8:	781b      	ldrb	r3, [r3, #0]
 80119da:	00db      	lsls	r3, r3, #3
 80119dc:	4413      	add	r3, r2
 80119de:	687a      	ldr	r2, [r7, #4]
 80119e0:	6812      	ldr	r2, [r2, #0]
 80119e2:	4413      	add	r3, r2
 80119e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80119e8:	881b      	ldrh	r3, [r3, #0]
 80119ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80119ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80119f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119f4:	699a      	ldr	r2, [r3, #24]
 80119f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80119fa:	429a      	cmp	r2, r3
 80119fc:	d907      	bls.n	8011a0e <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 80119fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a00:	699a      	ldr	r2, [r3, #24]
 8011a02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011a06:	1ad2      	subs	r2, r2, r3
 8011a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a0a:	619a      	str	r2, [r3, #24]
 8011a0c:	e002      	b.n	8011a14 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8011a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a10:	2200      	movs	r2, #0
 8011a12:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8011a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a16:	699b      	ldr	r3, [r3, #24]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d106      	bne.n	8011a2a <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8011a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a1e:	781b      	ldrb	r3, [r3, #0]
 8011a20:	4619      	mov	r1, r3
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f006 fe4b 	bl	80186be <HAL_PCD_DataInStageCallback>
 8011a28:	e01b      	b.n	8011a62 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8011a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a2c:	695a      	ldr	r2, [r3, #20]
 8011a2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011a32:	441a      	add	r2, r3
 8011a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a36:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8011a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a3a:	69da      	ldr	r2, [r3, #28]
 8011a3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011a40:	441a      	add	r2, r3
 8011a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a44:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f002 fe76 	bl	801473e <USB_EPStartXfer>
 8011a52:	e006      	b.n	8011a62 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8011a54:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8011a58:	461a      	mov	r2, r3
 8011a5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011a5c:	6878      	ldr	r0, [r7, #4]
 8011a5e:	f000 f917 	bl	8011c90 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011a6a:	b29b      	uxth	r3, r3
 8011a6c:	b21b      	sxth	r3, r3
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	f6ff ac48 	blt.w	8011304 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8011a74:	2300      	movs	r3, #0
}
 8011a76:	4618      	mov	r0, r3
 8011a78:	3758      	adds	r7, #88	; 0x58
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bd80      	pop	{r7, pc}

08011a7e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8011a7e:	b580      	push	{r7, lr}
 8011a80:	b088      	sub	sp, #32
 8011a82:	af00      	add	r7, sp, #0
 8011a84:	60f8      	str	r0, [r7, #12]
 8011a86:	60b9      	str	r1, [r7, #8]
 8011a88:	4613      	mov	r3, r2
 8011a8a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8011a8c:	88fb      	ldrh	r3, [r7, #6]
 8011a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d07c      	beq.n	8011b90 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011a9e:	b29b      	uxth	r3, r3
 8011aa0:	461a      	mov	r2, r3
 8011aa2:	68bb      	ldr	r3, [r7, #8]
 8011aa4:	781b      	ldrb	r3, [r3, #0]
 8011aa6:	00db      	lsls	r3, r3, #3
 8011aa8:	4413      	add	r3, r2
 8011aaa:	68fa      	ldr	r2, [r7, #12]
 8011aac:	6812      	ldr	r2, [r2, #0]
 8011aae:	4413      	add	r3, r2
 8011ab0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011ab4:	881b      	ldrh	r3, [r3, #0]
 8011ab6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011aba:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	699a      	ldr	r2, [r3, #24]
 8011ac0:	8b7b      	ldrh	r3, [r7, #26]
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	d306      	bcc.n	8011ad4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8011ac6:	68bb      	ldr	r3, [r7, #8]
 8011ac8:	699a      	ldr	r2, [r3, #24]
 8011aca:	8b7b      	ldrh	r3, [r7, #26]
 8011acc:	1ad2      	subs	r2, r2, r3
 8011ace:	68bb      	ldr	r3, [r7, #8]
 8011ad0:	619a      	str	r2, [r3, #24]
 8011ad2:	e002      	b.n	8011ada <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8011ad4:	68bb      	ldr	r3, [r7, #8]
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8011ada:	68bb      	ldr	r3, [r7, #8]
 8011adc:	699b      	ldr	r3, [r3, #24]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d123      	bne.n	8011b2a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	461a      	mov	r2, r3
 8011ae8:	68bb      	ldr	r3, [r7, #8]
 8011aea:	781b      	ldrb	r3, [r3, #0]
 8011aec:	009b      	lsls	r3, r3, #2
 8011aee:	4413      	add	r3, r2
 8011af0:	881b      	ldrh	r3, [r3, #0]
 8011af2:	b29b      	uxth	r3, r3
 8011af4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011afc:	833b      	strh	r3, [r7, #24]
 8011afe:	8b3b      	ldrh	r3, [r7, #24]
 8011b00:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011b04:	833b      	strh	r3, [r7, #24]
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	461a      	mov	r2, r3
 8011b0c:	68bb      	ldr	r3, [r7, #8]
 8011b0e:	781b      	ldrb	r3, [r3, #0]
 8011b10:	009b      	lsls	r3, r3, #2
 8011b12:	441a      	add	r2, r3
 8011b14:	8b3b      	ldrh	r3, [r7, #24]
 8011b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b26:	b29b      	uxth	r3, r3
 8011b28:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8011b2a:	88fb      	ldrh	r3, [r7, #6]
 8011b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d01f      	beq.n	8011b74 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	461a      	mov	r2, r3
 8011b3a:	68bb      	ldr	r3, [r7, #8]
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	009b      	lsls	r3, r3, #2
 8011b40:	4413      	add	r3, r2
 8011b42:	881b      	ldrh	r3, [r3, #0]
 8011b44:	b29b      	uxth	r3, r3
 8011b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011b4e:	82fb      	strh	r3, [r7, #22]
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	461a      	mov	r2, r3
 8011b56:	68bb      	ldr	r3, [r7, #8]
 8011b58:	781b      	ldrb	r3, [r3, #0]
 8011b5a:	009b      	lsls	r3, r3, #2
 8011b5c:	441a      	add	r2, r3
 8011b5e:	8afb      	ldrh	r3, [r7, #22]
 8011b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011b6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011b70:	b29b      	uxth	r3, r3
 8011b72:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8011b74:	8b7b      	ldrh	r3, [r7, #26]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	f000 8085 	beq.w	8011c86 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	6818      	ldr	r0, [r3, #0]
 8011b80:	68bb      	ldr	r3, [r7, #8]
 8011b82:	6959      	ldr	r1, [r3, #20]
 8011b84:	68bb      	ldr	r3, [r7, #8]
 8011b86:	891a      	ldrh	r2, [r3, #8]
 8011b88:	8b7b      	ldrh	r3, [r7, #26]
 8011b8a:	f004 f894 	bl	8015cb6 <USB_ReadPMA>
 8011b8e:	e07a      	b.n	8011c86 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011b98:	b29b      	uxth	r3, r3
 8011b9a:	461a      	mov	r2, r3
 8011b9c:	68bb      	ldr	r3, [r7, #8]
 8011b9e:	781b      	ldrb	r3, [r3, #0]
 8011ba0:	00db      	lsls	r3, r3, #3
 8011ba2:	4413      	add	r3, r2
 8011ba4:	68fa      	ldr	r2, [r7, #12]
 8011ba6:	6812      	ldr	r2, [r2, #0]
 8011ba8:	4413      	add	r3, r2
 8011baa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011bae:	881b      	ldrh	r3, [r3, #0]
 8011bb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011bb4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8011bb6:	68bb      	ldr	r3, [r7, #8]
 8011bb8:	699a      	ldr	r2, [r3, #24]
 8011bba:	8b7b      	ldrh	r3, [r7, #26]
 8011bbc:	429a      	cmp	r2, r3
 8011bbe:	d306      	bcc.n	8011bce <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8011bc0:	68bb      	ldr	r3, [r7, #8]
 8011bc2:	699a      	ldr	r2, [r3, #24]
 8011bc4:	8b7b      	ldrh	r3, [r7, #26]
 8011bc6:	1ad2      	subs	r2, r2, r3
 8011bc8:	68bb      	ldr	r3, [r7, #8]
 8011bca:	619a      	str	r2, [r3, #24]
 8011bcc:	e002      	b.n	8011bd4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8011bce:	68bb      	ldr	r3, [r7, #8]
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8011bd4:	68bb      	ldr	r3, [r7, #8]
 8011bd6:	699b      	ldr	r3, [r3, #24]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d123      	bne.n	8011c24 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	461a      	mov	r2, r3
 8011be2:	68bb      	ldr	r3, [r7, #8]
 8011be4:	781b      	ldrb	r3, [r3, #0]
 8011be6:	009b      	lsls	r3, r3, #2
 8011be8:	4413      	add	r3, r2
 8011bea:	881b      	ldrh	r3, [r3, #0]
 8011bec:	b29b      	uxth	r3, r3
 8011bee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011bf6:	83fb      	strh	r3, [r7, #30]
 8011bf8:	8bfb      	ldrh	r3, [r7, #30]
 8011bfa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011bfe:	83fb      	strh	r3, [r7, #30]
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	461a      	mov	r2, r3
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	781b      	ldrb	r3, [r3, #0]
 8011c0a:	009b      	lsls	r3, r3, #2
 8011c0c:	441a      	add	r2, r3
 8011c0e:	8bfb      	ldrh	r3, [r7, #30]
 8011c10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011c14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011c18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c20:	b29b      	uxth	r3, r3
 8011c22:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8011c24:	88fb      	ldrh	r3, [r7, #6]
 8011c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d11f      	bne.n	8011c6e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	461a      	mov	r2, r3
 8011c34:	68bb      	ldr	r3, [r7, #8]
 8011c36:	781b      	ldrb	r3, [r3, #0]
 8011c38:	009b      	lsls	r3, r3, #2
 8011c3a:	4413      	add	r3, r2
 8011c3c:	881b      	ldrh	r3, [r3, #0]
 8011c3e:	b29b      	uxth	r3, r3
 8011c40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011c48:	83bb      	strh	r3, [r7, #28]
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	461a      	mov	r2, r3
 8011c50:	68bb      	ldr	r3, [r7, #8]
 8011c52:	781b      	ldrb	r3, [r3, #0]
 8011c54:	009b      	lsls	r3, r3, #2
 8011c56:	441a      	add	r2, r3
 8011c58:	8bbb      	ldrh	r3, [r7, #28]
 8011c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011c66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011c6a:	b29b      	uxth	r3, r3
 8011c6c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8011c6e:	8b7b      	ldrh	r3, [r7, #26]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d008      	beq.n	8011c86 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	6818      	ldr	r0, [r3, #0]
 8011c78:	68bb      	ldr	r3, [r7, #8]
 8011c7a:	6959      	ldr	r1, [r3, #20]
 8011c7c:	68bb      	ldr	r3, [r7, #8]
 8011c7e:	895a      	ldrh	r2, [r3, #10]
 8011c80:	8b7b      	ldrh	r3, [r7, #26]
 8011c82:	f004 f818 	bl	8015cb6 <USB_ReadPMA>
    }
  }

  return count;
 8011c86:	8b7b      	ldrh	r3, [r7, #26]
}
 8011c88:	4618      	mov	r0, r3
 8011c8a:	3720      	adds	r7, #32
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	bd80      	pop	{r7, pc}

08011c90 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b0a4      	sub	sp, #144	; 0x90
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	60f8      	str	r0, [r7, #12]
 8011c98:	60b9      	str	r1, [r7, #8]
 8011c9a:	4613      	mov	r3, r2
 8011c9c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8011c9e:	88fb      	ldrh	r3, [r7, #6]
 8011ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	f000 81db 	beq.w	8012060 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011cb2:	b29b      	uxth	r3, r3
 8011cb4:	461a      	mov	r2, r3
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	781b      	ldrb	r3, [r3, #0]
 8011cba:	00db      	lsls	r3, r3, #3
 8011cbc:	4413      	add	r3, r2
 8011cbe:	68fa      	ldr	r2, [r7, #12]
 8011cc0:	6812      	ldr	r2, [r2, #0]
 8011cc2:	4413      	add	r3, r2
 8011cc4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011cc8:	881b      	ldrh	r3, [r3, #0]
 8011cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011cce:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

    if (ep->xfer_len > TxPctSize)
 8011cd2:	68bb      	ldr	r3, [r7, #8]
 8011cd4:	699a      	ldr	r2, [r3, #24]
 8011cd6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8011cda:	429a      	cmp	r2, r3
 8011cdc:	d907      	bls.n	8011cee <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8011cde:	68bb      	ldr	r3, [r7, #8]
 8011ce0:	699a      	ldr	r2, [r3, #24]
 8011ce2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8011ce6:	1ad2      	subs	r2, r2, r3
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	619a      	str	r2, [r3, #24]
 8011cec:	e002      	b.n	8011cf4 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8011cee:	68bb      	ldr	r3, [r7, #8]
 8011cf0:	2200      	movs	r2, #0
 8011cf2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8011cf4:	68bb      	ldr	r3, [r7, #8]
 8011cf6:	699b      	ldr	r3, [r3, #24]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	f040 80b9 	bne.w	8011e70 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8011cfe:	68bb      	ldr	r3, [r7, #8]
 8011d00:	785b      	ldrb	r3, [r3, #1]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d126      	bne.n	8011d54 <HAL_PCD_EP_DB_Transmit+0xc4>
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011d14:	b29b      	uxth	r3, r3
 8011d16:	461a      	mov	r2, r3
 8011d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d1a:	4413      	add	r3, r2
 8011d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011d1e:	68bb      	ldr	r3, [r7, #8]
 8011d20:	781b      	ldrb	r3, [r3, #0]
 8011d22:	00da      	lsls	r2, r3, #3
 8011d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d26:	4413      	add	r3, r2
 8011d28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8011d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d30:	881b      	ldrh	r3, [r3, #0]
 8011d32:	b29b      	uxth	r3, r3
 8011d34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011d38:	b29a      	uxth	r2, r3
 8011d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d3c:	801a      	strh	r2, [r3, #0]
 8011d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d40:	881b      	ldrh	r3, [r3, #0]
 8011d42:	b29b      	uxth	r3, r3
 8011d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011d4c:	b29a      	uxth	r2, r3
 8011d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d50:	801a      	strh	r2, [r3, #0]
 8011d52:	e01a      	b.n	8011d8a <HAL_PCD_EP_DB_Transmit+0xfa>
 8011d54:	68bb      	ldr	r3, [r7, #8]
 8011d56:	785b      	ldrb	r3, [r3, #1]
 8011d58:	2b01      	cmp	r3, #1
 8011d5a:	d116      	bne.n	8011d8a <HAL_PCD_EP_DB_Transmit+0xfa>
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	637b      	str	r3, [r7, #52]	; 0x34
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011d6a:	b29b      	uxth	r3, r3
 8011d6c:	461a      	mov	r2, r3
 8011d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d70:	4413      	add	r3, r2
 8011d72:	637b      	str	r3, [r7, #52]	; 0x34
 8011d74:	68bb      	ldr	r3, [r7, #8]
 8011d76:	781b      	ldrb	r3, [r3, #0]
 8011d78:	00da      	lsls	r2, r3, #3
 8011d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d7c:	4413      	add	r3, r2
 8011d7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011d82:	633b      	str	r3, [r7, #48]	; 0x30
 8011d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d86:	2200      	movs	r2, #0
 8011d88:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8011d90:	68bb      	ldr	r3, [r7, #8]
 8011d92:	785b      	ldrb	r3, [r3, #1]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d126      	bne.n	8011de6 <HAL_PCD_EP_DB_Transmit+0x156>
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	61fb      	str	r3, [r7, #28]
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011da6:	b29b      	uxth	r3, r3
 8011da8:	461a      	mov	r2, r3
 8011daa:	69fb      	ldr	r3, [r7, #28]
 8011dac:	4413      	add	r3, r2
 8011dae:	61fb      	str	r3, [r7, #28]
 8011db0:	68bb      	ldr	r3, [r7, #8]
 8011db2:	781b      	ldrb	r3, [r3, #0]
 8011db4:	00da      	lsls	r2, r3, #3
 8011db6:	69fb      	ldr	r3, [r7, #28]
 8011db8:	4413      	add	r3, r2
 8011dba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011dbe:	61bb      	str	r3, [r7, #24]
 8011dc0:	69bb      	ldr	r3, [r7, #24]
 8011dc2:	881b      	ldrh	r3, [r3, #0]
 8011dc4:	b29b      	uxth	r3, r3
 8011dc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011dca:	b29a      	uxth	r2, r3
 8011dcc:	69bb      	ldr	r3, [r7, #24]
 8011dce:	801a      	strh	r2, [r3, #0]
 8011dd0:	69bb      	ldr	r3, [r7, #24]
 8011dd2:	881b      	ldrh	r3, [r3, #0]
 8011dd4:	b29b      	uxth	r3, r3
 8011dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011dde:	b29a      	uxth	r2, r3
 8011de0:	69bb      	ldr	r3, [r7, #24]
 8011de2:	801a      	strh	r2, [r3, #0]
 8011de4:	e017      	b.n	8011e16 <HAL_PCD_EP_DB_Transmit+0x186>
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	785b      	ldrb	r3, [r3, #1]
 8011dea:	2b01      	cmp	r3, #1
 8011dec:	d113      	bne.n	8011e16 <HAL_PCD_EP_DB_Transmit+0x186>
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011df6:	b29b      	uxth	r3, r3
 8011df8:	461a      	mov	r2, r3
 8011dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dfc:	4413      	add	r3, r2
 8011dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	781b      	ldrb	r3, [r3, #0]
 8011e04:	00da      	lsls	r2, r3, #3
 8011e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e08:	4413      	add	r3, r2
 8011e0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011e0e:	623b      	str	r3, [r7, #32]
 8011e10:	6a3b      	ldr	r3, [r7, #32]
 8011e12:	2200      	movs	r2, #0
 8011e14:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8011e16:	68bb      	ldr	r3, [r7, #8]
 8011e18:	781b      	ldrb	r3, [r3, #0]
 8011e1a:	4619      	mov	r1, r3
 8011e1c:	68f8      	ldr	r0, [r7, #12]
 8011e1e:	f006 fc4e 	bl	80186be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8011e22:	88fb      	ldrh	r3, [r7, #6]
 8011e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	f000 82fa 	beq.w	8012422 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	461a      	mov	r2, r3
 8011e34:	68bb      	ldr	r3, [r7, #8]
 8011e36:	781b      	ldrb	r3, [r3, #0]
 8011e38:	009b      	lsls	r3, r3, #2
 8011e3a:	4413      	add	r3, r2
 8011e3c:	881b      	ldrh	r3, [r3, #0]
 8011e3e:	b29b      	uxth	r3, r3
 8011e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011e48:	82fb      	strh	r3, [r7, #22]
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	461a      	mov	r2, r3
 8011e50:	68bb      	ldr	r3, [r7, #8]
 8011e52:	781b      	ldrb	r3, [r3, #0]
 8011e54:	009b      	lsls	r3, r3, #2
 8011e56:	441a      	add	r2, r3
 8011e58:	8afb      	ldrh	r3, [r7, #22]
 8011e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011e62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e6a:	b29b      	uxth	r3, r3
 8011e6c:	8013      	strh	r3, [r2, #0]
 8011e6e:	e2d8      	b.n	8012422 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8011e70:	88fb      	ldrh	r3, [r7, #6]
 8011e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d021      	beq.n	8011ebe <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	461a      	mov	r2, r3
 8011e80:	68bb      	ldr	r3, [r7, #8]
 8011e82:	781b      	ldrb	r3, [r3, #0]
 8011e84:	009b      	lsls	r3, r3, #2
 8011e86:	4413      	add	r3, r2
 8011e88:	881b      	ldrh	r3, [r3, #0]
 8011e8a:	b29b      	uxth	r3, r3
 8011e8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011e94:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	461a      	mov	r2, r3
 8011e9e:	68bb      	ldr	r3, [r7, #8]
 8011ea0:	781b      	ldrb	r3, [r3, #0]
 8011ea2:	009b      	lsls	r3, r3, #2
 8011ea4:	441a      	add	r2, r3
 8011ea6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011eb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011eba:	b29b      	uxth	r3, r3
 8011ebc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011ec4:	2b01      	cmp	r3, #1
 8011ec6:	f040 82ac 	bne.w	8012422 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8011eca:	68bb      	ldr	r3, [r7, #8]
 8011ecc:	695a      	ldr	r2, [r3, #20]
 8011ece:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8011ed2:	441a      	add	r2, r3
 8011ed4:	68bb      	ldr	r3, [r7, #8]
 8011ed6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8011ed8:	68bb      	ldr	r3, [r7, #8]
 8011eda:	69da      	ldr	r2, [r3, #28]
 8011edc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8011ee0:	441a      	add	r2, r3
 8011ee2:	68bb      	ldr	r3, [r7, #8]
 8011ee4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8011ee6:	68bb      	ldr	r3, [r7, #8]
 8011ee8:	6a1a      	ldr	r2, [r3, #32]
 8011eea:	68bb      	ldr	r3, [r7, #8]
 8011eec:	691b      	ldr	r3, [r3, #16]
 8011eee:	429a      	cmp	r2, r3
 8011ef0:	d30b      	bcc.n	8011f0a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8011ef2:	68bb      	ldr	r3, [r7, #8]
 8011ef4:	691b      	ldr	r3, [r3, #16]
 8011ef6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8011efa:	68bb      	ldr	r3, [r7, #8]
 8011efc:	6a1a      	ldr	r2, [r3, #32]
 8011efe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011f02:	1ad2      	subs	r2, r2, r3
 8011f04:	68bb      	ldr	r3, [r7, #8]
 8011f06:	621a      	str	r2, [r3, #32]
 8011f08:	e017      	b.n	8011f3a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8011f0a:	68bb      	ldr	r3, [r7, #8]
 8011f0c:	6a1b      	ldr	r3, [r3, #32]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d108      	bne.n	8011f24 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8011f12:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8011f16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8011f1a:	68bb      	ldr	r3, [r7, #8]
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8011f22:	e00a      	b.n	8011f3a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8011f24:	68bb      	ldr	r3, [r7, #8]
 8011f26:	2200      	movs	r2, #0
 8011f28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	6a1b      	ldr	r3, [r3, #32]
 8011f30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8011f34:	68bb      	ldr	r3, [r7, #8]
 8011f36:	2200      	movs	r2, #0
 8011f38:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8011f3a:	68bb      	ldr	r3, [r7, #8]
 8011f3c:	785b      	ldrb	r3, [r3, #1]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d165      	bne.n	801200e <HAL_PCD_EP_DB_Transmit+0x37e>
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011f50:	b29b      	uxth	r3, r3
 8011f52:	461a      	mov	r2, r3
 8011f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f56:	4413      	add	r3, r2
 8011f58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f5a:	68bb      	ldr	r3, [r7, #8]
 8011f5c:	781b      	ldrb	r3, [r3, #0]
 8011f5e:	00da      	lsls	r2, r3, #3
 8011f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f62:	4413      	add	r3, r2
 8011f64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011f68:	63bb      	str	r3, [r7, #56]	; 0x38
 8011f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f6c:	881b      	ldrh	r3, [r3, #0]
 8011f6e:	b29b      	uxth	r3, r3
 8011f70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011f74:	b29a      	uxth	r2, r3
 8011f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f78:	801a      	strh	r2, [r3, #0]
 8011f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d10a      	bne.n	8011f98 <HAL_PCD_EP_DB_Transmit+0x308>
 8011f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f84:	881b      	ldrh	r3, [r3, #0]
 8011f86:	b29b      	uxth	r3, r3
 8011f88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011f8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011f90:	b29a      	uxth	r2, r3
 8011f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f94:	801a      	strh	r2, [r3, #0]
 8011f96:	e057      	b.n	8012048 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8011f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011f9c:	2b3e      	cmp	r3, #62	; 0x3e
 8011f9e:	d818      	bhi.n	8011fd2 <HAL_PCD_EP_DB_Transmit+0x342>
 8011fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011fa4:	085b      	lsrs	r3, r3, #1
 8011fa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8011fa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011fac:	f003 0301 	and.w	r3, r3, #1
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d002      	beq.n	8011fba <HAL_PCD_EP_DB_Transmit+0x32a>
 8011fb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fb6:	3301      	adds	r3, #1
 8011fb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8011fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fbc:	881b      	ldrh	r3, [r3, #0]
 8011fbe:	b29a      	uxth	r2, r3
 8011fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fc2:	b29b      	uxth	r3, r3
 8011fc4:	029b      	lsls	r3, r3, #10
 8011fc6:	b29b      	uxth	r3, r3
 8011fc8:	4313      	orrs	r3, r2
 8011fca:	b29a      	uxth	r2, r3
 8011fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fce:	801a      	strh	r2, [r3, #0]
 8011fd0:	e03a      	b.n	8012048 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8011fd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011fd6:	095b      	lsrs	r3, r3, #5
 8011fd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8011fda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011fde:	f003 031f 	and.w	r3, r3, #31
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d102      	bne.n	8011fec <HAL_PCD_EP_DB_Transmit+0x35c>
 8011fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fe8:	3b01      	subs	r3, #1
 8011fea:	64bb      	str	r3, [r7, #72]	; 0x48
 8011fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fee:	881b      	ldrh	r3, [r3, #0]
 8011ff0:	b29a      	uxth	r2, r3
 8011ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ff4:	b29b      	uxth	r3, r3
 8011ff6:	029b      	lsls	r3, r3, #10
 8011ff8:	b29b      	uxth	r3, r3
 8011ffa:	4313      	orrs	r3, r2
 8011ffc:	b29b      	uxth	r3, r3
 8011ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012006:	b29a      	uxth	r2, r3
 8012008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801200a:	801a      	strh	r2, [r3, #0]
 801200c:	e01c      	b.n	8012048 <HAL_PCD_EP_DB_Transmit+0x3b8>
 801200e:	68bb      	ldr	r3, [r7, #8]
 8012010:	785b      	ldrb	r3, [r3, #1]
 8012012:	2b01      	cmp	r3, #1
 8012014:	d118      	bne.n	8012048 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	647b      	str	r3, [r7, #68]	; 0x44
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012024:	b29b      	uxth	r3, r3
 8012026:	461a      	mov	r2, r3
 8012028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801202a:	4413      	add	r3, r2
 801202c:	647b      	str	r3, [r7, #68]	; 0x44
 801202e:	68bb      	ldr	r3, [r7, #8]
 8012030:	781b      	ldrb	r3, [r3, #0]
 8012032:	00da      	lsls	r2, r3, #3
 8012034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012036:	4413      	add	r3, r2
 8012038:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801203c:	643b      	str	r3, [r7, #64]	; 0x40
 801203e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012042:	b29a      	uxth	r2, r3
 8012044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012046:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	6818      	ldr	r0, [r3, #0]
 801204c:	68bb      	ldr	r3, [r7, #8]
 801204e:	6959      	ldr	r1, [r3, #20]
 8012050:	68bb      	ldr	r3, [r7, #8]
 8012052:	891a      	ldrh	r2, [r3, #8]
 8012054:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012058:	b29b      	uxth	r3, r3
 801205a:	f003 fdea 	bl	8015c32 <USB_WritePMA>
 801205e:	e1e0      	b.n	8012422 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012068:	b29b      	uxth	r3, r3
 801206a:	461a      	mov	r2, r3
 801206c:	68bb      	ldr	r3, [r7, #8]
 801206e:	781b      	ldrb	r3, [r3, #0]
 8012070:	00db      	lsls	r3, r3, #3
 8012072:	4413      	add	r3, r2
 8012074:	68fa      	ldr	r2, [r7, #12]
 8012076:	6812      	ldr	r2, [r2, #0]
 8012078:	4413      	add	r3, r2
 801207a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801207e:	881b      	ldrh	r3, [r3, #0]
 8012080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012084:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

    if (ep->xfer_len >= TxPctSize)
 8012088:	68bb      	ldr	r3, [r7, #8]
 801208a:	699a      	ldr	r2, [r3, #24]
 801208c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8012090:	429a      	cmp	r2, r3
 8012092:	d307      	bcc.n	80120a4 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8012094:	68bb      	ldr	r3, [r7, #8]
 8012096:	699a      	ldr	r2, [r3, #24]
 8012098:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 801209c:	1ad2      	subs	r2, r2, r3
 801209e:	68bb      	ldr	r3, [r7, #8]
 80120a0:	619a      	str	r2, [r3, #24]
 80120a2:	e002      	b.n	80120aa <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80120a4:	68bb      	ldr	r3, [r7, #8]
 80120a6:	2200      	movs	r2, #0
 80120a8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	699b      	ldr	r3, [r3, #24]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	f040 80c0 	bne.w	8012234 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80120b4:	68bb      	ldr	r3, [r7, #8]
 80120b6:	785b      	ldrb	r3, [r3, #1]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d126      	bne.n	801210a <HAL_PCD_EP_DB_Transmit+0x47a>
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80120ca:	b29b      	uxth	r3, r3
 80120cc:	461a      	mov	r2, r3
 80120ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80120d0:	4413      	add	r3, r2
 80120d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80120d4:	68bb      	ldr	r3, [r7, #8]
 80120d6:	781b      	ldrb	r3, [r3, #0]
 80120d8:	00da      	lsls	r2, r3, #3
 80120da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80120dc:	4413      	add	r3, r2
 80120de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80120e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80120e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80120e6:	881b      	ldrh	r3, [r3, #0]
 80120e8:	b29b      	uxth	r3, r3
 80120ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80120ee:	b29a      	uxth	r2, r3
 80120f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80120f2:	801a      	strh	r2, [r3, #0]
 80120f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80120f6:	881b      	ldrh	r3, [r3, #0]
 80120f8:	b29b      	uxth	r3, r3
 80120fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80120fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012102:	b29a      	uxth	r2, r3
 8012104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012106:	801a      	strh	r2, [r3, #0]
 8012108:	e01a      	b.n	8012140 <HAL_PCD_EP_DB_Transmit+0x4b0>
 801210a:	68bb      	ldr	r3, [r7, #8]
 801210c:	785b      	ldrb	r3, [r3, #1]
 801210e:	2b01      	cmp	r3, #1
 8012110:	d116      	bne.n	8012140 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	667b      	str	r3, [r7, #100]	; 0x64
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012120:	b29b      	uxth	r3, r3
 8012122:	461a      	mov	r2, r3
 8012124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012126:	4413      	add	r3, r2
 8012128:	667b      	str	r3, [r7, #100]	; 0x64
 801212a:	68bb      	ldr	r3, [r7, #8]
 801212c:	781b      	ldrb	r3, [r3, #0]
 801212e:	00da      	lsls	r2, r3, #3
 8012130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012132:	4413      	add	r3, r2
 8012134:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012138:	663b      	str	r3, [r7, #96]	; 0x60
 801213a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801213c:	2200      	movs	r2, #0
 801213e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	677b      	str	r3, [r7, #116]	; 0x74
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	785b      	ldrb	r3, [r3, #1]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d12b      	bne.n	80121a6 <HAL_PCD_EP_DB_Transmit+0x516>
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801215c:	b29b      	uxth	r3, r3
 801215e:	461a      	mov	r2, r3
 8012160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012162:	4413      	add	r3, r2
 8012164:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	781b      	ldrb	r3, [r3, #0]
 801216a:	00da      	lsls	r2, r3, #3
 801216c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801216e:	4413      	add	r3, r2
 8012170:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012174:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012178:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801217c:	881b      	ldrh	r3, [r3, #0]
 801217e:	b29b      	uxth	r3, r3
 8012180:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012184:	b29a      	uxth	r2, r3
 8012186:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801218a:	801a      	strh	r2, [r3, #0]
 801218c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012190:	881b      	ldrh	r3, [r3, #0]
 8012192:	b29b      	uxth	r3, r3
 8012194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801219c:	b29a      	uxth	r2, r3
 801219e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80121a2:	801a      	strh	r2, [r3, #0]
 80121a4:	e017      	b.n	80121d6 <HAL_PCD_EP_DB_Transmit+0x546>
 80121a6:	68bb      	ldr	r3, [r7, #8]
 80121a8:	785b      	ldrb	r3, [r3, #1]
 80121aa:	2b01      	cmp	r3, #1
 80121ac:	d113      	bne.n	80121d6 <HAL_PCD_EP_DB_Transmit+0x546>
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80121b6:	b29b      	uxth	r3, r3
 80121b8:	461a      	mov	r2, r3
 80121ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80121bc:	4413      	add	r3, r2
 80121be:	677b      	str	r3, [r7, #116]	; 0x74
 80121c0:	68bb      	ldr	r3, [r7, #8]
 80121c2:	781b      	ldrb	r3, [r3, #0]
 80121c4:	00da      	lsls	r2, r3, #3
 80121c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80121c8:	4413      	add	r3, r2
 80121ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80121ce:	673b      	str	r3, [r7, #112]	; 0x70
 80121d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80121d2:	2200      	movs	r2, #0
 80121d4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80121d6:	68bb      	ldr	r3, [r7, #8]
 80121d8:	781b      	ldrb	r3, [r3, #0]
 80121da:	4619      	mov	r1, r3
 80121dc:	68f8      	ldr	r0, [r7, #12]
 80121de:	f006 fa6e 	bl	80186be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80121e2:	88fb      	ldrh	r3, [r7, #6]
 80121e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	f040 811a 	bne.w	8012422 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	461a      	mov	r2, r3
 80121f4:	68bb      	ldr	r3, [r7, #8]
 80121f6:	781b      	ldrb	r3, [r3, #0]
 80121f8:	009b      	lsls	r3, r3, #2
 80121fa:	4413      	add	r3, r2
 80121fc:	881b      	ldrh	r3, [r3, #0]
 80121fe:	b29b      	uxth	r3, r3
 8012200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012208:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	461a      	mov	r2, r3
 8012212:	68bb      	ldr	r3, [r7, #8]
 8012214:	781b      	ldrb	r3, [r3, #0]
 8012216:	009b      	lsls	r3, r3, #2
 8012218:	441a      	add	r2, r3
 801221a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 801221e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012226:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801222a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801222e:	b29b      	uxth	r3, r3
 8012230:	8013      	strh	r3, [r2, #0]
 8012232:	e0f6      	b.n	8012422 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8012234:	88fb      	ldrh	r3, [r7, #6]
 8012236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801223a:	2b00      	cmp	r3, #0
 801223c:	d121      	bne.n	8012282 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	461a      	mov	r2, r3
 8012244:	68bb      	ldr	r3, [r7, #8]
 8012246:	781b      	ldrb	r3, [r3, #0]
 8012248:	009b      	lsls	r3, r3, #2
 801224a:	4413      	add	r3, r2
 801224c:	881b      	ldrh	r3, [r3, #0]
 801224e:	b29b      	uxth	r3, r3
 8012250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012258:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	461a      	mov	r2, r3
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	781b      	ldrb	r3, [r3, #0]
 8012266:	009b      	lsls	r3, r3, #2
 8012268:	441a      	add	r2, r3
 801226a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801226e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012276:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801227a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801227e:	b29b      	uxth	r3, r3
 8012280:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8012282:	68bb      	ldr	r3, [r7, #8]
 8012284:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012288:	2b01      	cmp	r3, #1
 801228a:	f040 80ca 	bne.w	8012422 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 801228e:	68bb      	ldr	r3, [r7, #8]
 8012290:	695a      	ldr	r2, [r3, #20]
 8012292:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8012296:	441a      	add	r2, r3
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801229c:	68bb      	ldr	r3, [r7, #8]
 801229e:	69da      	ldr	r2, [r3, #28]
 80122a0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80122a4:	441a      	add	r2, r3
 80122a6:	68bb      	ldr	r3, [r7, #8]
 80122a8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80122aa:	68bb      	ldr	r3, [r7, #8]
 80122ac:	6a1a      	ldr	r2, [r3, #32]
 80122ae:	68bb      	ldr	r3, [r7, #8]
 80122b0:	691b      	ldr	r3, [r3, #16]
 80122b2:	429a      	cmp	r2, r3
 80122b4:	d30b      	bcc.n	80122ce <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	691b      	ldr	r3, [r3, #16]
 80122ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80122be:	68bb      	ldr	r3, [r7, #8]
 80122c0:	6a1a      	ldr	r2, [r3, #32]
 80122c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80122c6:	1ad2      	subs	r2, r2, r3
 80122c8:	68bb      	ldr	r3, [r7, #8]
 80122ca:	621a      	str	r2, [r3, #32]
 80122cc:	e017      	b.n	80122fe <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80122ce:	68bb      	ldr	r3, [r7, #8]
 80122d0:	6a1b      	ldr	r3, [r3, #32]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d108      	bne.n	80122e8 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80122d6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80122da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80122de:	68bb      	ldr	r3, [r7, #8]
 80122e0:	2200      	movs	r2, #0
 80122e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80122e6:	e00a      	b.n	80122fe <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80122e8:	68bb      	ldr	r3, [r7, #8]
 80122ea:	6a1b      	ldr	r3, [r3, #32]
 80122ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80122f0:	68bb      	ldr	r3, [r7, #8]
 80122f2:	2200      	movs	r2, #0
 80122f4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80122f6:	68bb      	ldr	r3, [r7, #8]
 80122f8:	2200      	movs	r2, #0
 80122fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	657b      	str	r3, [r7, #84]	; 0x54
 8012304:	68bb      	ldr	r3, [r7, #8]
 8012306:	785b      	ldrb	r3, [r3, #1]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d165      	bne.n	80123d8 <HAL_PCD_EP_DB_Transmit+0x748>
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801231a:	b29b      	uxth	r3, r3
 801231c:	461a      	mov	r2, r3
 801231e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012320:	4413      	add	r3, r2
 8012322:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012324:	68bb      	ldr	r3, [r7, #8]
 8012326:	781b      	ldrb	r3, [r3, #0]
 8012328:	00da      	lsls	r2, r3, #3
 801232a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801232c:	4413      	add	r3, r2
 801232e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012332:	65bb      	str	r3, [r7, #88]	; 0x58
 8012334:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012336:	881b      	ldrh	r3, [r3, #0]
 8012338:	b29b      	uxth	r3, r3
 801233a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801233e:	b29a      	uxth	r2, r3
 8012340:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012342:	801a      	strh	r2, [r3, #0]
 8012344:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012348:	2b00      	cmp	r3, #0
 801234a:	d10a      	bne.n	8012362 <HAL_PCD_EP_DB_Transmit+0x6d2>
 801234c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801234e:	881b      	ldrh	r3, [r3, #0]
 8012350:	b29b      	uxth	r3, r3
 8012352:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012356:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801235a:	b29a      	uxth	r2, r3
 801235c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801235e:	801a      	strh	r2, [r3, #0]
 8012360:	e054      	b.n	801240c <HAL_PCD_EP_DB_Transmit+0x77c>
 8012362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012366:	2b3e      	cmp	r3, #62	; 0x3e
 8012368:	d818      	bhi.n	801239c <HAL_PCD_EP_DB_Transmit+0x70c>
 801236a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801236e:	085b      	lsrs	r3, r3, #1
 8012370:	66bb      	str	r3, [r7, #104]	; 0x68
 8012372:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012376:	f003 0301 	and.w	r3, r3, #1
 801237a:	2b00      	cmp	r3, #0
 801237c:	d002      	beq.n	8012384 <HAL_PCD_EP_DB_Transmit+0x6f4>
 801237e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012380:	3301      	adds	r3, #1
 8012382:	66bb      	str	r3, [r7, #104]	; 0x68
 8012384:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012386:	881b      	ldrh	r3, [r3, #0]
 8012388:	b29a      	uxth	r2, r3
 801238a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801238c:	b29b      	uxth	r3, r3
 801238e:	029b      	lsls	r3, r3, #10
 8012390:	b29b      	uxth	r3, r3
 8012392:	4313      	orrs	r3, r2
 8012394:	b29a      	uxth	r2, r3
 8012396:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012398:	801a      	strh	r2, [r3, #0]
 801239a:	e037      	b.n	801240c <HAL_PCD_EP_DB_Transmit+0x77c>
 801239c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80123a0:	095b      	lsrs	r3, r3, #5
 80123a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80123a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80123a8:	f003 031f 	and.w	r3, r3, #31
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d102      	bne.n	80123b6 <HAL_PCD_EP_DB_Transmit+0x726>
 80123b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80123b2:	3b01      	subs	r3, #1
 80123b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80123b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123b8:	881b      	ldrh	r3, [r3, #0]
 80123ba:	b29a      	uxth	r2, r3
 80123bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80123be:	b29b      	uxth	r3, r3
 80123c0:	029b      	lsls	r3, r3, #10
 80123c2:	b29b      	uxth	r3, r3
 80123c4:	4313      	orrs	r3, r2
 80123c6:	b29b      	uxth	r3, r3
 80123c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80123cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80123d0:	b29a      	uxth	r2, r3
 80123d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123d4:	801a      	strh	r2, [r3, #0]
 80123d6:	e019      	b.n	801240c <HAL_PCD_EP_DB_Transmit+0x77c>
 80123d8:	68bb      	ldr	r3, [r7, #8]
 80123da:	785b      	ldrb	r3, [r3, #1]
 80123dc:	2b01      	cmp	r3, #1
 80123de:	d115      	bne.n	801240c <HAL_PCD_EP_DB_Transmit+0x77c>
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80123e8:	b29b      	uxth	r3, r3
 80123ea:	461a      	mov	r2, r3
 80123ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123ee:	4413      	add	r3, r2
 80123f0:	657b      	str	r3, [r7, #84]	; 0x54
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	781b      	ldrb	r3, [r3, #0]
 80123f6:	00da      	lsls	r2, r3, #3
 80123f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123fa:	4413      	add	r3, r2
 80123fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012400:	653b      	str	r3, [r7, #80]	; 0x50
 8012402:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012406:	b29a      	uxth	r2, r3
 8012408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801240a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	6818      	ldr	r0, [r3, #0]
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	6959      	ldr	r1, [r3, #20]
 8012414:	68bb      	ldr	r3, [r7, #8]
 8012416:	895a      	ldrh	r2, [r3, #10]
 8012418:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801241c:	b29b      	uxth	r3, r3
 801241e:	f003 fc08 	bl	8015c32 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	461a      	mov	r2, r3
 8012428:	68bb      	ldr	r3, [r7, #8]
 801242a:	781b      	ldrb	r3, [r3, #0]
 801242c:	009b      	lsls	r3, r3, #2
 801242e:	4413      	add	r3, r2
 8012430:	881b      	ldrh	r3, [r3, #0]
 8012432:	b29b      	uxth	r3, r3
 8012434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801243c:	82bb      	strh	r3, [r7, #20]
 801243e:	8abb      	ldrh	r3, [r7, #20]
 8012440:	f083 0310 	eor.w	r3, r3, #16
 8012444:	82bb      	strh	r3, [r7, #20]
 8012446:	8abb      	ldrh	r3, [r7, #20]
 8012448:	f083 0320 	eor.w	r3, r3, #32
 801244c:	82bb      	strh	r3, [r7, #20]
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	461a      	mov	r2, r3
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	781b      	ldrb	r3, [r3, #0]
 8012458:	009b      	lsls	r3, r3, #2
 801245a:	441a      	add	r2, r3
 801245c:	8abb      	ldrh	r3, [r7, #20]
 801245e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801246a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801246e:	b29b      	uxth	r3, r3
 8012470:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8012472:	2300      	movs	r3, #0
}
 8012474:	4618      	mov	r0, r3
 8012476:	3790      	adds	r7, #144	; 0x90
 8012478:	46bd      	mov	sp, r7
 801247a:	bd80      	pop	{r7, pc}

0801247c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 801247c:	b480      	push	{r7}
 801247e:	b087      	sub	sp, #28
 8012480:	af00      	add	r7, sp, #0
 8012482:	60f8      	str	r0, [r7, #12]
 8012484:	607b      	str	r3, [r7, #4]
 8012486:	460b      	mov	r3, r1
 8012488:	817b      	strh	r3, [r7, #10]
 801248a:	4613      	mov	r3, r2
 801248c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801248e:	897b      	ldrh	r3, [r7, #10]
 8012490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012494:	b29b      	uxth	r3, r3
 8012496:	2b00      	cmp	r3, #0
 8012498:	d00b      	beq.n	80124b2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801249a:	897b      	ldrh	r3, [r7, #10]
 801249c:	f003 0207 	and.w	r2, r3, #7
 80124a0:	4613      	mov	r3, r2
 80124a2:	009b      	lsls	r3, r3, #2
 80124a4:	4413      	add	r3, r2
 80124a6:	00db      	lsls	r3, r3, #3
 80124a8:	3310      	adds	r3, #16
 80124aa:	68fa      	ldr	r2, [r7, #12]
 80124ac:	4413      	add	r3, r2
 80124ae:	617b      	str	r3, [r7, #20]
 80124b0:	e009      	b.n	80124c6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80124b2:	897a      	ldrh	r2, [r7, #10]
 80124b4:	4613      	mov	r3, r2
 80124b6:	009b      	lsls	r3, r3, #2
 80124b8:	4413      	add	r3, r2
 80124ba:	00db      	lsls	r3, r3, #3
 80124bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80124c0:	68fa      	ldr	r2, [r7, #12]
 80124c2:	4413      	add	r3, r2
 80124c4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80124c6:	893b      	ldrh	r3, [r7, #8]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d107      	bne.n	80124dc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80124cc:	697b      	ldr	r3, [r7, #20]
 80124ce:	2200      	movs	r2, #0
 80124d0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	b29a      	uxth	r2, r3
 80124d6:	697b      	ldr	r3, [r7, #20]
 80124d8:	80da      	strh	r2, [r3, #6]
 80124da:	e00b      	b.n	80124f4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80124dc:	697b      	ldr	r3, [r7, #20]
 80124de:	2201      	movs	r2, #1
 80124e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	b29a      	uxth	r2, r3
 80124e6:	697b      	ldr	r3, [r7, #20]
 80124e8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	0c1b      	lsrs	r3, r3, #16
 80124ee:	b29a      	uxth	r2, r3
 80124f0:	697b      	ldr	r3, [r7, #20]
 80124f2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80124f4:	2300      	movs	r3, #0
}
 80124f6:	4618      	mov	r0, r3
 80124f8:	371c      	adds	r7, #28
 80124fa:	46bd      	mov	sp, r7
 80124fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012500:	4770      	bx	lr
	...

08012504 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 801250a:	af00      	add	r7, sp, #0
 801250c:	1d3b      	adds	r3, r7, #4
 801250e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8012510:	1d3b      	adds	r3, r7, #4
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d102      	bne.n	801251e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8012518:	2301      	movs	r3, #1
 801251a:	f000 bf01 	b.w	8013320 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801251e:	1d3b      	adds	r3, r7, #4
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	f003 0301 	and.w	r3, r3, #1
 8012528:	2b00      	cmp	r3, #0
 801252a:	f000 8160 	beq.w	80127ee <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 801252e:	4bae      	ldr	r3, [pc, #696]	; (80127e8 <HAL_RCC_OscConfig+0x2e4>)
 8012530:	685b      	ldr	r3, [r3, #4]
 8012532:	f003 030c 	and.w	r3, r3, #12
 8012536:	2b04      	cmp	r3, #4
 8012538:	d00c      	beq.n	8012554 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 801253a:	4bab      	ldr	r3, [pc, #684]	; (80127e8 <HAL_RCC_OscConfig+0x2e4>)
 801253c:	685b      	ldr	r3, [r3, #4]
 801253e:	f003 030c 	and.w	r3, r3, #12
 8012542:	2b08      	cmp	r3, #8
 8012544:	d159      	bne.n	80125fa <HAL_RCC_OscConfig+0xf6>
 8012546:	4ba8      	ldr	r3, [pc, #672]	; (80127e8 <HAL_RCC_OscConfig+0x2e4>)
 8012548:	685b      	ldr	r3, [r3, #4]
 801254a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 801254e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012552:	d152      	bne.n	80125fa <HAL_RCC_OscConfig+0xf6>
 8012554:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012558:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801255c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8012560:	fa93 f3a3 	rbit	r3, r3
 8012564:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8012568:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801256c:	fab3 f383 	clz	r3, r3
 8012570:	b2db      	uxtb	r3, r3
 8012572:	095b      	lsrs	r3, r3, #5
 8012574:	b2db      	uxtb	r3, r3
 8012576:	f043 0301 	orr.w	r3, r3, #1
 801257a:	b2db      	uxtb	r3, r3
 801257c:	2b01      	cmp	r3, #1
 801257e:	d102      	bne.n	8012586 <HAL_RCC_OscConfig+0x82>
 8012580:	4b99      	ldr	r3, [pc, #612]	; (80127e8 <HAL_RCC_OscConfig+0x2e4>)
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	e015      	b.n	80125b2 <HAL_RCC_OscConfig+0xae>
 8012586:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801258a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801258e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8012592:	fa93 f3a3 	rbit	r3, r3
 8012596:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 801259a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801259e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80125a2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80125a6:	fa93 f3a3 	rbit	r3, r3
 80125aa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80125ae:	4b8e      	ldr	r3, [pc, #568]	; (80127e8 <HAL_RCC_OscConfig+0x2e4>)
 80125b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80125b6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80125ba:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80125be:	fa92 f2a2 	rbit	r2, r2
 80125c2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80125c6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80125ca:	fab2 f282 	clz	r2, r2
 80125ce:	b2d2      	uxtb	r2, r2
 80125d0:	f042 0220 	orr.w	r2, r2, #32
 80125d4:	b2d2      	uxtb	r2, r2
 80125d6:	f002 021f 	and.w	r2, r2, #31
 80125da:	2101      	movs	r1, #1
 80125dc:	fa01 f202 	lsl.w	r2, r1, r2
 80125e0:	4013      	ands	r3, r2
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	f000 8102 	beq.w	80127ec <HAL_RCC_OscConfig+0x2e8>
 80125e8:	1d3b      	adds	r3, r7, #4
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	685b      	ldr	r3, [r3, #4]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	f040 80fc 	bne.w	80127ec <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80125f4:	2301      	movs	r3, #1
 80125f6:	f000 be93 	b.w	8013320 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80125fa:	1d3b      	adds	r3, r7, #4
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	685b      	ldr	r3, [r3, #4]
 8012600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012604:	d106      	bne.n	8012614 <HAL_RCC_OscConfig+0x110>
 8012606:	4b78      	ldr	r3, [pc, #480]	; (80127e8 <HAL_RCC_OscConfig+0x2e4>)
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	4a77      	ldr	r2, [pc, #476]	; (80127e8 <HAL_RCC_OscConfig+0x2e4>)
 801260c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012610:	6013      	str	r3, [r2, #0]
 8012612:	e030      	b.n	8012676 <HAL_RCC_OscConfig+0x172>
 8012614:	1d3b      	adds	r3, r7, #4
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	685b      	ldr	r3, [r3, #4]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d10c      	bne.n	8012638 <HAL_RCC_OscConfig+0x134>
 801261e:	4b72      	ldr	r3, [pc, #456]	; (80127e8 <HAL_RCC_OscConfig+0x2e4>)
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	4a71      	ldr	r2, [pc, #452]	; (80127e8 <HAL_RCC_OscConfig+0x2e4>)
 8012624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012628:	6013      	str	r3, [r2, #0]
 801262a:	4b6f      	ldr	r3, [pc, #444]	; (80127e8 <HAL_RCC_OscConfig+0x2e4>)
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	4a6e      	ldr	r2, [pc, #440]	; (80127e8 <HAL_RCC_OscConfig+0x2e4>)
 8012630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012634:	6013      	str	r3, [r2, #0]
 8012636:	e01e      	b.n	8012676 <HAL_RCC_OscConfig+0x172>
 8012638:	1d3b      	adds	r3, r7, #4
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	685b      	ldr	r3, [r3, #4]
 801263e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012642:	d10c      	bne.n	801265e <HAL_RCC_OscConfig+0x15a>
 8012644:	4b68      	ldr	r3, [pc, #416]	; (80127e8 <HAL_RCC_OscConfig+0x2e4>)
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	4a67      	ldr	r2, [pc, #412]	; (80127e8 <HAL_RCC_OscConfig+0x2e4>)
 801264a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801264e:	6013      	str	r3, [r2, #0]
 8012650:	4b65      	ldr	r3, [pc, #404]	; (80127e8 <HAL_RCC_OscConfig+0x2e4>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	4a64      	ldr	r2, [pc, #400]	; (80127e8 <HAL_RCC_OscConfig+0x2e4>)
 8012656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801265a:	6013      	str	r3, [r2, #0]
 801265c:	e00b      	b.n	8012676 <HAL_RCC_OscConfig+0x172>
 801265e:	4b62      	ldr	r3, [pc, #392]	; (80127e8 <HAL_RCC_OscConfig+0x2e4>)
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	4a61      	ldr	r2, [pc, #388]	; (80127e8 <HAL_RCC_OscConfig+0x2e4>)
 8012664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012668:	6013      	str	r3, [r2, #0]
 801266a:	4b5f      	ldr	r3, [pc, #380]	; (80127e8 <HAL_RCC_OscConfig+0x2e4>)
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	4a5e      	ldr	r2, [pc, #376]	; (80127e8 <HAL_RCC_OscConfig+0x2e4>)
 8012670:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012674:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8012676:	1d3b      	adds	r3, r7, #4
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	685b      	ldr	r3, [r3, #4]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d059      	beq.n	8012734 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012680:	f7fd ff60 	bl	8010544 <HAL_GetTick>
 8012684:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012688:	e00a      	b.n	80126a0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801268a:	f7fd ff5b 	bl	8010544 <HAL_GetTick>
 801268e:	4602      	mov	r2, r0
 8012690:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012694:	1ad3      	subs	r3, r2, r3
 8012696:	2b64      	cmp	r3, #100	; 0x64
 8012698:	d902      	bls.n	80126a0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 801269a:	2303      	movs	r3, #3
 801269c:	f000 be40 	b.w	8013320 <HAL_RCC_OscConfig+0xe1c>
 80126a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80126a4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80126a8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80126ac:	fa93 f3a3 	rbit	r3, r3
 80126b0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80126b4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80126b8:	fab3 f383 	clz	r3, r3
 80126bc:	b2db      	uxtb	r3, r3
 80126be:	095b      	lsrs	r3, r3, #5
 80126c0:	b2db      	uxtb	r3, r3
 80126c2:	f043 0301 	orr.w	r3, r3, #1
 80126c6:	b2db      	uxtb	r3, r3
 80126c8:	2b01      	cmp	r3, #1
 80126ca:	d102      	bne.n	80126d2 <HAL_RCC_OscConfig+0x1ce>
 80126cc:	4b46      	ldr	r3, [pc, #280]	; (80127e8 <HAL_RCC_OscConfig+0x2e4>)
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	e015      	b.n	80126fe <HAL_RCC_OscConfig+0x1fa>
 80126d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80126d6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80126da:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80126de:	fa93 f3a3 	rbit	r3, r3
 80126e2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80126e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80126ea:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80126ee:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80126f2:	fa93 f3a3 	rbit	r3, r3
 80126f6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80126fa:	4b3b      	ldr	r3, [pc, #236]	; (80127e8 <HAL_RCC_OscConfig+0x2e4>)
 80126fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8012702:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8012706:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801270a:	fa92 f2a2 	rbit	r2, r2
 801270e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8012712:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8012716:	fab2 f282 	clz	r2, r2
 801271a:	b2d2      	uxtb	r2, r2
 801271c:	f042 0220 	orr.w	r2, r2, #32
 8012720:	b2d2      	uxtb	r2, r2
 8012722:	f002 021f 	and.w	r2, r2, #31
 8012726:	2101      	movs	r1, #1
 8012728:	fa01 f202 	lsl.w	r2, r1, r2
 801272c:	4013      	ands	r3, r2
 801272e:	2b00      	cmp	r3, #0
 8012730:	d0ab      	beq.n	801268a <HAL_RCC_OscConfig+0x186>
 8012732:	e05c      	b.n	80127ee <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012734:	f7fd ff06 	bl	8010544 <HAL_GetTick>
 8012738:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801273c:	e00a      	b.n	8012754 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801273e:	f7fd ff01 	bl	8010544 <HAL_GetTick>
 8012742:	4602      	mov	r2, r0
 8012744:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012748:	1ad3      	subs	r3, r2, r3
 801274a:	2b64      	cmp	r3, #100	; 0x64
 801274c:	d902      	bls.n	8012754 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 801274e:	2303      	movs	r3, #3
 8012750:	f000 bde6 	b.w	8013320 <HAL_RCC_OscConfig+0xe1c>
 8012754:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012758:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801275c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8012760:	fa93 f3a3 	rbit	r3, r3
 8012764:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8012768:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801276c:	fab3 f383 	clz	r3, r3
 8012770:	b2db      	uxtb	r3, r3
 8012772:	095b      	lsrs	r3, r3, #5
 8012774:	b2db      	uxtb	r3, r3
 8012776:	f043 0301 	orr.w	r3, r3, #1
 801277a:	b2db      	uxtb	r3, r3
 801277c:	2b01      	cmp	r3, #1
 801277e:	d102      	bne.n	8012786 <HAL_RCC_OscConfig+0x282>
 8012780:	4b19      	ldr	r3, [pc, #100]	; (80127e8 <HAL_RCC_OscConfig+0x2e4>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	e015      	b.n	80127b2 <HAL_RCC_OscConfig+0x2ae>
 8012786:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801278a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801278e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8012792:	fa93 f3a3 	rbit	r3, r3
 8012796:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 801279a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801279e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80127a2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80127a6:	fa93 f3a3 	rbit	r3, r3
 80127aa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80127ae:	4b0e      	ldr	r3, [pc, #56]	; (80127e8 <HAL_RCC_OscConfig+0x2e4>)
 80127b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80127b6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80127ba:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80127be:	fa92 f2a2 	rbit	r2, r2
 80127c2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80127c6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80127ca:	fab2 f282 	clz	r2, r2
 80127ce:	b2d2      	uxtb	r2, r2
 80127d0:	f042 0220 	orr.w	r2, r2, #32
 80127d4:	b2d2      	uxtb	r2, r2
 80127d6:	f002 021f 	and.w	r2, r2, #31
 80127da:	2101      	movs	r1, #1
 80127dc:	fa01 f202 	lsl.w	r2, r1, r2
 80127e0:	4013      	ands	r3, r2
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d1ab      	bne.n	801273e <HAL_RCC_OscConfig+0x23a>
 80127e6:	e002      	b.n	80127ee <HAL_RCC_OscConfig+0x2ea>
 80127e8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80127ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80127ee:	1d3b      	adds	r3, r7, #4
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	f003 0302 	and.w	r3, r3, #2
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	f000 8170 	beq.w	8012ade <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80127fe:	4bd0      	ldr	r3, [pc, #832]	; (8012b40 <HAL_RCC_OscConfig+0x63c>)
 8012800:	685b      	ldr	r3, [r3, #4]
 8012802:	f003 030c 	and.w	r3, r3, #12
 8012806:	2b00      	cmp	r3, #0
 8012808:	d00c      	beq.n	8012824 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 801280a:	4bcd      	ldr	r3, [pc, #820]	; (8012b40 <HAL_RCC_OscConfig+0x63c>)
 801280c:	685b      	ldr	r3, [r3, #4]
 801280e:	f003 030c 	and.w	r3, r3, #12
 8012812:	2b08      	cmp	r3, #8
 8012814:	d16d      	bne.n	80128f2 <HAL_RCC_OscConfig+0x3ee>
 8012816:	4bca      	ldr	r3, [pc, #808]	; (8012b40 <HAL_RCC_OscConfig+0x63c>)
 8012818:	685b      	ldr	r3, [r3, #4]
 801281a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 801281e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012822:	d166      	bne.n	80128f2 <HAL_RCC_OscConfig+0x3ee>
 8012824:	2302      	movs	r3, #2
 8012826:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801282a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801282e:	fa93 f3a3 	rbit	r3, r3
 8012832:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8012836:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801283a:	fab3 f383 	clz	r3, r3
 801283e:	b2db      	uxtb	r3, r3
 8012840:	095b      	lsrs	r3, r3, #5
 8012842:	b2db      	uxtb	r3, r3
 8012844:	f043 0301 	orr.w	r3, r3, #1
 8012848:	b2db      	uxtb	r3, r3
 801284a:	2b01      	cmp	r3, #1
 801284c:	d102      	bne.n	8012854 <HAL_RCC_OscConfig+0x350>
 801284e:	4bbc      	ldr	r3, [pc, #752]	; (8012b40 <HAL_RCC_OscConfig+0x63c>)
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	e013      	b.n	801287c <HAL_RCC_OscConfig+0x378>
 8012854:	2302      	movs	r3, #2
 8012856:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801285a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801285e:	fa93 f3a3 	rbit	r3, r3
 8012862:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8012866:	2302      	movs	r3, #2
 8012868:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 801286c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8012870:	fa93 f3a3 	rbit	r3, r3
 8012874:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8012878:	4bb1      	ldr	r3, [pc, #708]	; (8012b40 <HAL_RCC_OscConfig+0x63c>)
 801287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801287c:	2202      	movs	r2, #2
 801287e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8012882:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8012886:	fa92 f2a2 	rbit	r2, r2
 801288a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 801288e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8012892:	fab2 f282 	clz	r2, r2
 8012896:	b2d2      	uxtb	r2, r2
 8012898:	f042 0220 	orr.w	r2, r2, #32
 801289c:	b2d2      	uxtb	r2, r2
 801289e:	f002 021f 	and.w	r2, r2, #31
 80128a2:	2101      	movs	r1, #1
 80128a4:	fa01 f202 	lsl.w	r2, r1, r2
 80128a8:	4013      	ands	r3, r2
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d007      	beq.n	80128be <HAL_RCC_OscConfig+0x3ba>
 80128ae:	1d3b      	adds	r3, r7, #4
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	68db      	ldr	r3, [r3, #12]
 80128b4:	2b01      	cmp	r3, #1
 80128b6:	d002      	beq.n	80128be <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80128b8:	2301      	movs	r3, #1
 80128ba:	f000 bd31 	b.w	8013320 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80128be:	4ba0      	ldr	r3, [pc, #640]	; (8012b40 <HAL_RCC_OscConfig+0x63c>)
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80128c6:	1d3b      	adds	r3, r7, #4
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	691b      	ldr	r3, [r3, #16]
 80128cc:	21f8      	movs	r1, #248	; 0xf8
 80128ce:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80128d2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80128d6:	fa91 f1a1 	rbit	r1, r1
 80128da:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80128de:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80128e2:	fab1 f181 	clz	r1, r1
 80128e6:	b2c9      	uxtb	r1, r1
 80128e8:	408b      	lsls	r3, r1
 80128ea:	4995      	ldr	r1, [pc, #596]	; (8012b40 <HAL_RCC_OscConfig+0x63c>)
 80128ec:	4313      	orrs	r3, r2
 80128ee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80128f0:	e0f5      	b.n	8012ade <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80128f2:	1d3b      	adds	r3, r7, #4
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	68db      	ldr	r3, [r3, #12]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	f000 8085 	beq.w	8012a08 <HAL_RCC_OscConfig+0x504>
 80128fe:	2301      	movs	r3, #1
 8012900:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012904:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8012908:	fa93 f3a3 	rbit	r3, r3
 801290c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8012910:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012914:	fab3 f383 	clz	r3, r3
 8012918:	b2db      	uxtb	r3, r3
 801291a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 801291e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8012922:	009b      	lsls	r3, r3, #2
 8012924:	461a      	mov	r2, r3
 8012926:	2301      	movs	r3, #1
 8012928:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801292a:	f7fd fe0b 	bl	8010544 <HAL_GetTick>
 801292e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012932:	e00a      	b.n	801294a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012934:	f7fd fe06 	bl	8010544 <HAL_GetTick>
 8012938:	4602      	mov	r2, r0
 801293a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801293e:	1ad3      	subs	r3, r2, r3
 8012940:	2b02      	cmp	r3, #2
 8012942:	d902      	bls.n	801294a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8012944:	2303      	movs	r3, #3
 8012946:	f000 bceb 	b.w	8013320 <HAL_RCC_OscConfig+0xe1c>
 801294a:	2302      	movs	r3, #2
 801294c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012950:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8012954:	fa93 f3a3 	rbit	r3, r3
 8012958:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 801295c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012960:	fab3 f383 	clz	r3, r3
 8012964:	b2db      	uxtb	r3, r3
 8012966:	095b      	lsrs	r3, r3, #5
 8012968:	b2db      	uxtb	r3, r3
 801296a:	f043 0301 	orr.w	r3, r3, #1
 801296e:	b2db      	uxtb	r3, r3
 8012970:	2b01      	cmp	r3, #1
 8012972:	d102      	bne.n	801297a <HAL_RCC_OscConfig+0x476>
 8012974:	4b72      	ldr	r3, [pc, #456]	; (8012b40 <HAL_RCC_OscConfig+0x63c>)
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	e013      	b.n	80129a2 <HAL_RCC_OscConfig+0x49e>
 801297a:	2302      	movs	r3, #2
 801297c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012980:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8012984:	fa93 f3a3 	rbit	r3, r3
 8012988:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 801298c:	2302      	movs	r3, #2
 801298e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8012992:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8012996:	fa93 f3a3 	rbit	r3, r3
 801299a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 801299e:	4b68      	ldr	r3, [pc, #416]	; (8012b40 <HAL_RCC_OscConfig+0x63c>)
 80129a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129a2:	2202      	movs	r2, #2
 80129a4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80129a8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80129ac:	fa92 f2a2 	rbit	r2, r2
 80129b0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80129b4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80129b8:	fab2 f282 	clz	r2, r2
 80129bc:	b2d2      	uxtb	r2, r2
 80129be:	f042 0220 	orr.w	r2, r2, #32
 80129c2:	b2d2      	uxtb	r2, r2
 80129c4:	f002 021f 	and.w	r2, r2, #31
 80129c8:	2101      	movs	r1, #1
 80129ca:	fa01 f202 	lsl.w	r2, r1, r2
 80129ce:	4013      	ands	r3, r2
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d0af      	beq.n	8012934 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80129d4:	4b5a      	ldr	r3, [pc, #360]	; (8012b40 <HAL_RCC_OscConfig+0x63c>)
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80129dc:	1d3b      	adds	r3, r7, #4
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	691b      	ldr	r3, [r3, #16]
 80129e2:	21f8      	movs	r1, #248	; 0xf8
 80129e4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80129e8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80129ec:	fa91 f1a1 	rbit	r1, r1
 80129f0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80129f4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80129f8:	fab1 f181 	clz	r1, r1
 80129fc:	b2c9      	uxtb	r1, r1
 80129fe:	408b      	lsls	r3, r1
 8012a00:	494f      	ldr	r1, [pc, #316]	; (8012b40 <HAL_RCC_OscConfig+0x63c>)
 8012a02:	4313      	orrs	r3, r2
 8012a04:	600b      	str	r3, [r1, #0]
 8012a06:	e06a      	b.n	8012ade <HAL_RCC_OscConfig+0x5da>
 8012a08:	2301      	movs	r3, #1
 8012a0a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012a0e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8012a12:	fa93 f3a3 	rbit	r3, r3
 8012a16:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8012a1a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012a1e:	fab3 f383 	clz	r3, r3
 8012a22:	b2db      	uxtb	r3, r3
 8012a24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8012a28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8012a2c:	009b      	lsls	r3, r3, #2
 8012a2e:	461a      	mov	r2, r3
 8012a30:	2300      	movs	r3, #0
 8012a32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012a34:	f7fd fd86 	bl	8010544 <HAL_GetTick>
 8012a38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012a3c:	e00a      	b.n	8012a54 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012a3e:	f7fd fd81 	bl	8010544 <HAL_GetTick>
 8012a42:	4602      	mov	r2, r0
 8012a44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012a48:	1ad3      	subs	r3, r2, r3
 8012a4a:	2b02      	cmp	r3, #2
 8012a4c:	d902      	bls.n	8012a54 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8012a4e:	2303      	movs	r3, #3
 8012a50:	f000 bc66 	b.w	8013320 <HAL_RCC_OscConfig+0xe1c>
 8012a54:	2302      	movs	r3, #2
 8012a56:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012a5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012a5e:	fa93 f3a3 	rbit	r3, r3
 8012a62:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8012a66:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012a6a:	fab3 f383 	clz	r3, r3
 8012a6e:	b2db      	uxtb	r3, r3
 8012a70:	095b      	lsrs	r3, r3, #5
 8012a72:	b2db      	uxtb	r3, r3
 8012a74:	f043 0301 	orr.w	r3, r3, #1
 8012a78:	b2db      	uxtb	r3, r3
 8012a7a:	2b01      	cmp	r3, #1
 8012a7c:	d102      	bne.n	8012a84 <HAL_RCC_OscConfig+0x580>
 8012a7e:	4b30      	ldr	r3, [pc, #192]	; (8012b40 <HAL_RCC_OscConfig+0x63c>)
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	e013      	b.n	8012aac <HAL_RCC_OscConfig+0x5a8>
 8012a84:	2302      	movs	r3, #2
 8012a86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012a8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012a8e:	fa93 f3a3 	rbit	r3, r3
 8012a92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8012a96:	2302      	movs	r3, #2
 8012a98:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8012a9c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8012aa0:	fa93 f3a3 	rbit	r3, r3
 8012aa4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8012aa8:	4b25      	ldr	r3, [pc, #148]	; (8012b40 <HAL_RCC_OscConfig+0x63c>)
 8012aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012aac:	2202      	movs	r2, #2
 8012aae:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8012ab2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8012ab6:	fa92 f2a2 	rbit	r2, r2
 8012aba:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8012abe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8012ac2:	fab2 f282 	clz	r2, r2
 8012ac6:	b2d2      	uxtb	r2, r2
 8012ac8:	f042 0220 	orr.w	r2, r2, #32
 8012acc:	b2d2      	uxtb	r2, r2
 8012ace:	f002 021f 	and.w	r2, r2, #31
 8012ad2:	2101      	movs	r1, #1
 8012ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8012ad8:	4013      	ands	r3, r2
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d1af      	bne.n	8012a3e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012ade:	1d3b      	adds	r3, r7, #4
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	f003 0308 	and.w	r3, r3, #8
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	f000 80da 	beq.w	8012ca2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8012aee:	1d3b      	adds	r3, r7, #4
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	695b      	ldr	r3, [r3, #20]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d069      	beq.n	8012bcc <HAL_RCC_OscConfig+0x6c8>
 8012af8:	2301      	movs	r3, #1
 8012afa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8012b02:	fa93 f3a3 	rbit	r3, r3
 8012b06:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8012b0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012b0e:	fab3 f383 	clz	r3, r3
 8012b12:	b2db      	uxtb	r3, r3
 8012b14:	461a      	mov	r2, r3
 8012b16:	4b0b      	ldr	r3, [pc, #44]	; (8012b44 <HAL_RCC_OscConfig+0x640>)
 8012b18:	4413      	add	r3, r2
 8012b1a:	009b      	lsls	r3, r3, #2
 8012b1c:	461a      	mov	r2, r3
 8012b1e:	2301      	movs	r3, #1
 8012b20:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012b22:	f7fd fd0f 	bl	8010544 <HAL_GetTick>
 8012b26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012b2a:	e00d      	b.n	8012b48 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012b2c:	f7fd fd0a 	bl	8010544 <HAL_GetTick>
 8012b30:	4602      	mov	r2, r0
 8012b32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012b36:	1ad3      	subs	r3, r2, r3
 8012b38:	2b02      	cmp	r3, #2
 8012b3a:	d905      	bls.n	8012b48 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8012b3c:	2303      	movs	r3, #3
 8012b3e:	e3ef      	b.n	8013320 <HAL_RCC_OscConfig+0xe1c>
 8012b40:	40021000 	.word	0x40021000
 8012b44:	10908120 	.word	0x10908120
 8012b48:	2302      	movs	r3, #2
 8012b4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012b4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012b52:	fa93 f2a3 	rbit	r2, r3
 8012b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b5a:	601a      	str	r2, [r3, #0]
 8012b5c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8012b60:	2202      	movs	r2, #2
 8012b62:	601a      	str	r2, [r3, #0]
 8012b64:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	fa93 f2a3 	rbit	r2, r3
 8012b6e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8012b72:	601a      	str	r2, [r3, #0]
 8012b74:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8012b78:	2202      	movs	r2, #2
 8012b7a:	601a      	str	r2, [r3, #0]
 8012b7c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	fa93 f2a3 	rbit	r2, r3
 8012b86:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8012b8a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012b8c:	4ba4      	ldr	r3, [pc, #656]	; (8012e20 <HAL_RCC_OscConfig+0x91c>)
 8012b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012b90:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8012b94:	2102      	movs	r1, #2
 8012b96:	6019      	str	r1, [r3, #0]
 8012b98:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	fa93 f1a3 	rbit	r1, r3
 8012ba2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8012ba6:	6019      	str	r1, [r3, #0]
  return result;
 8012ba8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	fab3 f383 	clz	r3, r3
 8012bb2:	b2db      	uxtb	r3, r3
 8012bb4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8012bb8:	b2db      	uxtb	r3, r3
 8012bba:	f003 031f 	and.w	r3, r3, #31
 8012bbe:	2101      	movs	r1, #1
 8012bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8012bc4:	4013      	ands	r3, r2
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d0b0      	beq.n	8012b2c <HAL_RCC_OscConfig+0x628>
 8012bca:	e06a      	b.n	8012ca2 <HAL_RCC_OscConfig+0x79e>
 8012bcc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8012bd0:	2201      	movs	r2, #1
 8012bd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012bd4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	fa93 f2a3 	rbit	r2, r3
 8012bde:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8012be2:	601a      	str	r2, [r3, #0]
  return result;
 8012be4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8012be8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012bea:	fab3 f383 	clz	r3, r3
 8012bee:	b2db      	uxtb	r3, r3
 8012bf0:	461a      	mov	r2, r3
 8012bf2:	4b8c      	ldr	r3, [pc, #560]	; (8012e24 <HAL_RCC_OscConfig+0x920>)
 8012bf4:	4413      	add	r3, r2
 8012bf6:	009b      	lsls	r3, r3, #2
 8012bf8:	461a      	mov	r2, r3
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012bfe:	f7fd fca1 	bl	8010544 <HAL_GetTick>
 8012c02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012c06:	e009      	b.n	8012c1c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012c08:	f7fd fc9c 	bl	8010544 <HAL_GetTick>
 8012c0c:	4602      	mov	r2, r0
 8012c0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012c12:	1ad3      	subs	r3, r2, r3
 8012c14:	2b02      	cmp	r3, #2
 8012c16:	d901      	bls.n	8012c1c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8012c18:	2303      	movs	r3, #3
 8012c1a:	e381      	b.n	8013320 <HAL_RCC_OscConfig+0xe1c>
 8012c1c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8012c20:	2202      	movs	r2, #2
 8012c22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012c24:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	fa93 f2a3 	rbit	r2, r3
 8012c2e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8012c32:	601a      	str	r2, [r3, #0]
 8012c34:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8012c38:	2202      	movs	r2, #2
 8012c3a:	601a      	str	r2, [r3, #0]
 8012c3c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	fa93 f2a3 	rbit	r2, r3
 8012c46:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8012c4a:	601a      	str	r2, [r3, #0]
 8012c4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8012c50:	2202      	movs	r2, #2
 8012c52:	601a      	str	r2, [r3, #0]
 8012c54:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	fa93 f2a3 	rbit	r2, r3
 8012c5e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8012c62:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012c64:	4b6e      	ldr	r3, [pc, #440]	; (8012e20 <HAL_RCC_OscConfig+0x91c>)
 8012c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012c6c:	2102      	movs	r1, #2
 8012c6e:	6019      	str	r1, [r3, #0]
 8012c70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	fa93 f1a3 	rbit	r1, r3
 8012c7a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8012c7e:	6019      	str	r1, [r3, #0]
  return result;
 8012c80:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	fab3 f383 	clz	r3, r3
 8012c8a:	b2db      	uxtb	r3, r3
 8012c8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8012c90:	b2db      	uxtb	r3, r3
 8012c92:	f003 031f 	and.w	r3, r3, #31
 8012c96:	2101      	movs	r1, #1
 8012c98:	fa01 f303 	lsl.w	r3, r1, r3
 8012c9c:	4013      	ands	r3, r2
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d1b2      	bne.n	8012c08 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012ca2:	1d3b      	adds	r3, r7, #4
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	f003 0304 	and.w	r3, r3, #4
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	f000 8157 	beq.w	8012f60 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012cb8:	4b59      	ldr	r3, [pc, #356]	; (8012e20 <HAL_RCC_OscConfig+0x91c>)
 8012cba:	69db      	ldr	r3, [r3, #28]
 8012cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d112      	bne.n	8012cea <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012cc4:	4b56      	ldr	r3, [pc, #344]	; (8012e20 <HAL_RCC_OscConfig+0x91c>)
 8012cc6:	69db      	ldr	r3, [r3, #28]
 8012cc8:	4a55      	ldr	r2, [pc, #340]	; (8012e20 <HAL_RCC_OscConfig+0x91c>)
 8012cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012cce:	61d3      	str	r3, [r2, #28]
 8012cd0:	4b53      	ldr	r3, [pc, #332]	; (8012e20 <HAL_RCC_OscConfig+0x91c>)
 8012cd2:	69db      	ldr	r3, [r3, #28]
 8012cd4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8012cd8:	f107 030c 	add.w	r3, r7, #12
 8012cdc:	601a      	str	r2, [r3, #0]
 8012cde:	f107 030c 	add.w	r3, r7, #12
 8012ce2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8012ce4:	2301      	movs	r3, #1
 8012ce6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012cea:	4b4f      	ldr	r3, [pc, #316]	; (8012e28 <HAL_RCC_OscConfig+0x924>)
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d11a      	bne.n	8012d2c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012cf6:	4b4c      	ldr	r3, [pc, #304]	; (8012e28 <HAL_RCC_OscConfig+0x924>)
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	4a4b      	ldr	r2, [pc, #300]	; (8012e28 <HAL_RCC_OscConfig+0x924>)
 8012cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012d00:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012d02:	f7fd fc1f 	bl	8010544 <HAL_GetTick>
 8012d06:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012d0a:	e009      	b.n	8012d20 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012d0c:	f7fd fc1a 	bl	8010544 <HAL_GetTick>
 8012d10:	4602      	mov	r2, r0
 8012d12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012d16:	1ad3      	subs	r3, r2, r3
 8012d18:	2b64      	cmp	r3, #100	; 0x64
 8012d1a:	d901      	bls.n	8012d20 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8012d1c:	2303      	movs	r3, #3
 8012d1e:	e2ff      	b.n	8013320 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012d20:	4b41      	ldr	r3, [pc, #260]	; (8012e28 <HAL_RCC_OscConfig+0x924>)
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d0ef      	beq.n	8012d0c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012d2c:	1d3b      	adds	r3, r7, #4
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	689b      	ldr	r3, [r3, #8]
 8012d32:	2b01      	cmp	r3, #1
 8012d34:	d106      	bne.n	8012d44 <HAL_RCC_OscConfig+0x840>
 8012d36:	4b3a      	ldr	r3, [pc, #232]	; (8012e20 <HAL_RCC_OscConfig+0x91c>)
 8012d38:	6a1b      	ldr	r3, [r3, #32]
 8012d3a:	4a39      	ldr	r2, [pc, #228]	; (8012e20 <HAL_RCC_OscConfig+0x91c>)
 8012d3c:	f043 0301 	orr.w	r3, r3, #1
 8012d40:	6213      	str	r3, [r2, #32]
 8012d42:	e02f      	b.n	8012da4 <HAL_RCC_OscConfig+0x8a0>
 8012d44:	1d3b      	adds	r3, r7, #4
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	689b      	ldr	r3, [r3, #8]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d10c      	bne.n	8012d68 <HAL_RCC_OscConfig+0x864>
 8012d4e:	4b34      	ldr	r3, [pc, #208]	; (8012e20 <HAL_RCC_OscConfig+0x91c>)
 8012d50:	6a1b      	ldr	r3, [r3, #32]
 8012d52:	4a33      	ldr	r2, [pc, #204]	; (8012e20 <HAL_RCC_OscConfig+0x91c>)
 8012d54:	f023 0301 	bic.w	r3, r3, #1
 8012d58:	6213      	str	r3, [r2, #32]
 8012d5a:	4b31      	ldr	r3, [pc, #196]	; (8012e20 <HAL_RCC_OscConfig+0x91c>)
 8012d5c:	6a1b      	ldr	r3, [r3, #32]
 8012d5e:	4a30      	ldr	r2, [pc, #192]	; (8012e20 <HAL_RCC_OscConfig+0x91c>)
 8012d60:	f023 0304 	bic.w	r3, r3, #4
 8012d64:	6213      	str	r3, [r2, #32]
 8012d66:	e01d      	b.n	8012da4 <HAL_RCC_OscConfig+0x8a0>
 8012d68:	1d3b      	adds	r3, r7, #4
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	689b      	ldr	r3, [r3, #8]
 8012d6e:	2b05      	cmp	r3, #5
 8012d70:	d10c      	bne.n	8012d8c <HAL_RCC_OscConfig+0x888>
 8012d72:	4b2b      	ldr	r3, [pc, #172]	; (8012e20 <HAL_RCC_OscConfig+0x91c>)
 8012d74:	6a1b      	ldr	r3, [r3, #32]
 8012d76:	4a2a      	ldr	r2, [pc, #168]	; (8012e20 <HAL_RCC_OscConfig+0x91c>)
 8012d78:	f043 0304 	orr.w	r3, r3, #4
 8012d7c:	6213      	str	r3, [r2, #32]
 8012d7e:	4b28      	ldr	r3, [pc, #160]	; (8012e20 <HAL_RCC_OscConfig+0x91c>)
 8012d80:	6a1b      	ldr	r3, [r3, #32]
 8012d82:	4a27      	ldr	r2, [pc, #156]	; (8012e20 <HAL_RCC_OscConfig+0x91c>)
 8012d84:	f043 0301 	orr.w	r3, r3, #1
 8012d88:	6213      	str	r3, [r2, #32]
 8012d8a:	e00b      	b.n	8012da4 <HAL_RCC_OscConfig+0x8a0>
 8012d8c:	4b24      	ldr	r3, [pc, #144]	; (8012e20 <HAL_RCC_OscConfig+0x91c>)
 8012d8e:	6a1b      	ldr	r3, [r3, #32]
 8012d90:	4a23      	ldr	r2, [pc, #140]	; (8012e20 <HAL_RCC_OscConfig+0x91c>)
 8012d92:	f023 0301 	bic.w	r3, r3, #1
 8012d96:	6213      	str	r3, [r2, #32]
 8012d98:	4b21      	ldr	r3, [pc, #132]	; (8012e20 <HAL_RCC_OscConfig+0x91c>)
 8012d9a:	6a1b      	ldr	r3, [r3, #32]
 8012d9c:	4a20      	ldr	r2, [pc, #128]	; (8012e20 <HAL_RCC_OscConfig+0x91c>)
 8012d9e:	f023 0304 	bic.w	r3, r3, #4
 8012da2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8012da4:	1d3b      	adds	r3, r7, #4
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	689b      	ldr	r3, [r3, #8]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d06a      	beq.n	8012e84 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012dae:	f7fd fbc9 	bl	8010544 <HAL_GetTick>
 8012db2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012db6:	e00b      	b.n	8012dd0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012db8:	f7fd fbc4 	bl	8010544 <HAL_GetTick>
 8012dbc:	4602      	mov	r2, r0
 8012dbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012dc2:	1ad3      	subs	r3, r2, r3
 8012dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012dc8:	4293      	cmp	r3, r2
 8012dca:	d901      	bls.n	8012dd0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8012dcc:	2303      	movs	r3, #3
 8012dce:	e2a7      	b.n	8013320 <HAL_RCC_OscConfig+0xe1c>
 8012dd0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8012dd4:	2202      	movs	r2, #2
 8012dd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012dd8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	fa93 f2a3 	rbit	r2, r3
 8012de2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8012de6:	601a      	str	r2, [r3, #0]
 8012de8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8012dec:	2202      	movs	r2, #2
 8012dee:	601a      	str	r2, [r3, #0]
 8012df0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	fa93 f2a3 	rbit	r2, r3
 8012dfa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8012dfe:	601a      	str	r2, [r3, #0]
  return result;
 8012e00:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8012e04:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012e06:	fab3 f383 	clz	r3, r3
 8012e0a:	b2db      	uxtb	r3, r3
 8012e0c:	095b      	lsrs	r3, r3, #5
 8012e0e:	b2db      	uxtb	r3, r3
 8012e10:	f043 0302 	orr.w	r3, r3, #2
 8012e14:	b2db      	uxtb	r3, r3
 8012e16:	2b02      	cmp	r3, #2
 8012e18:	d108      	bne.n	8012e2c <HAL_RCC_OscConfig+0x928>
 8012e1a:	4b01      	ldr	r3, [pc, #4]	; (8012e20 <HAL_RCC_OscConfig+0x91c>)
 8012e1c:	6a1b      	ldr	r3, [r3, #32]
 8012e1e:	e013      	b.n	8012e48 <HAL_RCC_OscConfig+0x944>
 8012e20:	40021000 	.word	0x40021000
 8012e24:	10908120 	.word	0x10908120
 8012e28:	40007000 	.word	0x40007000
 8012e2c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012e30:	2202      	movs	r2, #2
 8012e32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012e34:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	fa93 f2a3 	rbit	r2, r3
 8012e3e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012e42:	601a      	str	r2, [r3, #0]
 8012e44:	4bc0      	ldr	r3, [pc, #768]	; (8013148 <HAL_RCC_OscConfig+0xc44>)
 8012e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e48:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8012e4c:	2102      	movs	r1, #2
 8012e4e:	6011      	str	r1, [r2, #0]
 8012e50:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8012e54:	6812      	ldr	r2, [r2, #0]
 8012e56:	fa92 f1a2 	rbit	r1, r2
 8012e5a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8012e5e:	6011      	str	r1, [r2, #0]
  return result;
 8012e60:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8012e64:	6812      	ldr	r2, [r2, #0]
 8012e66:	fab2 f282 	clz	r2, r2
 8012e6a:	b2d2      	uxtb	r2, r2
 8012e6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012e70:	b2d2      	uxtb	r2, r2
 8012e72:	f002 021f 	and.w	r2, r2, #31
 8012e76:	2101      	movs	r1, #1
 8012e78:	fa01 f202 	lsl.w	r2, r1, r2
 8012e7c:	4013      	ands	r3, r2
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d09a      	beq.n	8012db8 <HAL_RCC_OscConfig+0x8b4>
 8012e82:	e063      	b.n	8012f4c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012e84:	f7fd fb5e 	bl	8010544 <HAL_GetTick>
 8012e88:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012e8c:	e00b      	b.n	8012ea6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012e8e:	f7fd fb59 	bl	8010544 <HAL_GetTick>
 8012e92:	4602      	mov	r2, r0
 8012e94:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012e98:	1ad3      	subs	r3, r2, r3
 8012e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e9e:	4293      	cmp	r3, r2
 8012ea0:	d901      	bls.n	8012ea6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8012ea2:	2303      	movs	r3, #3
 8012ea4:	e23c      	b.n	8013320 <HAL_RCC_OscConfig+0xe1c>
 8012ea6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8012eaa:	2202      	movs	r2, #2
 8012eac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012eae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	fa93 f2a3 	rbit	r2, r3
 8012eb8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8012ebc:	601a      	str	r2, [r3, #0]
 8012ebe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012ec2:	2202      	movs	r2, #2
 8012ec4:	601a      	str	r2, [r3, #0]
 8012ec6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	fa93 f2a3 	rbit	r2, r3
 8012ed0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8012ed4:	601a      	str	r2, [r3, #0]
  return result;
 8012ed6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8012eda:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012edc:	fab3 f383 	clz	r3, r3
 8012ee0:	b2db      	uxtb	r3, r3
 8012ee2:	095b      	lsrs	r3, r3, #5
 8012ee4:	b2db      	uxtb	r3, r3
 8012ee6:	f043 0302 	orr.w	r3, r3, #2
 8012eea:	b2db      	uxtb	r3, r3
 8012eec:	2b02      	cmp	r3, #2
 8012eee:	d102      	bne.n	8012ef6 <HAL_RCC_OscConfig+0x9f2>
 8012ef0:	4b95      	ldr	r3, [pc, #596]	; (8013148 <HAL_RCC_OscConfig+0xc44>)
 8012ef2:	6a1b      	ldr	r3, [r3, #32]
 8012ef4:	e00d      	b.n	8012f12 <HAL_RCC_OscConfig+0xa0e>
 8012ef6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8012efa:	2202      	movs	r2, #2
 8012efc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012efe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	fa93 f2a3 	rbit	r2, r3
 8012f08:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8012f0c:	601a      	str	r2, [r3, #0]
 8012f0e:	4b8e      	ldr	r3, [pc, #568]	; (8013148 <HAL_RCC_OscConfig+0xc44>)
 8012f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f12:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8012f16:	2102      	movs	r1, #2
 8012f18:	6011      	str	r1, [r2, #0]
 8012f1a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8012f1e:	6812      	ldr	r2, [r2, #0]
 8012f20:	fa92 f1a2 	rbit	r1, r2
 8012f24:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8012f28:	6011      	str	r1, [r2, #0]
  return result;
 8012f2a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8012f2e:	6812      	ldr	r2, [r2, #0]
 8012f30:	fab2 f282 	clz	r2, r2
 8012f34:	b2d2      	uxtb	r2, r2
 8012f36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012f3a:	b2d2      	uxtb	r2, r2
 8012f3c:	f002 021f 	and.w	r2, r2, #31
 8012f40:	2101      	movs	r1, #1
 8012f42:	fa01 f202 	lsl.w	r2, r1, r2
 8012f46:	4013      	ands	r3, r2
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d1a0      	bne.n	8012e8e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8012f4c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8012f50:	2b01      	cmp	r3, #1
 8012f52:	d105      	bne.n	8012f60 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012f54:	4b7c      	ldr	r3, [pc, #496]	; (8013148 <HAL_RCC_OscConfig+0xc44>)
 8012f56:	69db      	ldr	r3, [r3, #28]
 8012f58:	4a7b      	ldr	r2, [pc, #492]	; (8013148 <HAL_RCC_OscConfig+0xc44>)
 8012f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012f5e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012f60:	1d3b      	adds	r3, r7, #4
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	699b      	ldr	r3, [r3, #24]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	f000 81d9 	beq.w	801331e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012f6c:	4b76      	ldr	r3, [pc, #472]	; (8013148 <HAL_RCC_OscConfig+0xc44>)
 8012f6e:	685b      	ldr	r3, [r3, #4]
 8012f70:	f003 030c 	and.w	r3, r3, #12
 8012f74:	2b08      	cmp	r3, #8
 8012f76:	f000 81a6 	beq.w	80132c6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012f7a:	1d3b      	adds	r3, r7, #4
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	699b      	ldr	r3, [r3, #24]
 8012f80:	2b02      	cmp	r3, #2
 8012f82:	f040 811e 	bne.w	80131c2 <HAL_RCC_OscConfig+0xcbe>
 8012f86:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012f8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012f8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012f90:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	fa93 f2a3 	rbit	r2, r3
 8012f9a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012f9e:	601a      	str	r2, [r3, #0]
  return result;
 8012fa0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012fa4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012fa6:	fab3 f383 	clz	r3, r3
 8012faa:	b2db      	uxtb	r3, r3
 8012fac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8012fb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8012fb4:	009b      	lsls	r3, r3, #2
 8012fb6:	461a      	mov	r2, r3
 8012fb8:	2300      	movs	r3, #0
 8012fba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012fbc:	f7fd fac2 	bl	8010544 <HAL_GetTick>
 8012fc0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8012fc4:	e009      	b.n	8012fda <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012fc6:	f7fd fabd 	bl	8010544 <HAL_GetTick>
 8012fca:	4602      	mov	r2, r0
 8012fcc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012fd0:	1ad3      	subs	r3, r2, r3
 8012fd2:	2b02      	cmp	r3, #2
 8012fd4:	d901      	bls.n	8012fda <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8012fd6:	2303      	movs	r3, #3
 8012fd8:	e1a2      	b.n	8013320 <HAL_RCC_OscConfig+0xe1c>
 8012fda:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8012fde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8012fe2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012fe4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	fa93 f2a3 	rbit	r2, r3
 8012fee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012ff2:	601a      	str	r2, [r3, #0]
  return result;
 8012ff4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012ff8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8012ffa:	fab3 f383 	clz	r3, r3
 8012ffe:	b2db      	uxtb	r3, r3
 8013000:	095b      	lsrs	r3, r3, #5
 8013002:	b2db      	uxtb	r3, r3
 8013004:	f043 0301 	orr.w	r3, r3, #1
 8013008:	b2db      	uxtb	r3, r3
 801300a:	2b01      	cmp	r3, #1
 801300c:	d102      	bne.n	8013014 <HAL_RCC_OscConfig+0xb10>
 801300e:	4b4e      	ldr	r3, [pc, #312]	; (8013148 <HAL_RCC_OscConfig+0xc44>)
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	e01b      	b.n	801304c <HAL_RCC_OscConfig+0xb48>
 8013014:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013018:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801301c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801301e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	fa93 f2a3 	rbit	r2, r3
 8013028:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801302c:	601a      	str	r2, [r3, #0]
 801302e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013032:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8013036:	601a      	str	r2, [r3, #0]
 8013038:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	fa93 f2a3 	rbit	r2, r3
 8013042:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013046:	601a      	str	r2, [r3, #0]
 8013048:	4b3f      	ldr	r3, [pc, #252]	; (8013148 <HAL_RCC_OscConfig+0xc44>)
 801304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801304c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8013050:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8013054:	6011      	str	r1, [r2, #0]
 8013056:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801305a:	6812      	ldr	r2, [r2, #0]
 801305c:	fa92 f1a2 	rbit	r1, r2
 8013060:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8013064:	6011      	str	r1, [r2, #0]
  return result;
 8013066:	f107 0260 	add.w	r2, r7, #96	; 0x60
 801306a:	6812      	ldr	r2, [r2, #0]
 801306c:	fab2 f282 	clz	r2, r2
 8013070:	b2d2      	uxtb	r2, r2
 8013072:	f042 0220 	orr.w	r2, r2, #32
 8013076:	b2d2      	uxtb	r2, r2
 8013078:	f002 021f 	and.w	r2, r2, #31
 801307c:	2101      	movs	r1, #1
 801307e:	fa01 f202 	lsl.w	r2, r1, r2
 8013082:	4013      	ands	r3, r2
 8013084:	2b00      	cmp	r3, #0
 8013086:	d19e      	bne.n	8012fc6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8013088:	4b2f      	ldr	r3, [pc, #188]	; (8013148 <HAL_RCC_OscConfig+0xc44>)
 801308a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801308c:	f023 020f 	bic.w	r2, r3, #15
 8013090:	1d3b      	adds	r3, r7, #4
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013096:	492c      	ldr	r1, [pc, #176]	; (8013148 <HAL_RCC_OscConfig+0xc44>)
 8013098:	4313      	orrs	r3, r2
 801309a:	62cb      	str	r3, [r1, #44]	; 0x2c
 801309c:	4b2a      	ldr	r3, [pc, #168]	; (8013148 <HAL_RCC_OscConfig+0xc44>)
 801309e:	685b      	ldr	r3, [r3, #4]
 80130a0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80130a4:	1d3b      	adds	r3, r7, #4
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	6a19      	ldr	r1, [r3, #32]
 80130aa:	1d3b      	adds	r3, r7, #4
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	69db      	ldr	r3, [r3, #28]
 80130b0:	430b      	orrs	r3, r1
 80130b2:	4925      	ldr	r1, [pc, #148]	; (8013148 <HAL_RCC_OscConfig+0xc44>)
 80130b4:	4313      	orrs	r3, r2
 80130b6:	604b      	str	r3, [r1, #4]
 80130b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80130bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80130c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80130c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	fa93 f2a3 	rbit	r2, r3
 80130cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80130d0:	601a      	str	r2, [r3, #0]
  return result;
 80130d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80130d6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80130d8:	fab3 f383 	clz	r3, r3
 80130dc:	b2db      	uxtb	r3, r3
 80130de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80130e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80130e6:	009b      	lsls	r3, r3, #2
 80130e8:	461a      	mov	r2, r3
 80130ea:	2301      	movs	r3, #1
 80130ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80130ee:	f7fd fa29 	bl	8010544 <HAL_GetTick>
 80130f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80130f6:	e009      	b.n	801310c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80130f8:	f7fd fa24 	bl	8010544 <HAL_GetTick>
 80130fc:	4602      	mov	r2, r0
 80130fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8013102:	1ad3      	subs	r3, r2, r3
 8013104:	2b02      	cmp	r3, #2
 8013106:	d901      	bls.n	801310c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8013108:	2303      	movs	r3, #3
 801310a:	e109      	b.n	8013320 <HAL_RCC_OscConfig+0xe1c>
 801310c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013110:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8013114:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013116:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	fa93 f2a3 	rbit	r2, r3
 8013120:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013124:	601a      	str	r2, [r3, #0]
  return result;
 8013126:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801312a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801312c:	fab3 f383 	clz	r3, r3
 8013130:	b2db      	uxtb	r3, r3
 8013132:	095b      	lsrs	r3, r3, #5
 8013134:	b2db      	uxtb	r3, r3
 8013136:	f043 0301 	orr.w	r3, r3, #1
 801313a:	b2db      	uxtb	r3, r3
 801313c:	2b01      	cmp	r3, #1
 801313e:	d105      	bne.n	801314c <HAL_RCC_OscConfig+0xc48>
 8013140:	4b01      	ldr	r3, [pc, #4]	; (8013148 <HAL_RCC_OscConfig+0xc44>)
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	e01e      	b.n	8013184 <HAL_RCC_OscConfig+0xc80>
 8013146:	bf00      	nop
 8013148:	40021000 	.word	0x40021000
 801314c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013150:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8013154:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013156:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	fa93 f2a3 	rbit	r2, r3
 8013160:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013164:	601a      	str	r2, [r3, #0]
 8013166:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801316a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801316e:	601a      	str	r2, [r3, #0]
 8013170:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	fa93 f2a3 	rbit	r2, r3
 801317a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801317e:	601a      	str	r2, [r3, #0]
 8013180:	4b6a      	ldr	r3, [pc, #424]	; (801332c <HAL_RCC_OscConfig+0xe28>)
 8013182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013184:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8013188:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 801318c:	6011      	str	r1, [r2, #0]
 801318e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8013192:	6812      	ldr	r2, [r2, #0]
 8013194:	fa92 f1a2 	rbit	r1, r2
 8013198:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801319c:	6011      	str	r1, [r2, #0]
  return result;
 801319e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80131a2:	6812      	ldr	r2, [r2, #0]
 80131a4:	fab2 f282 	clz	r2, r2
 80131a8:	b2d2      	uxtb	r2, r2
 80131aa:	f042 0220 	orr.w	r2, r2, #32
 80131ae:	b2d2      	uxtb	r2, r2
 80131b0:	f002 021f 	and.w	r2, r2, #31
 80131b4:	2101      	movs	r1, #1
 80131b6:	fa01 f202 	lsl.w	r2, r1, r2
 80131ba:	4013      	ands	r3, r2
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d09b      	beq.n	80130f8 <HAL_RCC_OscConfig+0xbf4>
 80131c0:	e0ad      	b.n	801331e <HAL_RCC_OscConfig+0xe1a>
 80131c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80131c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80131ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80131cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	fa93 f2a3 	rbit	r2, r3
 80131d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80131da:	601a      	str	r2, [r3, #0]
  return result;
 80131dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80131e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80131e2:	fab3 f383 	clz	r3, r3
 80131e6:	b2db      	uxtb	r3, r3
 80131e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80131ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80131f0:	009b      	lsls	r3, r3, #2
 80131f2:	461a      	mov	r2, r3
 80131f4:	2300      	movs	r3, #0
 80131f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80131f8:	f7fd f9a4 	bl	8010544 <HAL_GetTick>
 80131fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8013200:	e009      	b.n	8013216 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013202:	f7fd f99f 	bl	8010544 <HAL_GetTick>
 8013206:	4602      	mov	r2, r0
 8013208:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801320c:	1ad3      	subs	r3, r2, r3
 801320e:	2b02      	cmp	r3, #2
 8013210:	d901      	bls.n	8013216 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8013212:	2303      	movs	r3, #3
 8013214:	e084      	b.n	8013320 <HAL_RCC_OscConfig+0xe1c>
 8013216:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801321a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801321e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	fa93 f2a3 	rbit	r2, r3
 801322a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801322e:	601a      	str	r2, [r3, #0]
  return result;
 8013230:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013234:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8013236:	fab3 f383 	clz	r3, r3
 801323a:	b2db      	uxtb	r3, r3
 801323c:	095b      	lsrs	r3, r3, #5
 801323e:	b2db      	uxtb	r3, r3
 8013240:	f043 0301 	orr.w	r3, r3, #1
 8013244:	b2db      	uxtb	r3, r3
 8013246:	2b01      	cmp	r3, #1
 8013248:	d102      	bne.n	8013250 <HAL_RCC_OscConfig+0xd4c>
 801324a:	4b38      	ldr	r3, [pc, #224]	; (801332c <HAL_RCC_OscConfig+0xe28>)
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	e01b      	b.n	8013288 <HAL_RCC_OscConfig+0xd84>
 8013250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013254:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8013258:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801325a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	fa93 f2a3 	rbit	r2, r3
 8013264:	f107 0320 	add.w	r3, r7, #32
 8013268:	601a      	str	r2, [r3, #0]
 801326a:	f107 031c 	add.w	r3, r7, #28
 801326e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8013272:	601a      	str	r2, [r3, #0]
 8013274:	f107 031c 	add.w	r3, r7, #28
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	fa93 f2a3 	rbit	r2, r3
 801327e:	f107 0318 	add.w	r3, r7, #24
 8013282:	601a      	str	r2, [r3, #0]
 8013284:	4b29      	ldr	r3, [pc, #164]	; (801332c <HAL_RCC_OscConfig+0xe28>)
 8013286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013288:	f107 0214 	add.w	r2, r7, #20
 801328c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8013290:	6011      	str	r1, [r2, #0]
 8013292:	f107 0214 	add.w	r2, r7, #20
 8013296:	6812      	ldr	r2, [r2, #0]
 8013298:	fa92 f1a2 	rbit	r1, r2
 801329c:	f107 0210 	add.w	r2, r7, #16
 80132a0:	6011      	str	r1, [r2, #0]
  return result;
 80132a2:	f107 0210 	add.w	r2, r7, #16
 80132a6:	6812      	ldr	r2, [r2, #0]
 80132a8:	fab2 f282 	clz	r2, r2
 80132ac:	b2d2      	uxtb	r2, r2
 80132ae:	f042 0220 	orr.w	r2, r2, #32
 80132b2:	b2d2      	uxtb	r2, r2
 80132b4:	f002 021f 	and.w	r2, r2, #31
 80132b8:	2101      	movs	r1, #1
 80132ba:	fa01 f202 	lsl.w	r2, r1, r2
 80132be:	4013      	ands	r3, r2
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d19e      	bne.n	8013202 <HAL_RCC_OscConfig+0xcfe>
 80132c4:	e02b      	b.n	801331e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80132c6:	1d3b      	adds	r3, r7, #4
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	699b      	ldr	r3, [r3, #24]
 80132cc:	2b01      	cmp	r3, #1
 80132ce:	d101      	bne.n	80132d4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80132d0:	2301      	movs	r3, #1
 80132d2:	e025      	b.n	8013320 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80132d4:	4b15      	ldr	r3, [pc, #84]	; (801332c <HAL_RCC_OscConfig+0xe28>)
 80132d6:	685b      	ldr	r3, [r3, #4]
 80132d8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80132dc:	4b13      	ldr	r3, [pc, #76]	; (801332c <HAL_RCC_OscConfig+0xe28>)
 80132de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132e0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80132e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80132e8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80132ec:	1d3b      	adds	r3, r7, #4
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	69db      	ldr	r3, [r3, #28]
 80132f2:	429a      	cmp	r2, r3
 80132f4:	d111      	bne.n	801331a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80132f6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80132fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80132fe:	1d3b      	adds	r3, r7, #4
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8013304:	429a      	cmp	r2, r3
 8013306:	d108      	bne.n	801331a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8013308:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801330c:	f003 020f 	and.w	r2, r3, #15
 8013310:	1d3b      	adds	r3, r7, #4
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8013316:	429a      	cmp	r2, r3
 8013318:	d001      	beq.n	801331e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 801331a:	2301      	movs	r3, #1
 801331c:	e000      	b.n	8013320 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 801331e:	2300      	movs	r3, #0
}
 8013320:	4618      	mov	r0, r3
 8013322:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8013326:	46bd      	mov	sp, r7
 8013328:	bd80      	pop	{r7, pc}
 801332a:	bf00      	nop
 801332c:	40021000 	.word	0x40021000

08013330 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013330:	b580      	push	{r7, lr}
 8013332:	b09e      	sub	sp, #120	; 0x78
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
 8013338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 801333a:	2300      	movs	r3, #0
 801333c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d101      	bne.n	8013348 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8013344:	2301      	movs	r3, #1
 8013346:	e162      	b.n	801360e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013348:	4b90      	ldr	r3, [pc, #576]	; (801358c <HAL_RCC_ClockConfig+0x25c>)
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	f003 0307 	and.w	r3, r3, #7
 8013350:	683a      	ldr	r2, [r7, #0]
 8013352:	429a      	cmp	r2, r3
 8013354:	d910      	bls.n	8013378 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013356:	4b8d      	ldr	r3, [pc, #564]	; (801358c <HAL_RCC_ClockConfig+0x25c>)
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	f023 0207 	bic.w	r2, r3, #7
 801335e:	498b      	ldr	r1, [pc, #556]	; (801358c <HAL_RCC_ClockConfig+0x25c>)
 8013360:	683b      	ldr	r3, [r7, #0]
 8013362:	4313      	orrs	r3, r2
 8013364:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013366:	4b89      	ldr	r3, [pc, #548]	; (801358c <HAL_RCC_ClockConfig+0x25c>)
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	f003 0307 	and.w	r3, r3, #7
 801336e:	683a      	ldr	r2, [r7, #0]
 8013370:	429a      	cmp	r2, r3
 8013372:	d001      	beq.n	8013378 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8013374:	2301      	movs	r3, #1
 8013376:	e14a      	b.n	801360e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	f003 0302 	and.w	r3, r3, #2
 8013380:	2b00      	cmp	r3, #0
 8013382:	d008      	beq.n	8013396 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013384:	4b82      	ldr	r3, [pc, #520]	; (8013590 <HAL_RCC_ClockConfig+0x260>)
 8013386:	685b      	ldr	r3, [r3, #4]
 8013388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	689b      	ldr	r3, [r3, #8]
 8013390:	497f      	ldr	r1, [pc, #508]	; (8013590 <HAL_RCC_ClockConfig+0x260>)
 8013392:	4313      	orrs	r3, r2
 8013394:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	f003 0301 	and.w	r3, r3, #1
 801339e:	2b00      	cmp	r3, #0
 80133a0:	f000 80dc 	beq.w	801355c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	685b      	ldr	r3, [r3, #4]
 80133a8:	2b01      	cmp	r3, #1
 80133aa:	d13c      	bne.n	8013426 <HAL_RCC_ClockConfig+0xf6>
 80133ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80133b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80133b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80133b4:	fa93 f3a3 	rbit	r3, r3
 80133b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80133ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80133bc:	fab3 f383 	clz	r3, r3
 80133c0:	b2db      	uxtb	r3, r3
 80133c2:	095b      	lsrs	r3, r3, #5
 80133c4:	b2db      	uxtb	r3, r3
 80133c6:	f043 0301 	orr.w	r3, r3, #1
 80133ca:	b2db      	uxtb	r3, r3
 80133cc:	2b01      	cmp	r3, #1
 80133ce:	d102      	bne.n	80133d6 <HAL_RCC_ClockConfig+0xa6>
 80133d0:	4b6f      	ldr	r3, [pc, #444]	; (8013590 <HAL_RCC_ClockConfig+0x260>)
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	e00f      	b.n	80133f6 <HAL_RCC_ClockConfig+0xc6>
 80133d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80133da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80133dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80133de:	fa93 f3a3 	rbit	r3, r3
 80133e2:	667b      	str	r3, [r7, #100]	; 0x64
 80133e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80133e8:	663b      	str	r3, [r7, #96]	; 0x60
 80133ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80133ec:	fa93 f3a3 	rbit	r3, r3
 80133f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80133f2:	4b67      	ldr	r3, [pc, #412]	; (8013590 <HAL_RCC_ClockConfig+0x260>)
 80133f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80133fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80133fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80133fe:	fa92 f2a2 	rbit	r2, r2
 8013402:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8013404:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013406:	fab2 f282 	clz	r2, r2
 801340a:	b2d2      	uxtb	r2, r2
 801340c:	f042 0220 	orr.w	r2, r2, #32
 8013410:	b2d2      	uxtb	r2, r2
 8013412:	f002 021f 	and.w	r2, r2, #31
 8013416:	2101      	movs	r1, #1
 8013418:	fa01 f202 	lsl.w	r2, r1, r2
 801341c:	4013      	ands	r3, r2
 801341e:	2b00      	cmp	r3, #0
 8013420:	d17b      	bne.n	801351a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8013422:	2301      	movs	r3, #1
 8013424:	e0f3      	b.n	801360e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	685b      	ldr	r3, [r3, #4]
 801342a:	2b02      	cmp	r3, #2
 801342c:	d13c      	bne.n	80134a8 <HAL_RCC_ClockConfig+0x178>
 801342e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013432:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013436:	fa93 f3a3 	rbit	r3, r3
 801343a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 801343c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801343e:	fab3 f383 	clz	r3, r3
 8013442:	b2db      	uxtb	r3, r3
 8013444:	095b      	lsrs	r3, r3, #5
 8013446:	b2db      	uxtb	r3, r3
 8013448:	f043 0301 	orr.w	r3, r3, #1
 801344c:	b2db      	uxtb	r3, r3
 801344e:	2b01      	cmp	r3, #1
 8013450:	d102      	bne.n	8013458 <HAL_RCC_ClockConfig+0x128>
 8013452:	4b4f      	ldr	r3, [pc, #316]	; (8013590 <HAL_RCC_ClockConfig+0x260>)
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	e00f      	b.n	8013478 <HAL_RCC_ClockConfig+0x148>
 8013458:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801345c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801345e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013460:	fa93 f3a3 	rbit	r3, r3
 8013464:	647b      	str	r3, [r7, #68]	; 0x44
 8013466:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801346a:	643b      	str	r3, [r7, #64]	; 0x40
 801346c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801346e:	fa93 f3a3 	rbit	r3, r3
 8013472:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013474:	4b46      	ldr	r3, [pc, #280]	; (8013590 <HAL_RCC_ClockConfig+0x260>)
 8013476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013478:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801347c:	63ba      	str	r2, [r7, #56]	; 0x38
 801347e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013480:	fa92 f2a2 	rbit	r2, r2
 8013484:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8013486:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013488:	fab2 f282 	clz	r2, r2
 801348c:	b2d2      	uxtb	r2, r2
 801348e:	f042 0220 	orr.w	r2, r2, #32
 8013492:	b2d2      	uxtb	r2, r2
 8013494:	f002 021f 	and.w	r2, r2, #31
 8013498:	2101      	movs	r1, #1
 801349a:	fa01 f202 	lsl.w	r2, r1, r2
 801349e:	4013      	ands	r3, r2
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d13a      	bne.n	801351a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80134a4:	2301      	movs	r3, #1
 80134a6:	e0b2      	b.n	801360e <HAL_RCC_ClockConfig+0x2de>
 80134a8:	2302      	movs	r3, #2
 80134aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80134ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ae:	fa93 f3a3 	rbit	r3, r3
 80134b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80134b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80134b6:	fab3 f383 	clz	r3, r3
 80134ba:	b2db      	uxtb	r3, r3
 80134bc:	095b      	lsrs	r3, r3, #5
 80134be:	b2db      	uxtb	r3, r3
 80134c0:	f043 0301 	orr.w	r3, r3, #1
 80134c4:	b2db      	uxtb	r3, r3
 80134c6:	2b01      	cmp	r3, #1
 80134c8:	d102      	bne.n	80134d0 <HAL_RCC_ClockConfig+0x1a0>
 80134ca:	4b31      	ldr	r3, [pc, #196]	; (8013590 <HAL_RCC_ClockConfig+0x260>)
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	e00d      	b.n	80134ec <HAL_RCC_ClockConfig+0x1bc>
 80134d0:	2302      	movs	r3, #2
 80134d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80134d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134d6:	fa93 f3a3 	rbit	r3, r3
 80134da:	627b      	str	r3, [r7, #36]	; 0x24
 80134dc:	2302      	movs	r3, #2
 80134de:	623b      	str	r3, [r7, #32]
 80134e0:	6a3b      	ldr	r3, [r7, #32]
 80134e2:	fa93 f3a3 	rbit	r3, r3
 80134e6:	61fb      	str	r3, [r7, #28]
 80134e8:	4b29      	ldr	r3, [pc, #164]	; (8013590 <HAL_RCC_ClockConfig+0x260>)
 80134ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134ec:	2202      	movs	r2, #2
 80134ee:	61ba      	str	r2, [r7, #24]
 80134f0:	69ba      	ldr	r2, [r7, #24]
 80134f2:	fa92 f2a2 	rbit	r2, r2
 80134f6:	617a      	str	r2, [r7, #20]
  return result;
 80134f8:	697a      	ldr	r2, [r7, #20]
 80134fa:	fab2 f282 	clz	r2, r2
 80134fe:	b2d2      	uxtb	r2, r2
 8013500:	f042 0220 	orr.w	r2, r2, #32
 8013504:	b2d2      	uxtb	r2, r2
 8013506:	f002 021f 	and.w	r2, r2, #31
 801350a:	2101      	movs	r1, #1
 801350c:	fa01 f202 	lsl.w	r2, r1, r2
 8013510:	4013      	ands	r3, r2
 8013512:	2b00      	cmp	r3, #0
 8013514:	d101      	bne.n	801351a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8013516:	2301      	movs	r3, #1
 8013518:	e079      	b.n	801360e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801351a:	4b1d      	ldr	r3, [pc, #116]	; (8013590 <HAL_RCC_ClockConfig+0x260>)
 801351c:	685b      	ldr	r3, [r3, #4]
 801351e:	f023 0203 	bic.w	r2, r3, #3
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	685b      	ldr	r3, [r3, #4]
 8013526:	491a      	ldr	r1, [pc, #104]	; (8013590 <HAL_RCC_ClockConfig+0x260>)
 8013528:	4313      	orrs	r3, r2
 801352a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801352c:	f7fd f80a 	bl	8010544 <HAL_GetTick>
 8013530:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013532:	e00a      	b.n	801354a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013534:	f7fd f806 	bl	8010544 <HAL_GetTick>
 8013538:	4602      	mov	r2, r0
 801353a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801353c:	1ad3      	subs	r3, r2, r3
 801353e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013542:	4293      	cmp	r3, r2
 8013544:	d901      	bls.n	801354a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8013546:	2303      	movs	r3, #3
 8013548:	e061      	b.n	801360e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801354a:	4b11      	ldr	r3, [pc, #68]	; (8013590 <HAL_RCC_ClockConfig+0x260>)
 801354c:	685b      	ldr	r3, [r3, #4]
 801354e:	f003 020c 	and.w	r2, r3, #12
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	685b      	ldr	r3, [r3, #4]
 8013556:	009b      	lsls	r3, r3, #2
 8013558:	429a      	cmp	r2, r3
 801355a:	d1eb      	bne.n	8013534 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801355c:	4b0b      	ldr	r3, [pc, #44]	; (801358c <HAL_RCC_ClockConfig+0x25c>)
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	f003 0307 	and.w	r3, r3, #7
 8013564:	683a      	ldr	r2, [r7, #0]
 8013566:	429a      	cmp	r2, r3
 8013568:	d214      	bcs.n	8013594 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801356a:	4b08      	ldr	r3, [pc, #32]	; (801358c <HAL_RCC_ClockConfig+0x25c>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	f023 0207 	bic.w	r2, r3, #7
 8013572:	4906      	ldr	r1, [pc, #24]	; (801358c <HAL_RCC_ClockConfig+0x25c>)
 8013574:	683b      	ldr	r3, [r7, #0]
 8013576:	4313      	orrs	r3, r2
 8013578:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801357a:	4b04      	ldr	r3, [pc, #16]	; (801358c <HAL_RCC_ClockConfig+0x25c>)
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	f003 0307 	and.w	r3, r3, #7
 8013582:	683a      	ldr	r2, [r7, #0]
 8013584:	429a      	cmp	r2, r3
 8013586:	d005      	beq.n	8013594 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8013588:	2301      	movs	r3, #1
 801358a:	e040      	b.n	801360e <HAL_RCC_ClockConfig+0x2de>
 801358c:	40022000 	.word	0x40022000
 8013590:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	f003 0304 	and.w	r3, r3, #4
 801359c:	2b00      	cmp	r3, #0
 801359e:	d008      	beq.n	80135b2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80135a0:	4b1d      	ldr	r3, [pc, #116]	; (8013618 <HAL_RCC_ClockConfig+0x2e8>)
 80135a2:	685b      	ldr	r3, [r3, #4]
 80135a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	68db      	ldr	r3, [r3, #12]
 80135ac:	491a      	ldr	r1, [pc, #104]	; (8013618 <HAL_RCC_ClockConfig+0x2e8>)
 80135ae:	4313      	orrs	r3, r2
 80135b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	f003 0308 	and.w	r3, r3, #8
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d009      	beq.n	80135d2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80135be:	4b16      	ldr	r3, [pc, #88]	; (8013618 <HAL_RCC_ClockConfig+0x2e8>)
 80135c0:	685b      	ldr	r3, [r3, #4]
 80135c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	691b      	ldr	r3, [r3, #16]
 80135ca:	00db      	lsls	r3, r3, #3
 80135cc:	4912      	ldr	r1, [pc, #72]	; (8013618 <HAL_RCC_ClockConfig+0x2e8>)
 80135ce:	4313      	orrs	r3, r2
 80135d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80135d2:	f000 f829 	bl	8013628 <HAL_RCC_GetSysClockFreq>
 80135d6:	4601      	mov	r1, r0
 80135d8:	4b0f      	ldr	r3, [pc, #60]	; (8013618 <HAL_RCC_ClockConfig+0x2e8>)
 80135da:	685b      	ldr	r3, [r3, #4]
 80135dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80135e0:	22f0      	movs	r2, #240	; 0xf0
 80135e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80135e4:	693a      	ldr	r2, [r7, #16]
 80135e6:	fa92 f2a2 	rbit	r2, r2
 80135ea:	60fa      	str	r2, [r7, #12]
  return result;
 80135ec:	68fa      	ldr	r2, [r7, #12]
 80135ee:	fab2 f282 	clz	r2, r2
 80135f2:	b2d2      	uxtb	r2, r2
 80135f4:	40d3      	lsrs	r3, r2
 80135f6:	4a09      	ldr	r2, [pc, #36]	; (801361c <HAL_RCC_ClockConfig+0x2ec>)
 80135f8:	5cd3      	ldrb	r3, [r2, r3]
 80135fa:	fa21 f303 	lsr.w	r3, r1, r3
 80135fe:	4a08      	ldr	r2, [pc, #32]	; (8013620 <HAL_RCC_ClockConfig+0x2f0>)
 8013600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8013602:	4b08      	ldr	r3, [pc, #32]	; (8013624 <HAL_RCC_ClockConfig+0x2f4>)
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	4618      	mov	r0, r3
 8013608:	f7fc ff58 	bl	80104bc <HAL_InitTick>
  
  return HAL_OK;
 801360c:	2300      	movs	r3, #0
}
 801360e:	4618      	mov	r0, r3
 8013610:	3778      	adds	r7, #120	; 0x78
 8013612:	46bd      	mov	sp, r7
 8013614:	bd80      	pop	{r7, pc}
 8013616:	bf00      	nop
 8013618:	40021000 	.word	0x40021000
 801361c:	08028c74 	.word	0x08028c74
 8013620:	20000000 	.word	0x20000000
 8013624:	20000004 	.word	0x20000004

08013628 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013628:	b480      	push	{r7}
 801362a:	b087      	sub	sp, #28
 801362c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 801362e:	2300      	movs	r3, #0
 8013630:	60fb      	str	r3, [r7, #12]
 8013632:	2300      	movs	r3, #0
 8013634:	60bb      	str	r3, [r7, #8]
 8013636:	2300      	movs	r3, #0
 8013638:	617b      	str	r3, [r7, #20]
 801363a:	2300      	movs	r3, #0
 801363c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 801363e:	2300      	movs	r3, #0
 8013640:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8013642:	4b1f      	ldr	r3, [pc, #124]	; (80136c0 <HAL_RCC_GetSysClockFreq+0x98>)
 8013644:	685b      	ldr	r3, [r3, #4]
 8013646:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	f003 030c 	and.w	r3, r3, #12
 801364e:	2b04      	cmp	r3, #4
 8013650:	d002      	beq.n	8013658 <HAL_RCC_GetSysClockFreq+0x30>
 8013652:	2b08      	cmp	r3, #8
 8013654:	d003      	beq.n	801365e <HAL_RCC_GetSysClockFreq+0x36>
 8013656:	e029      	b.n	80136ac <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8013658:	4b1a      	ldr	r3, [pc, #104]	; (80136c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 801365a:	613b      	str	r3, [r7, #16]
      break;
 801365c:	e029      	b.n	80136b2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	0c9b      	lsrs	r3, r3, #18
 8013662:	f003 030f 	and.w	r3, r3, #15
 8013666:	4a18      	ldr	r2, [pc, #96]	; (80136c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8013668:	5cd3      	ldrb	r3, [r2, r3]
 801366a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 801366c:	4b14      	ldr	r3, [pc, #80]	; (80136c0 <HAL_RCC_GetSysClockFreq+0x98>)
 801366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013670:	f003 030f 	and.w	r3, r3, #15
 8013674:	4a15      	ldr	r2, [pc, #84]	; (80136cc <HAL_RCC_GetSysClockFreq+0xa4>)
 8013676:	5cd3      	ldrb	r3, [r2, r3]
 8013678:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013680:	2b00      	cmp	r3, #0
 8013682:	d008      	beq.n	8013696 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8013684:	4a0f      	ldr	r2, [pc, #60]	; (80136c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8013686:	68bb      	ldr	r3, [r7, #8]
 8013688:	fbb2 f2f3 	udiv	r2, r2, r3
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	fb02 f303 	mul.w	r3, r2, r3
 8013692:	617b      	str	r3, [r7, #20]
 8013694:	e007      	b.n	80136a6 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8013696:	4a0b      	ldr	r2, [pc, #44]	; (80136c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8013698:	68bb      	ldr	r3, [r7, #8]
 801369a:	fbb2 f2f3 	udiv	r2, r2, r3
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	fb02 f303 	mul.w	r3, r2, r3
 80136a4:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80136a6:	697b      	ldr	r3, [r7, #20]
 80136a8:	613b      	str	r3, [r7, #16]
      break;
 80136aa:	e002      	b.n	80136b2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80136ac:	4b05      	ldr	r3, [pc, #20]	; (80136c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 80136ae:	613b      	str	r3, [r7, #16]
      break;
 80136b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80136b2:	693b      	ldr	r3, [r7, #16]
}
 80136b4:	4618      	mov	r0, r3
 80136b6:	371c      	adds	r7, #28
 80136b8:	46bd      	mov	sp, r7
 80136ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136be:	4770      	bx	lr
 80136c0:	40021000 	.word	0x40021000
 80136c4:	007a1200 	.word	0x007a1200
 80136c8:	08028c84 	.word	0x08028c84
 80136cc:	08028c94 	.word	0x08028c94

080136d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b092      	sub	sp, #72	; 0x48
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80136d8:	2300      	movs	r3, #0
 80136da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80136dc:	2300      	movs	r3, #0
 80136de:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80136e0:	2300      	movs	r3, #0
 80136e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	f000 80d4 	beq.w	801389c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80136f4:	4b4e      	ldr	r3, [pc, #312]	; (8013830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80136f6:	69db      	ldr	r3, [r3, #28]
 80136f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d10e      	bne.n	801371e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013700:	4b4b      	ldr	r3, [pc, #300]	; (8013830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8013702:	69db      	ldr	r3, [r3, #28]
 8013704:	4a4a      	ldr	r2, [pc, #296]	; (8013830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8013706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801370a:	61d3      	str	r3, [r2, #28]
 801370c:	4b48      	ldr	r3, [pc, #288]	; (8013830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801370e:	69db      	ldr	r3, [r3, #28]
 8013710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013714:	60bb      	str	r3, [r7, #8]
 8013716:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013718:	2301      	movs	r3, #1
 801371a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801371e:	4b45      	ldr	r3, [pc, #276]	; (8013834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013726:	2b00      	cmp	r3, #0
 8013728:	d118      	bne.n	801375c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801372a:	4b42      	ldr	r3, [pc, #264]	; (8013834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	4a41      	ldr	r2, [pc, #260]	; (8013834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8013730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013734:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013736:	f7fc ff05 	bl	8010544 <HAL_GetTick>
 801373a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801373c:	e008      	b.n	8013750 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801373e:	f7fc ff01 	bl	8010544 <HAL_GetTick>
 8013742:	4602      	mov	r2, r0
 8013744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013746:	1ad3      	subs	r3, r2, r3
 8013748:	2b64      	cmp	r3, #100	; 0x64
 801374a:	d901      	bls.n	8013750 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 801374c:	2303      	movs	r3, #3
 801374e:	e1d6      	b.n	8013afe <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013750:	4b38      	ldr	r3, [pc, #224]	; (8013834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013758:	2b00      	cmp	r3, #0
 801375a:	d0f0      	beq.n	801373e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801375c:	4b34      	ldr	r3, [pc, #208]	; (8013830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801375e:	6a1b      	ldr	r3, [r3, #32]
 8013760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013764:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8013766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013768:	2b00      	cmp	r3, #0
 801376a:	f000 8084 	beq.w	8013876 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	685b      	ldr	r3, [r3, #4]
 8013772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013776:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013778:	429a      	cmp	r2, r3
 801377a:	d07c      	beq.n	8013876 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801377c:	4b2c      	ldr	r3, [pc, #176]	; (8013830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801377e:	6a1b      	ldr	r3, [r3, #32]
 8013780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013784:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013786:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801378a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801378e:	fa93 f3a3 	rbit	r3, r3
 8013792:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8013794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8013796:	fab3 f383 	clz	r3, r3
 801379a:	b2db      	uxtb	r3, r3
 801379c:	461a      	mov	r2, r3
 801379e:	4b26      	ldr	r3, [pc, #152]	; (8013838 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80137a0:	4413      	add	r3, r2
 80137a2:	009b      	lsls	r3, r3, #2
 80137a4:	461a      	mov	r2, r3
 80137a6:	2301      	movs	r3, #1
 80137a8:	6013      	str	r3, [r2, #0]
 80137aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80137ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80137b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137b2:	fa93 f3a3 	rbit	r3, r3
 80137b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80137b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80137ba:	fab3 f383 	clz	r3, r3
 80137be:	b2db      	uxtb	r3, r3
 80137c0:	461a      	mov	r2, r3
 80137c2:	4b1d      	ldr	r3, [pc, #116]	; (8013838 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80137c4:	4413      	add	r3, r2
 80137c6:	009b      	lsls	r3, r3, #2
 80137c8:	461a      	mov	r2, r3
 80137ca:	2300      	movs	r3, #0
 80137cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80137ce:	4a18      	ldr	r2, [pc, #96]	; (8013830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80137d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80137d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137d6:	f003 0301 	and.w	r3, r3, #1
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d04b      	beq.n	8013876 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80137de:	f7fc feb1 	bl	8010544 <HAL_GetTick>
 80137e2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80137e4:	e00a      	b.n	80137fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80137e6:	f7fc fead 	bl	8010544 <HAL_GetTick>
 80137ea:	4602      	mov	r2, r0
 80137ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137ee:	1ad3      	subs	r3, r2, r3
 80137f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80137f4:	4293      	cmp	r3, r2
 80137f6:	d901      	bls.n	80137fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80137f8:	2303      	movs	r3, #3
 80137fa:	e180      	b.n	8013afe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80137fc:	2302      	movs	r3, #2
 80137fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013802:	fa93 f3a3 	rbit	r3, r3
 8013806:	627b      	str	r3, [r7, #36]	; 0x24
 8013808:	2302      	movs	r3, #2
 801380a:	623b      	str	r3, [r7, #32]
 801380c:	6a3b      	ldr	r3, [r7, #32]
 801380e:	fa93 f3a3 	rbit	r3, r3
 8013812:	61fb      	str	r3, [r7, #28]
  return result;
 8013814:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013816:	fab3 f383 	clz	r3, r3
 801381a:	b2db      	uxtb	r3, r3
 801381c:	095b      	lsrs	r3, r3, #5
 801381e:	b2db      	uxtb	r3, r3
 8013820:	f043 0302 	orr.w	r3, r3, #2
 8013824:	b2db      	uxtb	r3, r3
 8013826:	2b02      	cmp	r3, #2
 8013828:	d108      	bne.n	801383c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 801382a:	4b01      	ldr	r3, [pc, #4]	; (8013830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801382c:	6a1b      	ldr	r3, [r3, #32]
 801382e:	e00d      	b.n	801384c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8013830:	40021000 	.word	0x40021000
 8013834:	40007000 	.word	0x40007000
 8013838:	10908100 	.word	0x10908100
 801383c:	2302      	movs	r3, #2
 801383e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013840:	69bb      	ldr	r3, [r7, #24]
 8013842:	fa93 f3a3 	rbit	r3, r3
 8013846:	617b      	str	r3, [r7, #20]
 8013848:	4ba0      	ldr	r3, [pc, #640]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 801384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801384c:	2202      	movs	r2, #2
 801384e:	613a      	str	r2, [r7, #16]
 8013850:	693a      	ldr	r2, [r7, #16]
 8013852:	fa92 f2a2 	rbit	r2, r2
 8013856:	60fa      	str	r2, [r7, #12]
  return result;
 8013858:	68fa      	ldr	r2, [r7, #12]
 801385a:	fab2 f282 	clz	r2, r2
 801385e:	b2d2      	uxtb	r2, r2
 8013860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013864:	b2d2      	uxtb	r2, r2
 8013866:	f002 021f 	and.w	r2, r2, #31
 801386a:	2101      	movs	r1, #1
 801386c:	fa01 f202 	lsl.w	r2, r1, r2
 8013870:	4013      	ands	r3, r2
 8013872:	2b00      	cmp	r3, #0
 8013874:	d0b7      	beq.n	80137e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8013876:	4b95      	ldr	r3, [pc, #596]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8013878:	6a1b      	ldr	r3, [r3, #32]
 801387a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	685b      	ldr	r3, [r3, #4]
 8013882:	4992      	ldr	r1, [pc, #584]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8013884:	4313      	orrs	r3, r2
 8013886:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8013888:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801388c:	2b01      	cmp	r3, #1
 801388e:	d105      	bne.n	801389c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013890:	4b8e      	ldr	r3, [pc, #568]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8013892:	69db      	ldr	r3, [r3, #28]
 8013894:	4a8d      	ldr	r2, [pc, #564]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8013896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801389a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	f003 0301 	and.w	r3, r3, #1
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d008      	beq.n	80138ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80138a8:	4b88      	ldr	r3, [pc, #544]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80138aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138ac:	f023 0203 	bic.w	r2, r3, #3
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	689b      	ldr	r3, [r3, #8]
 80138b4:	4985      	ldr	r1, [pc, #532]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80138b6:	4313      	orrs	r3, r2
 80138b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	f003 0302 	and.w	r3, r3, #2
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d008      	beq.n	80138d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80138c6:	4b81      	ldr	r3, [pc, #516]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80138c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	68db      	ldr	r3, [r3, #12]
 80138d2:	497e      	ldr	r1, [pc, #504]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80138d4:	4313      	orrs	r3, r2
 80138d6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	f003 0304 	and.w	r3, r3, #4
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d008      	beq.n	80138f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80138e4:	4b79      	ldr	r3, [pc, #484]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80138e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	691b      	ldr	r3, [r3, #16]
 80138f0:	4976      	ldr	r1, [pc, #472]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80138f2:	4313      	orrs	r3, r2
 80138f4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	f003 0320 	and.w	r3, r3, #32
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d008      	beq.n	8013914 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8013902:	4b72      	ldr	r3, [pc, #456]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8013904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013906:	f023 0210 	bic.w	r2, r3, #16
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	69db      	ldr	r3, [r3, #28]
 801390e:	496f      	ldr	r1, [pc, #444]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8013910:	4313      	orrs	r3, r2
 8013912:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801391c:	2b00      	cmp	r3, #0
 801391e:	d008      	beq.n	8013932 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8013920:	4b6a      	ldr	r3, [pc, #424]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8013922:	685b      	ldr	r3, [r3, #4]
 8013924:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801392c:	4967      	ldr	r1, [pc, #412]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 801392e:	4313      	orrs	r3, r2
 8013930:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801393a:	2b00      	cmp	r3, #0
 801393c:	d008      	beq.n	8013950 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801393e:	4b63      	ldr	r3, [pc, #396]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8013940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013942:	f023 0220 	bic.w	r2, r3, #32
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	6a1b      	ldr	r3, [r3, #32]
 801394a:	4960      	ldr	r1, [pc, #384]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 801394c:	4313      	orrs	r3, r2
 801394e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013958:	2b00      	cmp	r3, #0
 801395a:	d008      	beq.n	801396e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801395c:	4b5b      	ldr	r3, [pc, #364]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 801395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013960:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013968:	4958      	ldr	r1, [pc, #352]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 801396a:	4313      	orrs	r3, r2
 801396c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	f003 0308 	and.w	r3, r3, #8
 8013976:	2b00      	cmp	r3, #0
 8013978:	d008      	beq.n	801398c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801397a:	4b54      	ldr	r3, [pc, #336]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 801397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801397e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	695b      	ldr	r3, [r3, #20]
 8013986:	4951      	ldr	r1, [pc, #324]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8013988:	4313      	orrs	r3, r2
 801398a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	f003 0310 	and.w	r3, r3, #16
 8013994:	2b00      	cmp	r3, #0
 8013996:	d008      	beq.n	80139aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8013998:	4b4c      	ldr	r3, [pc, #304]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 801399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801399c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	699b      	ldr	r3, [r3, #24]
 80139a4:	4949      	ldr	r1, [pc, #292]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80139a6:	4313      	orrs	r3, r2
 80139a8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d008      	beq.n	80139c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80139b6:	4b45      	ldr	r3, [pc, #276]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80139b8:	685b      	ldr	r3, [r3, #4]
 80139ba:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139c2:	4942      	ldr	r1, [pc, #264]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80139c4:	4313      	orrs	r3, r2
 80139c6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d008      	beq.n	80139e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80139d4:	4b3d      	ldr	r3, [pc, #244]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80139d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139d8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139e0:	493a      	ldr	r1, [pc, #232]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80139e2:	4313      	orrs	r3, r2
 80139e4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d008      	beq.n	8013a04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80139f2:	4b36      	ldr	r3, [pc, #216]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80139f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139f6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139fe:	4933      	ldr	r1, [pc, #204]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8013a00:	4313      	orrs	r3, r2
 8013a02:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d008      	beq.n	8013a22 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8013a10:	4b2e      	ldr	r3, [pc, #184]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8013a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a1c:	492b      	ldr	r1, [pc, #172]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8013a1e:	4313      	orrs	r3, r2
 8013a20:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d008      	beq.n	8013a40 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8013a2e:	4b27      	ldr	r3, [pc, #156]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8013a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a32:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a3a:	4924      	ldr	r1, [pc, #144]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8013a3c:	4313      	orrs	r3, r2
 8013a3e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d008      	beq.n	8013a5e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8013a4c:	4b1f      	ldr	r3, [pc, #124]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8013a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a50:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a58:	491c      	ldr	r1, [pc, #112]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8013a5a:	4313      	orrs	r3, r2
 8013a5c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d008      	beq.n	8013a7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8013a6a:	4b18      	ldr	r3, [pc, #96]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8013a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a6e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a76:	4915      	ldr	r1, [pc, #84]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8013a78:	4313      	orrs	r3, r2
 8013a7a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d008      	beq.n	8013a9a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8013a88:	4b10      	ldr	r3, [pc, #64]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8013a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a8c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a94:	490d      	ldr	r1, [pc, #52]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8013a96:	4313      	orrs	r3, r2
 8013a98:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d008      	beq.n	8013ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8013aa6:	4b09      	ldr	r3, [pc, #36]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8013aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013aaa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ab2:	4906      	ldr	r1, [pc, #24]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8013ab4:	4313      	orrs	r3, r2
 8013ab6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d00c      	beq.n	8013ade <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8013ac4:	4b01      	ldr	r3, [pc, #4]	; (8013acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8013ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ac8:	e002      	b.n	8013ad0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8013aca:	bf00      	nop
 8013acc:	40021000 	.word	0x40021000
 8013ad0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ad8:	490b      	ldr	r1, [pc, #44]	; (8013b08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8013ada:	4313      	orrs	r3, r2
 8013adc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d008      	beq.n	8013afc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8013aea:	4b07      	ldr	r3, [pc, #28]	; (8013b08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8013aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013aee:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013af6:	4904      	ldr	r1, [pc, #16]	; (8013b08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8013af8:	4313      	orrs	r3, r2
 8013afa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8013afc:	2300      	movs	r3, #0
}
 8013afe:	4618      	mov	r0, r3
 8013b00:	3748      	adds	r7, #72	; 0x48
 8013b02:	46bd      	mov	sp, r7
 8013b04:	bd80      	pop	{r7, pc}
 8013b06:	bf00      	nop
 8013b08:	40021000 	.word	0x40021000

08013b0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8013b0c:	b480      	push	{r7}
 8013b0e:	b085      	sub	sp, #20
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	2200      	movs	r2, #0
 8013b18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8013b1c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8013b20:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	b29a      	uxth	r2, r3
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8013b2c:	2300      	movs	r3, #0
}
 8013b2e:	4618      	mov	r0, r3
 8013b30:	3714      	adds	r7, #20
 8013b32:	46bd      	mov	sp, r7
 8013b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b38:	4770      	bx	lr

08013b3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8013b3a:	b480      	push	{r7}
 8013b3c:	b085      	sub	sp, #20
 8013b3e:	af00      	add	r7, sp, #0
 8013b40:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8013b42:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8013b46:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8013b4e:	b29a      	uxth	r2, r3
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	b29b      	uxth	r3, r3
 8013b54:	43db      	mvns	r3, r3
 8013b56:	b29b      	uxth	r3, r3
 8013b58:	4013      	ands	r3, r2
 8013b5a:	b29a      	uxth	r2, r3
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8013b62:	2300      	movs	r3, #0
}
 8013b64:	4618      	mov	r0, r3
 8013b66:	3714      	adds	r7, #20
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b6e:	4770      	bx	lr

08013b70 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8013b70:	b480      	push	{r7}
 8013b72:	b085      	sub	sp, #20
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	60f8      	str	r0, [r7, #12]
 8013b78:	1d3b      	adds	r3, r7, #4
 8013b7a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	2201      	movs	r2, #1
 8013b82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	2200      	movs	r2, #0
 8013b8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	2200      	movs	r2, #0
 8013b92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	2200      	movs	r2, #0
 8013b9a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8013b9e:	2300      	movs	r3, #0
}
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	3714      	adds	r7, #20
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013baa:	4770      	bx	lr

08013bac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef const *USBx, uint32_t num)
{
 8013bac:	b480      	push	{r7}
 8013bae:	b083      	sub	sp, #12
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
 8013bb4:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8013bb6:	2300      	movs	r3, #0
}
 8013bb8:	4618      	mov	r0, r3
 8013bba:	370c      	adds	r7, #12
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc2:	4770      	bx	lr

08013bc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef const *USBx)
{
 8013bc4:	b480      	push	{r7}
 8013bc6:	b083      	sub	sp, #12
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8013bcc:	2300      	movs	r3, #0
}
 8013bce:	4618      	mov	r0, r3
 8013bd0:	370c      	adds	r7, #12
 8013bd2:	46bd      	mov	sp, r7
 8013bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd8:	4770      	bx	lr
	...

08013bdc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013bdc:	b480      	push	{r7}
 8013bde:	b09d      	sub	sp, #116	; 0x74
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
 8013be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8013be6:	2300      	movs	r3, #0
 8013be8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8013bec:	687a      	ldr	r2, [r7, #4]
 8013bee:	683b      	ldr	r3, [r7, #0]
 8013bf0:	781b      	ldrb	r3, [r3, #0]
 8013bf2:	009b      	lsls	r3, r3, #2
 8013bf4:	4413      	add	r3, r2
 8013bf6:	881b      	ldrh	r3, [r3, #0]
 8013bf8:	b29b      	uxth	r3, r3
 8013bfa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8013bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013c02:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8013c06:	683b      	ldr	r3, [r7, #0]
 8013c08:	78db      	ldrb	r3, [r3, #3]
 8013c0a:	2b03      	cmp	r3, #3
 8013c0c:	d81f      	bhi.n	8013c4e <USB_ActivateEndpoint+0x72>
 8013c0e:	a201      	add	r2, pc, #4	; (adr r2, 8013c14 <USB_ActivateEndpoint+0x38>)
 8013c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c14:	08013c25 	.word	0x08013c25
 8013c18:	08013c41 	.word	0x08013c41
 8013c1c:	08013c57 	.word	0x08013c57
 8013c20:	08013c33 	.word	0x08013c33
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8013c24:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8013c28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013c2c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8013c30:	e012      	b.n	8013c58 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8013c32:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8013c36:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8013c3a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8013c3e:	e00b      	b.n	8013c58 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8013c40:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8013c44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013c48:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8013c4c:	e004      	b.n	8013c58 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8013c4e:	2301      	movs	r3, #1
 8013c50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8013c54:	e000      	b.n	8013c58 <USB_ActivateEndpoint+0x7c>
      break;
 8013c56:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8013c58:	687a      	ldr	r2, [r7, #4]
 8013c5a:	683b      	ldr	r3, [r7, #0]
 8013c5c:	781b      	ldrb	r3, [r3, #0]
 8013c5e:	009b      	lsls	r3, r3, #2
 8013c60:	441a      	add	r2, r3
 8013c62:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8013c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c76:	b29b      	uxth	r3, r3
 8013c78:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8013c7a:	687a      	ldr	r2, [r7, #4]
 8013c7c:	683b      	ldr	r3, [r7, #0]
 8013c7e:	781b      	ldrb	r3, [r3, #0]
 8013c80:	009b      	lsls	r3, r3, #2
 8013c82:	4413      	add	r3, r2
 8013c84:	881b      	ldrh	r3, [r3, #0]
 8013c86:	b29b      	uxth	r3, r3
 8013c88:	b21b      	sxth	r3, r3
 8013c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013c92:	b21a      	sxth	r2, r3
 8013c94:	683b      	ldr	r3, [r7, #0]
 8013c96:	781b      	ldrb	r3, [r3, #0]
 8013c98:	b21b      	sxth	r3, r3
 8013c9a:	4313      	orrs	r3, r2
 8013c9c:	b21b      	sxth	r3, r3
 8013c9e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8013ca2:	687a      	ldr	r2, [r7, #4]
 8013ca4:	683b      	ldr	r3, [r7, #0]
 8013ca6:	781b      	ldrb	r3, [r3, #0]
 8013ca8:	009b      	lsls	r3, r3, #2
 8013caa:	441a      	add	r2, r3
 8013cac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8013cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013cc0:	b29b      	uxth	r3, r3
 8013cc2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8013cc4:	683b      	ldr	r3, [r7, #0]
 8013cc6:	7b1b      	ldrb	r3, [r3, #12]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	f040 8178 	bne.w	8013fbe <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8013cce:	683b      	ldr	r3, [r7, #0]
 8013cd0:	785b      	ldrb	r3, [r3, #1]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	f000 8084 	beq.w	8013de0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	61bb      	str	r3, [r7, #24]
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013ce2:	b29b      	uxth	r3, r3
 8013ce4:	461a      	mov	r2, r3
 8013ce6:	69bb      	ldr	r3, [r7, #24]
 8013ce8:	4413      	add	r3, r2
 8013cea:	61bb      	str	r3, [r7, #24]
 8013cec:	683b      	ldr	r3, [r7, #0]
 8013cee:	781b      	ldrb	r3, [r3, #0]
 8013cf0:	00da      	lsls	r2, r3, #3
 8013cf2:	69bb      	ldr	r3, [r7, #24]
 8013cf4:	4413      	add	r3, r2
 8013cf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013cfa:	617b      	str	r3, [r7, #20]
 8013cfc:	683b      	ldr	r3, [r7, #0]
 8013cfe:	88db      	ldrh	r3, [r3, #6]
 8013d00:	085b      	lsrs	r3, r3, #1
 8013d02:	b29b      	uxth	r3, r3
 8013d04:	005b      	lsls	r3, r3, #1
 8013d06:	b29a      	uxth	r2, r3
 8013d08:	697b      	ldr	r3, [r7, #20]
 8013d0a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013d0c:	687a      	ldr	r2, [r7, #4]
 8013d0e:	683b      	ldr	r3, [r7, #0]
 8013d10:	781b      	ldrb	r3, [r3, #0]
 8013d12:	009b      	lsls	r3, r3, #2
 8013d14:	4413      	add	r3, r2
 8013d16:	881b      	ldrh	r3, [r3, #0]
 8013d18:	827b      	strh	r3, [r7, #18]
 8013d1a:	8a7b      	ldrh	r3, [r7, #18]
 8013d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d01b      	beq.n	8013d5c <USB_ActivateEndpoint+0x180>
 8013d24:	687a      	ldr	r2, [r7, #4]
 8013d26:	683b      	ldr	r3, [r7, #0]
 8013d28:	781b      	ldrb	r3, [r3, #0]
 8013d2a:	009b      	lsls	r3, r3, #2
 8013d2c:	4413      	add	r3, r2
 8013d2e:	881b      	ldrh	r3, [r3, #0]
 8013d30:	b29b      	uxth	r3, r3
 8013d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013d3a:	823b      	strh	r3, [r7, #16]
 8013d3c:	687a      	ldr	r2, [r7, #4]
 8013d3e:	683b      	ldr	r3, [r7, #0]
 8013d40:	781b      	ldrb	r3, [r3, #0]
 8013d42:	009b      	lsls	r3, r3, #2
 8013d44:	441a      	add	r2, r3
 8013d46:	8a3b      	ldrh	r3, [r7, #16]
 8013d48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013d4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013d50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013d54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8013d58:	b29b      	uxth	r3, r3
 8013d5a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013d5c:	683b      	ldr	r3, [r7, #0]
 8013d5e:	78db      	ldrb	r3, [r3, #3]
 8013d60:	2b01      	cmp	r3, #1
 8013d62:	d020      	beq.n	8013da6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013d64:	687a      	ldr	r2, [r7, #4]
 8013d66:	683b      	ldr	r3, [r7, #0]
 8013d68:	781b      	ldrb	r3, [r3, #0]
 8013d6a:	009b      	lsls	r3, r3, #2
 8013d6c:	4413      	add	r3, r2
 8013d6e:	881b      	ldrh	r3, [r3, #0]
 8013d70:	b29b      	uxth	r3, r3
 8013d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013d7a:	81bb      	strh	r3, [r7, #12]
 8013d7c:	89bb      	ldrh	r3, [r7, #12]
 8013d7e:	f083 0320 	eor.w	r3, r3, #32
 8013d82:	81bb      	strh	r3, [r7, #12]
 8013d84:	687a      	ldr	r2, [r7, #4]
 8013d86:	683b      	ldr	r3, [r7, #0]
 8013d88:	781b      	ldrb	r3, [r3, #0]
 8013d8a:	009b      	lsls	r3, r3, #2
 8013d8c:	441a      	add	r2, r3
 8013d8e:	89bb      	ldrh	r3, [r7, #12]
 8013d90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013d94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013d98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013da0:	b29b      	uxth	r3, r3
 8013da2:	8013      	strh	r3, [r2, #0]
 8013da4:	e2d5      	b.n	8014352 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013da6:	687a      	ldr	r2, [r7, #4]
 8013da8:	683b      	ldr	r3, [r7, #0]
 8013daa:	781b      	ldrb	r3, [r3, #0]
 8013dac:	009b      	lsls	r3, r3, #2
 8013dae:	4413      	add	r3, r2
 8013db0:	881b      	ldrh	r3, [r3, #0]
 8013db2:	b29b      	uxth	r3, r3
 8013db4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013db8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013dbc:	81fb      	strh	r3, [r7, #14]
 8013dbe:	687a      	ldr	r2, [r7, #4]
 8013dc0:	683b      	ldr	r3, [r7, #0]
 8013dc2:	781b      	ldrb	r3, [r3, #0]
 8013dc4:	009b      	lsls	r3, r3, #2
 8013dc6:	441a      	add	r2, r3
 8013dc8:	89fb      	ldrh	r3, [r7, #14]
 8013dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013dda:	b29b      	uxth	r3, r3
 8013ddc:	8013      	strh	r3, [r2, #0]
 8013dde:	e2b8      	b.n	8014352 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	633b      	str	r3, [r7, #48]	; 0x30
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013dea:	b29b      	uxth	r3, r3
 8013dec:	461a      	mov	r2, r3
 8013dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013df0:	4413      	add	r3, r2
 8013df2:	633b      	str	r3, [r7, #48]	; 0x30
 8013df4:	683b      	ldr	r3, [r7, #0]
 8013df6:	781b      	ldrb	r3, [r3, #0]
 8013df8:	00da      	lsls	r2, r3, #3
 8013dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dfc:	4413      	add	r3, r2
 8013dfe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8013e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e04:	683b      	ldr	r3, [r7, #0]
 8013e06:	88db      	ldrh	r3, [r3, #6]
 8013e08:	085b      	lsrs	r3, r3, #1
 8013e0a:	b29b      	uxth	r3, r3
 8013e0c:	005b      	lsls	r3, r3, #1
 8013e0e:	b29a      	uxth	r2, r3
 8013e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e12:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	62bb      	str	r3, [r7, #40]	; 0x28
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013e1e:	b29b      	uxth	r3, r3
 8013e20:	461a      	mov	r2, r3
 8013e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e24:	4413      	add	r3, r2
 8013e26:	62bb      	str	r3, [r7, #40]	; 0x28
 8013e28:	683b      	ldr	r3, [r7, #0]
 8013e2a:	781b      	ldrb	r3, [r3, #0]
 8013e2c:	00da      	lsls	r2, r3, #3
 8013e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e30:	4413      	add	r3, r2
 8013e32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013e36:	627b      	str	r3, [r7, #36]	; 0x24
 8013e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e3a:	881b      	ldrh	r3, [r3, #0]
 8013e3c:	b29b      	uxth	r3, r3
 8013e3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013e42:	b29a      	uxth	r2, r3
 8013e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e46:	801a      	strh	r2, [r3, #0]
 8013e48:	683b      	ldr	r3, [r7, #0]
 8013e4a:	691b      	ldr	r3, [r3, #16]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d10a      	bne.n	8013e66 <USB_ActivateEndpoint+0x28a>
 8013e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e52:	881b      	ldrh	r3, [r3, #0]
 8013e54:	b29b      	uxth	r3, r3
 8013e56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013e5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013e5e:	b29a      	uxth	r2, r3
 8013e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e62:	801a      	strh	r2, [r3, #0]
 8013e64:	e039      	b.n	8013eda <USB_ActivateEndpoint+0x2fe>
 8013e66:	683b      	ldr	r3, [r7, #0]
 8013e68:	691b      	ldr	r3, [r3, #16]
 8013e6a:	2b3e      	cmp	r3, #62	; 0x3e
 8013e6c:	d818      	bhi.n	8013ea0 <USB_ActivateEndpoint+0x2c4>
 8013e6e:	683b      	ldr	r3, [r7, #0]
 8013e70:	691b      	ldr	r3, [r3, #16]
 8013e72:	085b      	lsrs	r3, r3, #1
 8013e74:	66bb      	str	r3, [r7, #104]	; 0x68
 8013e76:	683b      	ldr	r3, [r7, #0]
 8013e78:	691b      	ldr	r3, [r3, #16]
 8013e7a:	f003 0301 	and.w	r3, r3, #1
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d002      	beq.n	8013e88 <USB_ActivateEndpoint+0x2ac>
 8013e82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013e84:	3301      	adds	r3, #1
 8013e86:	66bb      	str	r3, [r7, #104]	; 0x68
 8013e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e8a:	881b      	ldrh	r3, [r3, #0]
 8013e8c:	b29a      	uxth	r2, r3
 8013e8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013e90:	b29b      	uxth	r3, r3
 8013e92:	029b      	lsls	r3, r3, #10
 8013e94:	b29b      	uxth	r3, r3
 8013e96:	4313      	orrs	r3, r2
 8013e98:	b29a      	uxth	r2, r3
 8013e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e9c:	801a      	strh	r2, [r3, #0]
 8013e9e:	e01c      	b.n	8013eda <USB_ActivateEndpoint+0x2fe>
 8013ea0:	683b      	ldr	r3, [r7, #0]
 8013ea2:	691b      	ldr	r3, [r3, #16]
 8013ea4:	095b      	lsrs	r3, r3, #5
 8013ea6:	66bb      	str	r3, [r7, #104]	; 0x68
 8013ea8:	683b      	ldr	r3, [r7, #0]
 8013eaa:	691b      	ldr	r3, [r3, #16]
 8013eac:	f003 031f 	and.w	r3, r3, #31
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d102      	bne.n	8013eba <USB_ActivateEndpoint+0x2de>
 8013eb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013eb6:	3b01      	subs	r3, #1
 8013eb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8013eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ebc:	881b      	ldrh	r3, [r3, #0]
 8013ebe:	b29a      	uxth	r2, r3
 8013ec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013ec2:	b29b      	uxth	r3, r3
 8013ec4:	029b      	lsls	r3, r3, #10
 8013ec6:	b29b      	uxth	r3, r3
 8013ec8:	4313      	orrs	r3, r2
 8013eca:	b29b      	uxth	r3, r3
 8013ecc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013ed0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013ed4:	b29a      	uxth	r2, r3
 8013ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ed8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013eda:	687a      	ldr	r2, [r7, #4]
 8013edc:	683b      	ldr	r3, [r7, #0]
 8013ede:	781b      	ldrb	r3, [r3, #0]
 8013ee0:	009b      	lsls	r3, r3, #2
 8013ee2:	4413      	add	r3, r2
 8013ee4:	881b      	ldrh	r3, [r3, #0]
 8013ee6:	847b      	strh	r3, [r7, #34]	; 0x22
 8013ee8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d01b      	beq.n	8013f2a <USB_ActivateEndpoint+0x34e>
 8013ef2:	687a      	ldr	r2, [r7, #4]
 8013ef4:	683b      	ldr	r3, [r7, #0]
 8013ef6:	781b      	ldrb	r3, [r3, #0]
 8013ef8:	009b      	lsls	r3, r3, #2
 8013efa:	4413      	add	r3, r2
 8013efc:	881b      	ldrh	r3, [r3, #0]
 8013efe:	b29b      	uxth	r3, r3
 8013f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013f08:	843b      	strh	r3, [r7, #32]
 8013f0a:	687a      	ldr	r2, [r7, #4]
 8013f0c:	683b      	ldr	r3, [r7, #0]
 8013f0e:	781b      	ldrb	r3, [r3, #0]
 8013f10:	009b      	lsls	r3, r3, #2
 8013f12:	441a      	add	r2, r3
 8013f14:	8c3b      	ldrh	r3, [r7, #32]
 8013f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013f1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f26:	b29b      	uxth	r3, r3
 8013f28:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8013f2a:	683b      	ldr	r3, [r7, #0]
 8013f2c:	781b      	ldrb	r3, [r3, #0]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d124      	bne.n	8013f7c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013f32:	687a      	ldr	r2, [r7, #4]
 8013f34:	683b      	ldr	r3, [r7, #0]
 8013f36:	781b      	ldrb	r3, [r3, #0]
 8013f38:	009b      	lsls	r3, r3, #2
 8013f3a:	4413      	add	r3, r2
 8013f3c:	881b      	ldrh	r3, [r3, #0]
 8013f3e:	b29b      	uxth	r3, r3
 8013f40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013f48:	83bb      	strh	r3, [r7, #28]
 8013f4a:	8bbb      	ldrh	r3, [r7, #28]
 8013f4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8013f50:	83bb      	strh	r3, [r7, #28]
 8013f52:	8bbb      	ldrh	r3, [r7, #28]
 8013f54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8013f58:	83bb      	strh	r3, [r7, #28]
 8013f5a:	687a      	ldr	r2, [r7, #4]
 8013f5c:	683b      	ldr	r3, [r7, #0]
 8013f5e:	781b      	ldrb	r3, [r3, #0]
 8013f60:	009b      	lsls	r3, r3, #2
 8013f62:	441a      	add	r2, r3
 8013f64:	8bbb      	ldrh	r3, [r7, #28]
 8013f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f76:	b29b      	uxth	r3, r3
 8013f78:	8013      	strh	r3, [r2, #0]
 8013f7a:	e1ea      	b.n	8014352 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8013f7c:	687a      	ldr	r2, [r7, #4]
 8013f7e:	683b      	ldr	r3, [r7, #0]
 8013f80:	781b      	ldrb	r3, [r3, #0]
 8013f82:	009b      	lsls	r3, r3, #2
 8013f84:	4413      	add	r3, r2
 8013f86:	881b      	ldrh	r3, [r3, #0]
 8013f88:	b29b      	uxth	r3, r3
 8013f8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013f92:	83fb      	strh	r3, [r7, #30]
 8013f94:	8bfb      	ldrh	r3, [r7, #30]
 8013f96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8013f9a:	83fb      	strh	r3, [r7, #30]
 8013f9c:	687a      	ldr	r2, [r7, #4]
 8013f9e:	683b      	ldr	r3, [r7, #0]
 8013fa0:	781b      	ldrb	r3, [r3, #0]
 8013fa2:	009b      	lsls	r3, r3, #2
 8013fa4:	441a      	add	r2, r3
 8013fa6:	8bfb      	ldrh	r3, [r7, #30]
 8013fa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013fac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013fb8:	b29b      	uxth	r3, r3
 8013fba:	8013      	strh	r3, [r2, #0]
 8013fbc:	e1c9      	b.n	8014352 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8013fbe:	683b      	ldr	r3, [r7, #0]
 8013fc0:	78db      	ldrb	r3, [r3, #3]
 8013fc2:	2b02      	cmp	r3, #2
 8013fc4:	d11e      	bne.n	8014004 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013fc6:	687a      	ldr	r2, [r7, #4]
 8013fc8:	683b      	ldr	r3, [r7, #0]
 8013fca:	781b      	ldrb	r3, [r3, #0]
 8013fcc:	009b      	lsls	r3, r3, #2
 8013fce:	4413      	add	r3, r2
 8013fd0:	881b      	ldrh	r3, [r3, #0]
 8013fd2:	b29b      	uxth	r3, r3
 8013fd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013fdc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8013fe0:	687a      	ldr	r2, [r7, #4]
 8013fe2:	683b      	ldr	r3, [r7, #0]
 8013fe4:	781b      	ldrb	r3, [r3, #0]
 8013fe6:	009b      	lsls	r3, r3, #2
 8013fe8:	441a      	add	r2, r3
 8013fea:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8013fee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013ff2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013ff6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8013ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ffe:	b29b      	uxth	r3, r3
 8014000:	8013      	strh	r3, [r2, #0]
 8014002:	e01d      	b.n	8014040 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8014004:	687a      	ldr	r2, [r7, #4]
 8014006:	683b      	ldr	r3, [r7, #0]
 8014008:	781b      	ldrb	r3, [r3, #0]
 801400a:	009b      	lsls	r3, r3, #2
 801400c:	4413      	add	r3, r2
 801400e:	881b      	ldrh	r3, [r3, #0]
 8014010:	b29b      	uxth	r3, r3
 8014012:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8014016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801401a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 801401e:	687a      	ldr	r2, [r7, #4]
 8014020:	683b      	ldr	r3, [r7, #0]
 8014022:	781b      	ldrb	r3, [r3, #0]
 8014024:	009b      	lsls	r3, r3, #2
 8014026:	441a      	add	r2, r3
 8014028:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801402c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801403c:	b29b      	uxth	r3, r3
 801403e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801404a:	b29b      	uxth	r3, r3
 801404c:	461a      	mov	r2, r3
 801404e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014050:	4413      	add	r3, r2
 8014052:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014054:	683b      	ldr	r3, [r7, #0]
 8014056:	781b      	ldrb	r3, [r3, #0]
 8014058:	00da      	lsls	r2, r3, #3
 801405a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801405c:	4413      	add	r3, r2
 801405e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014062:	65bb      	str	r3, [r7, #88]	; 0x58
 8014064:	683b      	ldr	r3, [r7, #0]
 8014066:	891b      	ldrh	r3, [r3, #8]
 8014068:	085b      	lsrs	r3, r3, #1
 801406a:	b29b      	uxth	r3, r3
 801406c:	005b      	lsls	r3, r3, #1
 801406e:	b29a      	uxth	r2, r3
 8014070:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014072:	801a      	strh	r2, [r3, #0]
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	657b      	str	r3, [r7, #84]	; 0x54
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801407e:	b29b      	uxth	r3, r3
 8014080:	461a      	mov	r2, r3
 8014082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014084:	4413      	add	r3, r2
 8014086:	657b      	str	r3, [r7, #84]	; 0x54
 8014088:	683b      	ldr	r3, [r7, #0]
 801408a:	781b      	ldrb	r3, [r3, #0]
 801408c:	00da      	lsls	r2, r3, #3
 801408e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014090:	4413      	add	r3, r2
 8014092:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8014096:	653b      	str	r3, [r7, #80]	; 0x50
 8014098:	683b      	ldr	r3, [r7, #0]
 801409a:	895b      	ldrh	r3, [r3, #10]
 801409c:	085b      	lsrs	r3, r3, #1
 801409e:	b29b      	uxth	r3, r3
 80140a0:	005b      	lsls	r3, r3, #1
 80140a2:	b29a      	uxth	r2, r3
 80140a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80140a6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80140a8:	683b      	ldr	r3, [r7, #0]
 80140aa:	785b      	ldrb	r3, [r3, #1]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	f040 8093 	bne.w	80141d8 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80140b2:	687a      	ldr	r2, [r7, #4]
 80140b4:	683b      	ldr	r3, [r7, #0]
 80140b6:	781b      	ldrb	r3, [r3, #0]
 80140b8:	009b      	lsls	r3, r3, #2
 80140ba:	4413      	add	r3, r2
 80140bc:	881b      	ldrh	r3, [r3, #0]
 80140be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80140c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80140c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d01b      	beq.n	8014106 <USB_ActivateEndpoint+0x52a>
 80140ce:	687a      	ldr	r2, [r7, #4]
 80140d0:	683b      	ldr	r3, [r7, #0]
 80140d2:	781b      	ldrb	r3, [r3, #0]
 80140d4:	009b      	lsls	r3, r3, #2
 80140d6:	4413      	add	r3, r2
 80140d8:	881b      	ldrh	r3, [r3, #0]
 80140da:	b29b      	uxth	r3, r3
 80140dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80140e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80140e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80140e6:	687a      	ldr	r2, [r7, #4]
 80140e8:	683b      	ldr	r3, [r7, #0]
 80140ea:	781b      	ldrb	r3, [r3, #0]
 80140ec:	009b      	lsls	r3, r3, #2
 80140ee:	441a      	add	r2, r3
 80140f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80140f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80140f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80140fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80140fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014102:	b29b      	uxth	r3, r3
 8014104:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8014106:	687a      	ldr	r2, [r7, #4]
 8014108:	683b      	ldr	r3, [r7, #0]
 801410a:	781b      	ldrb	r3, [r3, #0]
 801410c:	009b      	lsls	r3, r3, #2
 801410e:	4413      	add	r3, r2
 8014110:	881b      	ldrh	r3, [r3, #0]
 8014112:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8014114:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801411a:	2b00      	cmp	r3, #0
 801411c:	d01b      	beq.n	8014156 <USB_ActivateEndpoint+0x57a>
 801411e:	687a      	ldr	r2, [r7, #4]
 8014120:	683b      	ldr	r3, [r7, #0]
 8014122:	781b      	ldrb	r3, [r3, #0]
 8014124:	009b      	lsls	r3, r3, #2
 8014126:	4413      	add	r3, r2
 8014128:	881b      	ldrh	r3, [r3, #0]
 801412a:	b29b      	uxth	r3, r3
 801412c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014134:	877b      	strh	r3, [r7, #58]	; 0x3a
 8014136:	687a      	ldr	r2, [r7, #4]
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	781b      	ldrb	r3, [r3, #0]
 801413c:	009b      	lsls	r3, r3, #2
 801413e:	441a      	add	r2, r3
 8014140:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801414a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801414e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8014152:	b29b      	uxth	r3, r3
 8014154:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8014156:	687a      	ldr	r2, [r7, #4]
 8014158:	683b      	ldr	r3, [r7, #0]
 801415a:	781b      	ldrb	r3, [r3, #0]
 801415c:	009b      	lsls	r3, r3, #2
 801415e:	4413      	add	r3, r2
 8014160:	881b      	ldrh	r3, [r3, #0]
 8014162:	b29b      	uxth	r3, r3
 8014164:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801416c:	873b      	strh	r3, [r7, #56]	; 0x38
 801416e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014170:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8014174:	873b      	strh	r3, [r7, #56]	; 0x38
 8014176:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014178:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801417c:	873b      	strh	r3, [r7, #56]	; 0x38
 801417e:	687a      	ldr	r2, [r7, #4]
 8014180:	683b      	ldr	r3, [r7, #0]
 8014182:	781b      	ldrb	r3, [r3, #0]
 8014184:	009b      	lsls	r3, r3, #2
 8014186:	441a      	add	r2, r3
 8014188:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801418a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801418e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801419a:	b29b      	uxth	r3, r3
 801419c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801419e:	687a      	ldr	r2, [r7, #4]
 80141a0:	683b      	ldr	r3, [r7, #0]
 80141a2:	781b      	ldrb	r3, [r3, #0]
 80141a4:	009b      	lsls	r3, r3, #2
 80141a6:	4413      	add	r3, r2
 80141a8:	881b      	ldrh	r3, [r3, #0]
 80141aa:	b29b      	uxth	r3, r3
 80141ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80141b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80141b4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80141b6:	687a      	ldr	r2, [r7, #4]
 80141b8:	683b      	ldr	r3, [r7, #0]
 80141ba:	781b      	ldrb	r3, [r3, #0]
 80141bc:	009b      	lsls	r3, r3, #2
 80141be:	441a      	add	r2, r3
 80141c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80141c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80141c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80141ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80141ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80141d2:	b29b      	uxth	r3, r3
 80141d4:	8013      	strh	r3, [r2, #0]
 80141d6:	e0bc      	b.n	8014352 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80141d8:	687a      	ldr	r2, [r7, #4]
 80141da:	683b      	ldr	r3, [r7, #0]
 80141dc:	781b      	ldrb	r3, [r3, #0]
 80141de:	009b      	lsls	r3, r3, #2
 80141e0:	4413      	add	r3, r2
 80141e2:	881b      	ldrh	r3, [r3, #0]
 80141e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80141e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80141ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d01d      	beq.n	8014230 <USB_ActivateEndpoint+0x654>
 80141f4:	687a      	ldr	r2, [r7, #4]
 80141f6:	683b      	ldr	r3, [r7, #0]
 80141f8:	781b      	ldrb	r3, [r3, #0]
 80141fa:	009b      	lsls	r3, r3, #2
 80141fc:	4413      	add	r3, r2
 80141fe:	881b      	ldrh	r3, [r3, #0]
 8014200:	b29b      	uxth	r3, r3
 8014202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801420a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 801420e:	687a      	ldr	r2, [r7, #4]
 8014210:	683b      	ldr	r3, [r7, #0]
 8014212:	781b      	ldrb	r3, [r3, #0]
 8014214:	009b      	lsls	r3, r3, #2
 8014216:	441a      	add	r2, r3
 8014218:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 801421c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014224:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8014228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801422c:	b29b      	uxth	r3, r3
 801422e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8014230:	687a      	ldr	r2, [r7, #4]
 8014232:	683b      	ldr	r3, [r7, #0]
 8014234:	781b      	ldrb	r3, [r3, #0]
 8014236:	009b      	lsls	r3, r3, #2
 8014238:	4413      	add	r3, r2
 801423a:	881b      	ldrh	r3, [r3, #0]
 801423c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8014240:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8014244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014248:	2b00      	cmp	r3, #0
 801424a:	d01d      	beq.n	8014288 <USB_ActivateEndpoint+0x6ac>
 801424c:	687a      	ldr	r2, [r7, #4]
 801424e:	683b      	ldr	r3, [r7, #0]
 8014250:	781b      	ldrb	r3, [r3, #0]
 8014252:	009b      	lsls	r3, r3, #2
 8014254:	4413      	add	r3, r2
 8014256:	881b      	ldrh	r3, [r3, #0]
 8014258:	b29b      	uxth	r3, r3
 801425a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801425e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014262:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8014266:	687a      	ldr	r2, [r7, #4]
 8014268:	683b      	ldr	r3, [r7, #0]
 801426a:	781b      	ldrb	r3, [r3, #0]
 801426c:	009b      	lsls	r3, r3, #2
 801426e:	441a      	add	r2, r3
 8014270:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8014274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801427c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014280:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8014284:	b29b      	uxth	r3, r3
 8014286:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014288:	683b      	ldr	r3, [r7, #0]
 801428a:	78db      	ldrb	r3, [r3, #3]
 801428c:	2b01      	cmp	r3, #1
 801428e:	d024      	beq.n	80142da <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8014290:	687a      	ldr	r2, [r7, #4]
 8014292:	683b      	ldr	r3, [r7, #0]
 8014294:	781b      	ldrb	r3, [r3, #0]
 8014296:	009b      	lsls	r3, r3, #2
 8014298:	4413      	add	r3, r2
 801429a:	881b      	ldrh	r3, [r3, #0]
 801429c:	b29b      	uxth	r3, r3
 801429e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80142a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80142a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80142aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80142ae:	f083 0320 	eor.w	r3, r3, #32
 80142b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80142b6:	687a      	ldr	r2, [r7, #4]
 80142b8:	683b      	ldr	r3, [r7, #0]
 80142ba:	781b      	ldrb	r3, [r3, #0]
 80142bc:	009b      	lsls	r3, r3, #2
 80142be:	441a      	add	r2, r3
 80142c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80142c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80142c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80142cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80142d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80142d4:	b29b      	uxth	r3, r3
 80142d6:	8013      	strh	r3, [r2, #0]
 80142d8:	e01d      	b.n	8014316 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80142da:	687a      	ldr	r2, [r7, #4]
 80142dc:	683b      	ldr	r3, [r7, #0]
 80142de:	781b      	ldrb	r3, [r3, #0]
 80142e0:	009b      	lsls	r3, r3, #2
 80142e2:	4413      	add	r3, r2
 80142e4:	881b      	ldrh	r3, [r3, #0]
 80142e6:	b29b      	uxth	r3, r3
 80142e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80142ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80142f0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80142f4:	687a      	ldr	r2, [r7, #4]
 80142f6:	683b      	ldr	r3, [r7, #0]
 80142f8:	781b      	ldrb	r3, [r3, #0]
 80142fa:	009b      	lsls	r3, r3, #2
 80142fc:	441a      	add	r2, r3
 80142fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801430a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801430e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014312:	b29b      	uxth	r3, r3
 8014314:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8014316:	687a      	ldr	r2, [r7, #4]
 8014318:	683b      	ldr	r3, [r7, #0]
 801431a:	781b      	ldrb	r3, [r3, #0]
 801431c:	009b      	lsls	r3, r3, #2
 801431e:	4413      	add	r3, r2
 8014320:	881b      	ldrh	r3, [r3, #0]
 8014322:	b29b      	uxth	r3, r3
 8014324:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801432c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8014330:	687a      	ldr	r2, [r7, #4]
 8014332:	683b      	ldr	r3, [r7, #0]
 8014334:	781b      	ldrb	r3, [r3, #0]
 8014336:	009b      	lsls	r3, r3, #2
 8014338:	441a      	add	r2, r3
 801433a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801433e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801434a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801434e:	b29b      	uxth	r3, r3
 8014350:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8014352:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8014356:	4618      	mov	r0, r3
 8014358:	3774      	adds	r7, #116	; 0x74
 801435a:	46bd      	mov	sp, r7
 801435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014360:	4770      	bx	lr
 8014362:	bf00      	nop

08014364 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014364:	b480      	push	{r7}
 8014366:	b08d      	sub	sp, #52	; 0x34
 8014368:	af00      	add	r7, sp, #0
 801436a:	6078      	str	r0, [r7, #4]
 801436c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801436e:	683b      	ldr	r3, [r7, #0]
 8014370:	7b1b      	ldrb	r3, [r3, #12]
 8014372:	2b00      	cmp	r3, #0
 8014374:	f040 808e 	bne.w	8014494 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8014378:	683b      	ldr	r3, [r7, #0]
 801437a:	785b      	ldrb	r3, [r3, #1]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d044      	beq.n	801440a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8014380:	687a      	ldr	r2, [r7, #4]
 8014382:	683b      	ldr	r3, [r7, #0]
 8014384:	781b      	ldrb	r3, [r3, #0]
 8014386:	009b      	lsls	r3, r3, #2
 8014388:	4413      	add	r3, r2
 801438a:	881b      	ldrh	r3, [r3, #0]
 801438c:	81bb      	strh	r3, [r7, #12]
 801438e:	89bb      	ldrh	r3, [r7, #12]
 8014390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014394:	2b00      	cmp	r3, #0
 8014396:	d01b      	beq.n	80143d0 <USB_DeactivateEndpoint+0x6c>
 8014398:	687a      	ldr	r2, [r7, #4]
 801439a:	683b      	ldr	r3, [r7, #0]
 801439c:	781b      	ldrb	r3, [r3, #0]
 801439e:	009b      	lsls	r3, r3, #2
 80143a0:	4413      	add	r3, r2
 80143a2:	881b      	ldrh	r3, [r3, #0]
 80143a4:	b29b      	uxth	r3, r3
 80143a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80143aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80143ae:	817b      	strh	r3, [r7, #10]
 80143b0:	687a      	ldr	r2, [r7, #4]
 80143b2:	683b      	ldr	r3, [r7, #0]
 80143b4:	781b      	ldrb	r3, [r3, #0]
 80143b6:	009b      	lsls	r3, r3, #2
 80143b8:	441a      	add	r2, r3
 80143ba:	897b      	ldrh	r3, [r7, #10]
 80143bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80143c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80143c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80143c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80143cc:	b29b      	uxth	r3, r3
 80143ce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80143d0:	687a      	ldr	r2, [r7, #4]
 80143d2:	683b      	ldr	r3, [r7, #0]
 80143d4:	781b      	ldrb	r3, [r3, #0]
 80143d6:	009b      	lsls	r3, r3, #2
 80143d8:	4413      	add	r3, r2
 80143da:	881b      	ldrh	r3, [r3, #0]
 80143dc:	b29b      	uxth	r3, r3
 80143de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80143e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80143e6:	813b      	strh	r3, [r7, #8]
 80143e8:	687a      	ldr	r2, [r7, #4]
 80143ea:	683b      	ldr	r3, [r7, #0]
 80143ec:	781b      	ldrb	r3, [r3, #0]
 80143ee:	009b      	lsls	r3, r3, #2
 80143f0:	441a      	add	r2, r3
 80143f2:	893b      	ldrh	r3, [r7, #8]
 80143f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80143f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80143fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014404:	b29b      	uxth	r3, r3
 8014406:	8013      	strh	r3, [r2, #0]
 8014408:	e192      	b.n	8014730 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801440a:	687a      	ldr	r2, [r7, #4]
 801440c:	683b      	ldr	r3, [r7, #0]
 801440e:	781b      	ldrb	r3, [r3, #0]
 8014410:	009b      	lsls	r3, r3, #2
 8014412:	4413      	add	r3, r2
 8014414:	881b      	ldrh	r3, [r3, #0]
 8014416:	827b      	strh	r3, [r7, #18]
 8014418:	8a7b      	ldrh	r3, [r7, #18]
 801441a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801441e:	2b00      	cmp	r3, #0
 8014420:	d01b      	beq.n	801445a <USB_DeactivateEndpoint+0xf6>
 8014422:	687a      	ldr	r2, [r7, #4]
 8014424:	683b      	ldr	r3, [r7, #0]
 8014426:	781b      	ldrb	r3, [r3, #0]
 8014428:	009b      	lsls	r3, r3, #2
 801442a:	4413      	add	r3, r2
 801442c:	881b      	ldrh	r3, [r3, #0]
 801442e:	b29b      	uxth	r3, r3
 8014430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014438:	823b      	strh	r3, [r7, #16]
 801443a:	687a      	ldr	r2, [r7, #4]
 801443c:	683b      	ldr	r3, [r7, #0]
 801443e:	781b      	ldrb	r3, [r3, #0]
 8014440:	009b      	lsls	r3, r3, #2
 8014442:	441a      	add	r2, r3
 8014444:	8a3b      	ldrh	r3, [r7, #16]
 8014446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801444a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801444e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8014452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014456:	b29b      	uxth	r3, r3
 8014458:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801445a:	687a      	ldr	r2, [r7, #4]
 801445c:	683b      	ldr	r3, [r7, #0]
 801445e:	781b      	ldrb	r3, [r3, #0]
 8014460:	009b      	lsls	r3, r3, #2
 8014462:	4413      	add	r3, r2
 8014464:	881b      	ldrh	r3, [r3, #0]
 8014466:	b29b      	uxth	r3, r3
 8014468:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801446c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014470:	81fb      	strh	r3, [r7, #14]
 8014472:	687a      	ldr	r2, [r7, #4]
 8014474:	683b      	ldr	r3, [r7, #0]
 8014476:	781b      	ldrb	r3, [r3, #0]
 8014478:	009b      	lsls	r3, r3, #2
 801447a:	441a      	add	r2, r3
 801447c:	89fb      	ldrh	r3, [r7, #14]
 801447e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801448a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801448e:	b29b      	uxth	r3, r3
 8014490:	8013      	strh	r3, [r2, #0]
 8014492:	e14d      	b.n	8014730 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8014494:	683b      	ldr	r3, [r7, #0]
 8014496:	785b      	ldrb	r3, [r3, #1]
 8014498:	2b00      	cmp	r3, #0
 801449a:	f040 80a5 	bne.w	80145e8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801449e:	687a      	ldr	r2, [r7, #4]
 80144a0:	683b      	ldr	r3, [r7, #0]
 80144a2:	781b      	ldrb	r3, [r3, #0]
 80144a4:	009b      	lsls	r3, r3, #2
 80144a6:	4413      	add	r3, r2
 80144a8:	881b      	ldrh	r3, [r3, #0]
 80144aa:	843b      	strh	r3, [r7, #32]
 80144ac:	8c3b      	ldrh	r3, [r7, #32]
 80144ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d01b      	beq.n	80144ee <USB_DeactivateEndpoint+0x18a>
 80144b6:	687a      	ldr	r2, [r7, #4]
 80144b8:	683b      	ldr	r3, [r7, #0]
 80144ba:	781b      	ldrb	r3, [r3, #0]
 80144bc:	009b      	lsls	r3, r3, #2
 80144be:	4413      	add	r3, r2
 80144c0:	881b      	ldrh	r3, [r3, #0]
 80144c2:	b29b      	uxth	r3, r3
 80144c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80144c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80144cc:	83fb      	strh	r3, [r7, #30]
 80144ce:	687a      	ldr	r2, [r7, #4]
 80144d0:	683b      	ldr	r3, [r7, #0]
 80144d2:	781b      	ldrb	r3, [r3, #0]
 80144d4:	009b      	lsls	r3, r3, #2
 80144d6:	441a      	add	r2, r3
 80144d8:	8bfb      	ldrh	r3, [r7, #30]
 80144da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80144de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80144e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80144e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80144ea:	b29b      	uxth	r3, r3
 80144ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80144ee:	687a      	ldr	r2, [r7, #4]
 80144f0:	683b      	ldr	r3, [r7, #0]
 80144f2:	781b      	ldrb	r3, [r3, #0]
 80144f4:	009b      	lsls	r3, r3, #2
 80144f6:	4413      	add	r3, r2
 80144f8:	881b      	ldrh	r3, [r3, #0]
 80144fa:	83bb      	strh	r3, [r7, #28]
 80144fc:	8bbb      	ldrh	r3, [r7, #28]
 80144fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014502:	2b00      	cmp	r3, #0
 8014504:	d01b      	beq.n	801453e <USB_DeactivateEndpoint+0x1da>
 8014506:	687a      	ldr	r2, [r7, #4]
 8014508:	683b      	ldr	r3, [r7, #0]
 801450a:	781b      	ldrb	r3, [r3, #0]
 801450c:	009b      	lsls	r3, r3, #2
 801450e:	4413      	add	r3, r2
 8014510:	881b      	ldrh	r3, [r3, #0]
 8014512:	b29b      	uxth	r3, r3
 8014514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801451c:	837b      	strh	r3, [r7, #26]
 801451e:	687a      	ldr	r2, [r7, #4]
 8014520:	683b      	ldr	r3, [r7, #0]
 8014522:	781b      	ldrb	r3, [r3, #0]
 8014524:	009b      	lsls	r3, r3, #2
 8014526:	441a      	add	r2, r3
 8014528:	8b7b      	ldrh	r3, [r7, #26]
 801452a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801452e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014536:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801453a:	b29b      	uxth	r3, r3
 801453c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801453e:	687a      	ldr	r2, [r7, #4]
 8014540:	683b      	ldr	r3, [r7, #0]
 8014542:	781b      	ldrb	r3, [r3, #0]
 8014544:	009b      	lsls	r3, r3, #2
 8014546:	4413      	add	r3, r2
 8014548:	881b      	ldrh	r3, [r3, #0]
 801454a:	b29b      	uxth	r3, r3
 801454c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014554:	833b      	strh	r3, [r7, #24]
 8014556:	687a      	ldr	r2, [r7, #4]
 8014558:	683b      	ldr	r3, [r7, #0]
 801455a:	781b      	ldrb	r3, [r3, #0]
 801455c:	009b      	lsls	r3, r3, #2
 801455e:	441a      	add	r2, r3
 8014560:	8b3b      	ldrh	r3, [r7, #24]
 8014562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801456a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801456e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8014572:	b29b      	uxth	r3, r3
 8014574:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8014576:	687a      	ldr	r2, [r7, #4]
 8014578:	683b      	ldr	r3, [r7, #0]
 801457a:	781b      	ldrb	r3, [r3, #0]
 801457c:	009b      	lsls	r3, r3, #2
 801457e:	4413      	add	r3, r2
 8014580:	881b      	ldrh	r3, [r3, #0]
 8014582:	b29b      	uxth	r3, r3
 8014584:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801458c:	82fb      	strh	r3, [r7, #22]
 801458e:	687a      	ldr	r2, [r7, #4]
 8014590:	683b      	ldr	r3, [r7, #0]
 8014592:	781b      	ldrb	r3, [r3, #0]
 8014594:	009b      	lsls	r3, r3, #2
 8014596:	441a      	add	r2, r3
 8014598:	8afb      	ldrh	r3, [r7, #22]
 801459a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801459e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80145a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80145a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80145aa:	b29b      	uxth	r3, r3
 80145ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80145ae:	687a      	ldr	r2, [r7, #4]
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	781b      	ldrb	r3, [r3, #0]
 80145b4:	009b      	lsls	r3, r3, #2
 80145b6:	4413      	add	r3, r2
 80145b8:	881b      	ldrh	r3, [r3, #0]
 80145ba:	b29b      	uxth	r3, r3
 80145bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80145c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80145c4:	82bb      	strh	r3, [r7, #20]
 80145c6:	687a      	ldr	r2, [r7, #4]
 80145c8:	683b      	ldr	r3, [r7, #0]
 80145ca:	781b      	ldrb	r3, [r3, #0]
 80145cc:	009b      	lsls	r3, r3, #2
 80145ce:	441a      	add	r2, r3
 80145d0:	8abb      	ldrh	r3, [r7, #20]
 80145d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80145d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80145da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80145de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80145e2:	b29b      	uxth	r3, r3
 80145e4:	8013      	strh	r3, [r2, #0]
 80145e6:	e0a3      	b.n	8014730 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80145e8:	687a      	ldr	r2, [r7, #4]
 80145ea:	683b      	ldr	r3, [r7, #0]
 80145ec:	781b      	ldrb	r3, [r3, #0]
 80145ee:	009b      	lsls	r3, r3, #2
 80145f0:	4413      	add	r3, r2
 80145f2:	881b      	ldrh	r3, [r3, #0]
 80145f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80145f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80145f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d01b      	beq.n	8014638 <USB_DeactivateEndpoint+0x2d4>
 8014600:	687a      	ldr	r2, [r7, #4]
 8014602:	683b      	ldr	r3, [r7, #0]
 8014604:	781b      	ldrb	r3, [r3, #0]
 8014606:	009b      	lsls	r3, r3, #2
 8014608:	4413      	add	r3, r2
 801460a:	881b      	ldrh	r3, [r3, #0]
 801460c:	b29b      	uxth	r3, r3
 801460e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014616:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8014618:	687a      	ldr	r2, [r7, #4]
 801461a:	683b      	ldr	r3, [r7, #0]
 801461c:	781b      	ldrb	r3, [r3, #0]
 801461e:	009b      	lsls	r3, r3, #2
 8014620:	441a      	add	r2, r3
 8014622:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014628:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801462c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8014630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014634:	b29b      	uxth	r3, r3
 8014636:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8014638:	687a      	ldr	r2, [r7, #4]
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	781b      	ldrb	r3, [r3, #0]
 801463e:	009b      	lsls	r3, r3, #2
 8014640:	4413      	add	r3, r2
 8014642:	881b      	ldrh	r3, [r3, #0]
 8014644:	857b      	strh	r3, [r7, #42]	; 0x2a
 8014646:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801464c:	2b00      	cmp	r3, #0
 801464e:	d01b      	beq.n	8014688 <USB_DeactivateEndpoint+0x324>
 8014650:	687a      	ldr	r2, [r7, #4]
 8014652:	683b      	ldr	r3, [r7, #0]
 8014654:	781b      	ldrb	r3, [r3, #0]
 8014656:	009b      	lsls	r3, r3, #2
 8014658:	4413      	add	r3, r2
 801465a:	881b      	ldrh	r3, [r3, #0]
 801465c:	b29b      	uxth	r3, r3
 801465e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014666:	853b      	strh	r3, [r7, #40]	; 0x28
 8014668:	687a      	ldr	r2, [r7, #4]
 801466a:	683b      	ldr	r3, [r7, #0]
 801466c:	781b      	ldrb	r3, [r3, #0]
 801466e:	009b      	lsls	r3, r3, #2
 8014670:	441a      	add	r2, r3
 8014672:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801467c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014680:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8014684:	b29b      	uxth	r3, r3
 8014686:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8014688:	687a      	ldr	r2, [r7, #4]
 801468a:	683b      	ldr	r3, [r7, #0]
 801468c:	781b      	ldrb	r3, [r3, #0]
 801468e:	009b      	lsls	r3, r3, #2
 8014690:	4413      	add	r3, r2
 8014692:	881b      	ldrh	r3, [r3, #0]
 8014694:	b29b      	uxth	r3, r3
 8014696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801469a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801469e:	84fb      	strh	r3, [r7, #38]	; 0x26
 80146a0:	687a      	ldr	r2, [r7, #4]
 80146a2:	683b      	ldr	r3, [r7, #0]
 80146a4:	781b      	ldrb	r3, [r3, #0]
 80146a6:	009b      	lsls	r3, r3, #2
 80146a8:	441a      	add	r2, r3
 80146aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80146ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80146b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80146b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80146b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146bc:	b29b      	uxth	r3, r3
 80146be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80146c0:	687a      	ldr	r2, [r7, #4]
 80146c2:	683b      	ldr	r3, [r7, #0]
 80146c4:	781b      	ldrb	r3, [r3, #0]
 80146c6:	009b      	lsls	r3, r3, #2
 80146c8:	4413      	add	r3, r2
 80146ca:	881b      	ldrh	r3, [r3, #0]
 80146cc:	b29b      	uxth	r3, r3
 80146ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80146d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80146d6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80146d8:	687a      	ldr	r2, [r7, #4]
 80146da:	683b      	ldr	r3, [r7, #0]
 80146dc:	781b      	ldrb	r3, [r3, #0]
 80146de:	009b      	lsls	r3, r3, #2
 80146e0:	441a      	add	r2, r3
 80146e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80146e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80146e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80146ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80146f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146f4:	b29b      	uxth	r3, r3
 80146f6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80146f8:	687a      	ldr	r2, [r7, #4]
 80146fa:	683b      	ldr	r3, [r7, #0]
 80146fc:	781b      	ldrb	r3, [r3, #0]
 80146fe:	009b      	lsls	r3, r3, #2
 8014700:	4413      	add	r3, r2
 8014702:	881b      	ldrh	r3, [r3, #0]
 8014704:	b29b      	uxth	r3, r3
 8014706:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801470a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801470e:	847b      	strh	r3, [r7, #34]	; 0x22
 8014710:	687a      	ldr	r2, [r7, #4]
 8014712:	683b      	ldr	r3, [r7, #0]
 8014714:	781b      	ldrb	r3, [r3, #0]
 8014716:	009b      	lsls	r3, r3, #2
 8014718:	441a      	add	r2, r3
 801471a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801471c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014720:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801472c:	b29b      	uxth	r3, r3
 801472e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8014730:	2300      	movs	r3, #0
}
 8014732:	4618      	mov	r0, r3
 8014734:	3734      	adds	r7, #52	; 0x34
 8014736:	46bd      	mov	sp, r7
 8014738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801473c:	4770      	bx	lr

0801473e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801473e:	b580      	push	{r7, lr}
 8014740:	b0c2      	sub	sp, #264	; 0x108
 8014742:	af00      	add	r7, sp, #0
 8014744:	1d3b      	adds	r3, r7, #4
 8014746:	6018      	str	r0, [r3, #0]
 8014748:	463b      	mov	r3, r7
 801474a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801474c:	463b      	mov	r3, r7
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	785b      	ldrb	r3, [r3, #1]
 8014752:	2b01      	cmp	r3, #1
 8014754:	f040 8545 	bne.w	80151e2 <USB_EPStartXfer+0xaa4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8014758:	463b      	mov	r3, r7
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	699a      	ldr	r2, [r3, #24]
 801475e:	463b      	mov	r3, r7
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	691b      	ldr	r3, [r3, #16]
 8014764:	429a      	cmp	r2, r3
 8014766:	d905      	bls.n	8014774 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8014768:	463b      	mov	r3, r7
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	691b      	ldr	r3, [r3, #16]
 801476e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014772:	e004      	b.n	801477e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8014774:	463b      	mov	r3, r7
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	699b      	ldr	r3, [r3, #24]
 801477a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801477e:	463b      	mov	r3, r7
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	7b1b      	ldrb	r3, [r3, #12]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d128      	bne.n	80147da <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8014788:	463b      	mov	r3, r7
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	6959      	ldr	r1, [r3, #20]
 801478e:	463b      	mov	r3, r7
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	88da      	ldrh	r2, [r3, #6]
 8014794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014798:	b29b      	uxth	r3, r3
 801479a:	1d38      	adds	r0, r7, #4
 801479c:	6800      	ldr	r0, [r0, #0]
 801479e:	f001 fa48 	bl	8015c32 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80147a2:	1d3b      	adds	r3, r7, #4
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	613b      	str	r3, [r7, #16]
 80147a8:	1d3b      	adds	r3, r7, #4
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80147b0:	b29b      	uxth	r3, r3
 80147b2:	461a      	mov	r2, r3
 80147b4:	693b      	ldr	r3, [r7, #16]
 80147b6:	4413      	add	r3, r2
 80147b8:	613b      	str	r3, [r7, #16]
 80147ba:	463b      	mov	r3, r7
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	781b      	ldrb	r3, [r3, #0]
 80147c0:	00da      	lsls	r2, r3, #3
 80147c2:	693b      	ldr	r3, [r7, #16]
 80147c4:	4413      	add	r3, r2
 80147c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80147ca:	60fb      	str	r3, [r7, #12]
 80147cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80147d0:	b29a      	uxth	r2, r3
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	801a      	strh	r2, [r3, #0]
 80147d6:	f000 bcdb 	b.w	8015190 <USB_EPStartXfer+0xa52>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80147da:	463b      	mov	r3, r7
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	78db      	ldrb	r3, [r3, #3]
 80147e0:	2b02      	cmp	r3, #2
 80147e2:	f040 836f 	bne.w	8014ec4 <USB_EPStartXfer+0x786>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80147e6:	463b      	mov	r3, r7
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	6a1a      	ldr	r2, [r3, #32]
 80147ec:	463b      	mov	r3, r7
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	691b      	ldr	r3, [r3, #16]
 80147f2:	429a      	cmp	r2, r3
 80147f4:	f240 8313 	bls.w	8014e1e <USB_EPStartXfer+0x6e0>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80147f8:	1d3b      	adds	r3, r7, #4
 80147fa:	681a      	ldr	r2, [r3, #0]
 80147fc:	463b      	mov	r3, r7
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	781b      	ldrb	r3, [r3, #0]
 8014802:	009b      	lsls	r3, r3, #2
 8014804:	4413      	add	r3, r2
 8014806:	881b      	ldrh	r3, [r3, #0]
 8014808:	b29b      	uxth	r3, r3
 801480a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801480e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014812:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8014816:	1d3b      	adds	r3, r7, #4
 8014818:	681a      	ldr	r2, [r3, #0]
 801481a:	463b      	mov	r3, r7
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	781b      	ldrb	r3, [r3, #0]
 8014820:	009b      	lsls	r3, r3, #2
 8014822:	441a      	add	r2, r3
 8014824:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8014828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801482c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014830:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8014834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014838:	b29b      	uxth	r3, r3
 801483a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801483c:	463b      	mov	r3, r7
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	6a1a      	ldr	r2, [r3, #32]
 8014842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014846:	1ad2      	subs	r2, r2, r3
 8014848:	463b      	mov	r3, r7
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801484e:	1d3b      	adds	r3, r7, #4
 8014850:	681a      	ldr	r2, [r3, #0]
 8014852:	463b      	mov	r3, r7
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	781b      	ldrb	r3, [r3, #0]
 8014858:	009b      	lsls	r3, r3, #2
 801485a:	4413      	add	r3, r2
 801485c:	881b      	ldrh	r3, [r3, #0]
 801485e:	b29b      	uxth	r3, r3
 8014860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014864:	2b00      	cmp	r3, #0
 8014866:	f000 816d 	beq.w	8014b44 <USB_EPStartXfer+0x406>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801486a:	1d3b      	adds	r3, r7, #4
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	633b      	str	r3, [r7, #48]	; 0x30
 8014870:	463b      	mov	r3, r7
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	785b      	ldrb	r3, [r3, #1]
 8014876:	2b00      	cmp	r3, #0
 8014878:	d16e      	bne.n	8014958 <USB_EPStartXfer+0x21a>
 801487a:	1d3b      	adds	r3, r7, #4
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014880:	1d3b      	adds	r3, r7, #4
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014888:	b29b      	uxth	r3, r3
 801488a:	461a      	mov	r2, r3
 801488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801488e:	4413      	add	r3, r2
 8014890:	62bb      	str	r3, [r7, #40]	; 0x28
 8014892:	463b      	mov	r3, r7
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	781b      	ldrb	r3, [r3, #0]
 8014898:	00da      	lsls	r2, r3, #3
 801489a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801489c:	4413      	add	r3, r2
 801489e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80148a2:	627b      	str	r3, [r7, #36]	; 0x24
 80148a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148a6:	881b      	ldrh	r3, [r3, #0]
 80148a8:	b29b      	uxth	r3, r3
 80148aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80148ae:	b29a      	uxth	r2, r3
 80148b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148b2:	801a      	strh	r2, [r3, #0]
 80148b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d10a      	bne.n	80148d2 <USB_EPStartXfer+0x194>
 80148bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148be:	881b      	ldrh	r3, [r3, #0]
 80148c0:	b29b      	uxth	r3, r3
 80148c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80148c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80148ca:	b29a      	uxth	r2, r3
 80148cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ce:	801a      	strh	r2, [r3, #0]
 80148d0:	e05e      	b.n	8014990 <USB_EPStartXfer+0x252>
 80148d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80148d6:	2b3e      	cmp	r3, #62	; 0x3e
 80148d8:	d81c      	bhi.n	8014914 <USB_EPStartXfer+0x1d6>
 80148da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80148de:	085b      	lsrs	r3, r3, #1
 80148e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80148e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80148e8:	f003 0301 	and.w	r3, r3, #1
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d004      	beq.n	80148fa <USB_EPStartXfer+0x1bc>
 80148f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80148f4:	3301      	adds	r3, #1
 80148f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80148fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148fc:	881b      	ldrh	r3, [r3, #0]
 80148fe:	b29a      	uxth	r2, r3
 8014900:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8014904:	b29b      	uxth	r3, r3
 8014906:	029b      	lsls	r3, r3, #10
 8014908:	b29b      	uxth	r3, r3
 801490a:	4313      	orrs	r3, r2
 801490c:	b29a      	uxth	r2, r3
 801490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014910:	801a      	strh	r2, [r3, #0]
 8014912:	e03d      	b.n	8014990 <USB_EPStartXfer+0x252>
 8014914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014918:	095b      	lsrs	r3, r3, #5
 801491a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801491e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014922:	f003 031f 	and.w	r3, r3, #31
 8014926:	2b00      	cmp	r3, #0
 8014928:	d104      	bne.n	8014934 <USB_EPStartXfer+0x1f6>
 801492a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801492e:	3b01      	subs	r3, #1
 8014930:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8014934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014936:	881b      	ldrh	r3, [r3, #0]
 8014938:	b29a      	uxth	r2, r3
 801493a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801493e:	b29b      	uxth	r3, r3
 8014940:	029b      	lsls	r3, r3, #10
 8014942:	b29b      	uxth	r3, r3
 8014944:	4313      	orrs	r3, r2
 8014946:	b29b      	uxth	r3, r3
 8014948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801494c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014950:	b29a      	uxth	r2, r3
 8014952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014954:	801a      	strh	r2, [r3, #0]
 8014956:	e01b      	b.n	8014990 <USB_EPStartXfer+0x252>
 8014958:	463b      	mov	r3, r7
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	785b      	ldrb	r3, [r3, #1]
 801495e:	2b01      	cmp	r3, #1
 8014960:	d116      	bne.n	8014990 <USB_EPStartXfer+0x252>
 8014962:	1d3b      	adds	r3, r7, #4
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801496a:	b29b      	uxth	r3, r3
 801496c:	461a      	mov	r2, r3
 801496e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014970:	4413      	add	r3, r2
 8014972:	633b      	str	r3, [r7, #48]	; 0x30
 8014974:	463b      	mov	r3, r7
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	781b      	ldrb	r3, [r3, #0]
 801497a:	00da      	lsls	r2, r3, #3
 801497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801497e:	4413      	add	r3, r2
 8014980:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801498a:	b29a      	uxth	r2, r3
 801498c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801498e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8014990:	463b      	mov	r3, r7
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	895b      	ldrh	r3, [r3, #10]
 8014996:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801499a:	463b      	mov	r3, r7
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	6959      	ldr	r1, [r3, #20]
 80149a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80149a4:	b29b      	uxth	r3, r3
 80149a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80149aa:	1d38      	adds	r0, r7, #4
 80149ac:	6800      	ldr	r0, [r0, #0]
 80149ae:	f001 f940 	bl	8015c32 <USB_WritePMA>
            ep->xfer_buff += len;
 80149b2:	463b      	mov	r3, r7
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	695a      	ldr	r2, [r3, #20]
 80149b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80149bc:	441a      	add	r2, r3
 80149be:	463b      	mov	r3, r7
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80149c4:	463b      	mov	r3, r7
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	6a1a      	ldr	r2, [r3, #32]
 80149ca:	463b      	mov	r3, r7
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	691b      	ldr	r3, [r3, #16]
 80149d0:	429a      	cmp	r2, r3
 80149d2:	d909      	bls.n	80149e8 <USB_EPStartXfer+0x2aa>
            {
              ep->xfer_len_db -= len;
 80149d4:	463b      	mov	r3, r7
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	6a1a      	ldr	r2, [r3, #32]
 80149da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80149de:	1ad2      	subs	r2, r2, r3
 80149e0:	463b      	mov	r3, r7
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	621a      	str	r2, [r3, #32]
 80149e6:	e008      	b.n	80149fa <USB_EPStartXfer+0x2bc>
            }
            else
            {
              len = ep->xfer_len_db;
 80149e8:	463b      	mov	r3, r7
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	6a1b      	ldr	r3, [r3, #32]
 80149ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80149f2:	463b      	mov	r3, r7
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	2200      	movs	r2, #0
 80149f8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80149fa:	463b      	mov	r3, r7
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	785b      	ldrb	r3, [r3, #1]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d16e      	bne.n	8014ae2 <USB_EPStartXfer+0x3a4>
 8014a04:	1d3b      	adds	r3, r7, #4
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	61bb      	str	r3, [r7, #24]
 8014a0a:	1d3b      	adds	r3, r7, #4
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014a12:	b29b      	uxth	r3, r3
 8014a14:	461a      	mov	r2, r3
 8014a16:	69bb      	ldr	r3, [r7, #24]
 8014a18:	4413      	add	r3, r2
 8014a1a:	61bb      	str	r3, [r7, #24]
 8014a1c:	463b      	mov	r3, r7
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	781b      	ldrb	r3, [r3, #0]
 8014a22:	00da      	lsls	r2, r3, #3
 8014a24:	69bb      	ldr	r3, [r7, #24]
 8014a26:	4413      	add	r3, r2
 8014a28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8014a2c:	617b      	str	r3, [r7, #20]
 8014a2e:	697b      	ldr	r3, [r7, #20]
 8014a30:	881b      	ldrh	r3, [r3, #0]
 8014a32:	b29b      	uxth	r3, r3
 8014a34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014a38:	b29a      	uxth	r2, r3
 8014a3a:	697b      	ldr	r3, [r7, #20]
 8014a3c:	801a      	strh	r2, [r3, #0]
 8014a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d10a      	bne.n	8014a5c <USB_EPStartXfer+0x31e>
 8014a46:	697b      	ldr	r3, [r7, #20]
 8014a48:	881b      	ldrh	r3, [r3, #0]
 8014a4a:	b29b      	uxth	r3, r3
 8014a4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014a50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014a54:	b29a      	uxth	r2, r3
 8014a56:	697b      	ldr	r3, [r7, #20]
 8014a58:	801a      	strh	r2, [r3, #0]
 8014a5a:	e061      	b.n	8014b20 <USB_EPStartXfer+0x3e2>
 8014a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014a60:	2b3e      	cmp	r3, #62	; 0x3e
 8014a62:	d81c      	bhi.n	8014a9e <USB_EPStartXfer+0x360>
 8014a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014a68:	085b      	lsrs	r3, r3, #1
 8014a6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8014a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014a72:	f003 0301 	and.w	r3, r3, #1
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d004      	beq.n	8014a84 <USB_EPStartXfer+0x346>
 8014a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014a7e:	3301      	adds	r3, #1
 8014a80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8014a84:	697b      	ldr	r3, [r7, #20]
 8014a86:	881b      	ldrh	r3, [r3, #0]
 8014a88:	b29a      	uxth	r2, r3
 8014a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014a8e:	b29b      	uxth	r3, r3
 8014a90:	029b      	lsls	r3, r3, #10
 8014a92:	b29b      	uxth	r3, r3
 8014a94:	4313      	orrs	r3, r2
 8014a96:	b29a      	uxth	r2, r3
 8014a98:	697b      	ldr	r3, [r7, #20]
 8014a9a:	801a      	strh	r2, [r3, #0]
 8014a9c:	e040      	b.n	8014b20 <USB_EPStartXfer+0x3e2>
 8014a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014aa2:	095b      	lsrs	r3, r3, #5
 8014aa4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8014aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014aac:	f003 031f 	and.w	r3, r3, #31
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d104      	bne.n	8014abe <USB_EPStartXfer+0x380>
 8014ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014ab8:	3b01      	subs	r3, #1
 8014aba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8014abe:	697b      	ldr	r3, [r7, #20]
 8014ac0:	881b      	ldrh	r3, [r3, #0]
 8014ac2:	b29a      	uxth	r2, r3
 8014ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014ac8:	b29b      	uxth	r3, r3
 8014aca:	029b      	lsls	r3, r3, #10
 8014acc:	b29b      	uxth	r3, r3
 8014ace:	4313      	orrs	r3, r2
 8014ad0:	b29b      	uxth	r3, r3
 8014ad2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014ad6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014ada:	b29a      	uxth	r2, r3
 8014adc:	697b      	ldr	r3, [r7, #20]
 8014ade:	801a      	strh	r2, [r3, #0]
 8014ae0:	e01e      	b.n	8014b20 <USB_EPStartXfer+0x3e2>
 8014ae2:	463b      	mov	r3, r7
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	785b      	ldrb	r3, [r3, #1]
 8014ae8:	2b01      	cmp	r3, #1
 8014aea:	d119      	bne.n	8014b20 <USB_EPStartXfer+0x3e2>
 8014aec:	1d3b      	adds	r3, r7, #4
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	623b      	str	r3, [r7, #32]
 8014af2:	1d3b      	adds	r3, r7, #4
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014afa:	b29b      	uxth	r3, r3
 8014afc:	461a      	mov	r2, r3
 8014afe:	6a3b      	ldr	r3, [r7, #32]
 8014b00:	4413      	add	r3, r2
 8014b02:	623b      	str	r3, [r7, #32]
 8014b04:	463b      	mov	r3, r7
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	781b      	ldrb	r3, [r3, #0]
 8014b0a:	00da      	lsls	r2, r3, #3
 8014b0c:	6a3b      	ldr	r3, [r7, #32]
 8014b0e:	4413      	add	r3, r2
 8014b10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8014b14:	61fb      	str	r3, [r7, #28]
 8014b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014b1a:	b29a      	uxth	r2, r3
 8014b1c:	69fb      	ldr	r3, [r7, #28]
 8014b1e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8014b20:	463b      	mov	r3, r7
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	891b      	ldrh	r3, [r3, #8]
 8014b26:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014b2a:	463b      	mov	r3, r7
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	6959      	ldr	r1, [r3, #20]
 8014b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014b34:	b29b      	uxth	r3, r3
 8014b36:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8014b3a:	1d38      	adds	r0, r7, #4
 8014b3c:	6800      	ldr	r0, [r0, #0]
 8014b3e:	f001 f878 	bl	8015c32 <USB_WritePMA>
 8014b42:	e325      	b.n	8015190 <USB_EPStartXfer+0xa52>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8014b44:	463b      	mov	r3, r7
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	785b      	ldrb	r3, [r3, #1]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d16e      	bne.n	8014c2c <USB_EPStartXfer+0x4ee>
 8014b4e:	1d3b      	adds	r3, r7, #4
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	64bb      	str	r3, [r7, #72]	; 0x48
 8014b54:	1d3b      	adds	r3, r7, #4
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014b5c:	b29b      	uxth	r3, r3
 8014b5e:	461a      	mov	r2, r3
 8014b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b62:	4413      	add	r3, r2
 8014b64:	64bb      	str	r3, [r7, #72]	; 0x48
 8014b66:	463b      	mov	r3, r7
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	781b      	ldrb	r3, [r3, #0]
 8014b6c:	00da      	lsls	r2, r3, #3
 8014b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b70:	4413      	add	r3, r2
 8014b72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8014b76:	647b      	str	r3, [r7, #68]	; 0x44
 8014b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b7a:	881b      	ldrh	r3, [r3, #0]
 8014b7c:	b29b      	uxth	r3, r3
 8014b7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014b82:	b29a      	uxth	r2, r3
 8014b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b86:	801a      	strh	r2, [r3, #0]
 8014b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d10a      	bne.n	8014ba6 <USB_EPStartXfer+0x468>
 8014b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b92:	881b      	ldrh	r3, [r3, #0]
 8014b94:	b29b      	uxth	r3, r3
 8014b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014b9e:	b29a      	uxth	r2, r3
 8014ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ba2:	801a      	strh	r2, [r3, #0]
 8014ba4:	e061      	b.n	8014c6a <USB_EPStartXfer+0x52c>
 8014ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014baa:	2b3e      	cmp	r3, #62	; 0x3e
 8014bac:	d81c      	bhi.n	8014be8 <USB_EPStartXfer+0x4aa>
 8014bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014bb2:	085b      	lsrs	r3, r3, #1
 8014bb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8014bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014bbc:	f003 0301 	and.w	r3, r3, #1
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d004      	beq.n	8014bce <USB_EPStartXfer+0x490>
 8014bc4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8014bc8:	3301      	adds	r3, #1
 8014bca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8014bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014bd0:	881b      	ldrh	r3, [r3, #0]
 8014bd2:	b29a      	uxth	r2, r3
 8014bd4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8014bd8:	b29b      	uxth	r3, r3
 8014bda:	029b      	lsls	r3, r3, #10
 8014bdc:	b29b      	uxth	r3, r3
 8014bde:	4313      	orrs	r3, r2
 8014be0:	b29a      	uxth	r2, r3
 8014be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014be4:	801a      	strh	r2, [r3, #0]
 8014be6:	e040      	b.n	8014c6a <USB_EPStartXfer+0x52c>
 8014be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014bec:	095b      	lsrs	r3, r3, #5
 8014bee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8014bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014bf6:	f003 031f 	and.w	r3, r3, #31
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d104      	bne.n	8014c08 <USB_EPStartXfer+0x4ca>
 8014bfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8014c02:	3b01      	subs	r3, #1
 8014c04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8014c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c0a:	881b      	ldrh	r3, [r3, #0]
 8014c0c:	b29a      	uxth	r2, r3
 8014c0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8014c12:	b29b      	uxth	r3, r3
 8014c14:	029b      	lsls	r3, r3, #10
 8014c16:	b29b      	uxth	r3, r3
 8014c18:	4313      	orrs	r3, r2
 8014c1a:	b29b      	uxth	r3, r3
 8014c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014c24:	b29a      	uxth	r2, r3
 8014c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c28:	801a      	strh	r2, [r3, #0]
 8014c2a:	e01e      	b.n	8014c6a <USB_EPStartXfer+0x52c>
 8014c2c:	463b      	mov	r3, r7
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	785b      	ldrb	r3, [r3, #1]
 8014c32:	2b01      	cmp	r3, #1
 8014c34:	d119      	bne.n	8014c6a <USB_EPStartXfer+0x52c>
 8014c36:	1d3b      	adds	r3, r7, #4
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	653b      	str	r3, [r7, #80]	; 0x50
 8014c3c:	1d3b      	adds	r3, r7, #4
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014c44:	b29b      	uxth	r3, r3
 8014c46:	461a      	mov	r2, r3
 8014c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c4a:	4413      	add	r3, r2
 8014c4c:	653b      	str	r3, [r7, #80]	; 0x50
 8014c4e:	463b      	mov	r3, r7
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	781b      	ldrb	r3, [r3, #0]
 8014c54:	00da      	lsls	r2, r3, #3
 8014c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c58:	4413      	add	r3, r2
 8014c5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8014c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014c64:	b29a      	uxth	r2, r3
 8014c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8014c6a:	463b      	mov	r3, r7
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	891b      	ldrh	r3, [r3, #8]
 8014c70:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014c74:	463b      	mov	r3, r7
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	6959      	ldr	r1, [r3, #20]
 8014c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014c7e:	b29b      	uxth	r3, r3
 8014c80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8014c84:	1d38      	adds	r0, r7, #4
 8014c86:	6800      	ldr	r0, [r0, #0]
 8014c88:	f000 ffd3 	bl	8015c32 <USB_WritePMA>
            ep->xfer_buff += len;
 8014c8c:	463b      	mov	r3, r7
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	695a      	ldr	r2, [r3, #20]
 8014c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014c96:	441a      	add	r2, r3
 8014c98:	463b      	mov	r3, r7
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8014c9e:	463b      	mov	r3, r7
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	6a1a      	ldr	r2, [r3, #32]
 8014ca4:	463b      	mov	r3, r7
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	691b      	ldr	r3, [r3, #16]
 8014caa:	429a      	cmp	r2, r3
 8014cac:	d909      	bls.n	8014cc2 <USB_EPStartXfer+0x584>
            {
              ep->xfer_len_db -= len;
 8014cae:	463b      	mov	r3, r7
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	6a1a      	ldr	r2, [r3, #32]
 8014cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014cb8:	1ad2      	subs	r2, r2, r3
 8014cba:	463b      	mov	r3, r7
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	621a      	str	r2, [r3, #32]
 8014cc0:	e008      	b.n	8014cd4 <USB_EPStartXfer+0x596>
            }
            else
            {
              len = ep->xfer_len_db;
 8014cc2:	463b      	mov	r3, r7
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	6a1b      	ldr	r3, [r3, #32]
 8014cc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8014ccc:	463b      	mov	r3, r7
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	2200      	movs	r2, #0
 8014cd2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8014cd4:	1d3b      	adds	r3, r7, #4
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	643b      	str	r3, [r7, #64]	; 0x40
 8014cda:	463b      	mov	r3, r7
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	785b      	ldrb	r3, [r3, #1]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d16e      	bne.n	8014dc2 <USB_EPStartXfer+0x684>
 8014ce4:	1d3b      	adds	r3, r7, #4
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	63bb      	str	r3, [r7, #56]	; 0x38
 8014cea:	1d3b      	adds	r3, r7, #4
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014cf2:	b29b      	uxth	r3, r3
 8014cf4:	461a      	mov	r2, r3
 8014cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cf8:	4413      	add	r3, r2
 8014cfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8014cfc:	463b      	mov	r3, r7
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	781b      	ldrb	r3, [r3, #0]
 8014d02:	00da      	lsls	r2, r3, #3
 8014d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d06:	4413      	add	r3, r2
 8014d08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8014d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d10:	881b      	ldrh	r3, [r3, #0]
 8014d12:	b29b      	uxth	r3, r3
 8014d14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014d18:	b29a      	uxth	r2, r3
 8014d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d1c:	801a      	strh	r2, [r3, #0]
 8014d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d10a      	bne.n	8014d3c <USB_EPStartXfer+0x5fe>
 8014d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d28:	881b      	ldrh	r3, [r3, #0]
 8014d2a:	b29b      	uxth	r3, r3
 8014d2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014d30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014d34:	b29a      	uxth	r2, r3
 8014d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d38:	801a      	strh	r2, [r3, #0]
 8014d3a:	e05e      	b.n	8014dfa <USB_EPStartXfer+0x6bc>
 8014d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014d40:	2b3e      	cmp	r3, #62	; 0x3e
 8014d42:	d81c      	bhi.n	8014d7e <USB_EPStartXfer+0x640>
 8014d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014d48:	085b      	lsrs	r3, r3, #1
 8014d4a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8014d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014d52:	f003 0301 	and.w	r3, r3, #1
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d004      	beq.n	8014d64 <USB_EPStartXfer+0x626>
 8014d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014d5e:	3301      	adds	r3, #1
 8014d60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8014d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d66:	881b      	ldrh	r3, [r3, #0]
 8014d68:	b29a      	uxth	r2, r3
 8014d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014d6e:	b29b      	uxth	r3, r3
 8014d70:	029b      	lsls	r3, r3, #10
 8014d72:	b29b      	uxth	r3, r3
 8014d74:	4313      	orrs	r3, r2
 8014d76:	b29a      	uxth	r2, r3
 8014d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d7a:	801a      	strh	r2, [r3, #0]
 8014d7c:	e03d      	b.n	8014dfa <USB_EPStartXfer+0x6bc>
 8014d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014d82:	095b      	lsrs	r3, r3, #5
 8014d84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8014d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014d8c:	f003 031f 	and.w	r3, r3, #31
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d104      	bne.n	8014d9e <USB_EPStartXfer+0x660>
 8014d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014d98:	3b01      	subs	r3, #1
 8014d9a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8014d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014da0:	881b      	ldrh	r3, [r3, #0]
 8014da2:	b29a      	uxth	r2, r3
 8014da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014da8:	b29b      	uxth	r3, r3
 8014daa:	029b      	lsls	r3, r3, #10
 8014dac:	b29b      	uxth	r3, r3
 8014dae:	4313      	orrs	r3, r2
 8014db0:	b29b      	uxth	r3, r3
 8014db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014dba:	b29a      	uxth	r2, r3
 8014dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dbe:	801a      	strh	r2, [r3, #0]
 8014dc0:	e01b      	b.n	8014dfa <USB_EPStartXfer+0x6bc>
 8014dc2:	463b      	mov	r3, r7
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	785b      	ldrb	r3, [r3, #1]
 8014dc8:	2b01      	cmp	r3, #1
 8014dca:	d116      	bne.n	8014dfa <USB_EPStartXfer+0x6bc>
 8014dcc:	1d3b      	adds	r3, r7, #4
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014dd4:	b29b      	uxth	r3, r3
 8014dd6:	461a      	mov	r2, r3
 8014dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014dda:	4413      	add	r3, r2
 8014ddc:	643b      	str	r3, [r7, #64]	; 0x40
 8014dde:	463b      	mov	r3, r7
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	781b      	ldrb	r3, [r3, #0]
 8014de4:	00da      	lsls	r2, r3, #3
 8014de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014de8:	4413      	add	r3, r2
 8014dea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014df4:	b29a      	uxth	r2, r3
 8014df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014df8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8014dfa:	463b      	mov	r3, r7
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	895b      	ldrh	r3, [r3, #10]
 8014e00:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014e04:	463b      	mov	r3, r7
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	6959      	ldr	r1, [r3, #20]
 8014e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014e0e:	b29b      	uxth	r3, r3
 8014e10:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8014e14:	1d38      	adds	r0, r7, #4
 8014e16:	6800      	ldr	r0, [r0, #0]
 8014e18:	f000 ff0b 	bl	8015c32 <USB_WritePMA>
 8014e1c:	e1b8      	b.n	8015190 <USB_EPStartXfer+0xa52>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8014e1e:	463b      	mov	r3, r7
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	6a1b      	ldr	r3, [r3, #32]
 8014e24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8014e28:	1d3b      	adds	r3, r7, #4
 8014e2a:	681a      	ldr	r2, [r3, #0]
 8014e2c:	463b      	mov	r3, r7
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	781b      	ldrb	r3, [r3, #0]
 8014e32:	009b      	lsls	r3, r3, #2
 8014e34:	4413      	add	r3, r2
 8014e36:	881b      	ldrh	r3, [r3, #0]
 8014e38:	b29b      	uxth	r3, r3
 8014e3a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8014e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014e42:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8014e46:	1d3b      	adds	r3, r7, #4
 8014e48:	681a      	ldr	r2, [r3, #0]
 8014e4a:	463b      	mov	r3, r7
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	781b      	ldrb	r3, [r3, #0]
 8014e50:	009b      	lsls	r3, r3, #2
 8014e52:	441a      	add	r2, r3
 8014e54:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8014e58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014e5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014e68:	b29b      	uxth	r3, r3
 8014e6a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8014e6c:	1d3b      	adds	r3, r7, #4
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014e72:	1d3b      	adds	r3, r7, #4
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014e7a:	b29b      	uxth	r3, r3
 8014e7c:	461a      	mov	r2, r3
 8014e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014e80:	4413      	add	r3, r2
 8014e82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014e84:	463b      	mov	r3, r7
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	781b      	ldrb	r3, [r3, #0]
 8014e8a:	00da      	lsls	r2, r3, #3
 8014e8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014e8e:	4413      	add	r3, r2
 8014e90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8014e94:	65bb      	str	r3, [r7, #88]	; 0x58
 8014e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014e9a:	b29a      	uxth	r2, r3
 8014e9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014e9e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8014ea0:	463b      	mov	r3, r7
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	891b      	ldrh	r3, [r3, #8]
 8014ea6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014eaa:	463b      	mov	r3, r7
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	6959      	ldr	r1, [r3, #20]
 8014eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014eb4:	b29b      	uxth	r3, r3
 8014eb6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8014eba:	1d38      	adds	r0, r7, #4
 8014ebc:	6800      	ldr	r0, [r0, #0]
 8014ebe:	f000 feb8 	bl	8015c32 <USB_WritePMA>
 8014ec2:	e165      	b.n	8015190 <USB_EPStartXfer+0xa52>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8014ec4:	463b      	mov	r3, r7
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	6a1a      	ldr	r2, [r3, #32]
 8014eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014ece:	1ad2      	subs	r2, r2, r3
 8014ed0:	463b      	mov	r3, r7
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8014ed6:	1d3b      	adds	r3, r7, #4
 8014ed8:	681a      	ldr	r2, [r3, #0]
 8014eda:	463b      	mov	r3, r7
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	781b      	ldrb	r3, [r3, #0]
 8014ee0:	009b      	lsls	r3, r3, #2
 8014ee2:	4413      	add	r3, r2
 8014ee4:	881b      	ldrh	r3, [r3, #0]
 8014ee6:	b29b      	uxth	r3, r3
 8014ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	f000 80a5 	beq.w	801503c <USB_EPStartXfer+0x8fe>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8014ef2:	1d3b      	adds	r3, r7, #4
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	673b      	str	r3, [r7, #112]	; 0x70
 8014ef8:	463b      	mov	r3, r7
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	785b      	ldrb	r3, [r3, #1]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d16e      	bne.n	8014fe0 <USB_EPStartXfer+0x8a2>
 8014f02:	1d3b      	adds	r3, r7, #4
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	66bb      	str	r3, [r7, #104]	; 0x68
 8014f08:	1d3b      	adds	r3, r7, #4
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014f10:	b29b      	uxth	r3, r3
 8014f12:	461a      	mov	r2, r3
 8014f14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014f16:	4413      	add	r3, r2
 8014f18:	66bb      	str	r3, [r7, #104]	; 0x68
 8014f1a:	463b      	mov	r3, r7
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	781b      	ldrb	r3, [r3, #0]
 8014f20:	00da      	lsls	r2, r3, #3
 8014f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014f24:	4413      	add	r3, r2
 8014f26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014f2a:	667b      	str	r3, [r7, #100]	; 0x64
 8014f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014f2e:	881b      	ldrh	r3, [r3, #0]
 8014f30:	b29b      	uxth	r3, r3
 8014f32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014f36:	b29a      	uxth	r2, r3
 8014f38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014f3a:	801a      	strh	r2, [r3, #0]
 8014f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d10a      	bne.n	8014f5a <USB_EPStartXfer+0x81c>
 8014f44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014f46:	881b      	ldrh	r3, [r3, #0]
 8014f48:	b29b      	uxth	r3, r3
 8014f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014f52:	b29a      	uxth	r2, r3
 8014f54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014f56:	801a      	strh	r2, [r3, #0]
 8014f58:	e05e      	b.n	8015018 <USB_EPStartXfer+0x8da>
 8014f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014f5e:	2b3e      	cmp	r3, #62	; 0x3e
 8014f60:	d81c      	bhi.n	8014f9c <USB_EPStartXfer+0x85e>
 8014f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014f66:	085b      	lsrs	r3, r3, #1
 8014f68:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8014f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014f70:	f003 0301 	and.w	r3, r3, #1
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d004      	beq.n	8014f82 <USB_EPStartXfer+0x844>
 8014f78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8014f7c:	3301      	adds	r3, #1
 8014f7e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8014f82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014f84:	881b      	ldrh	r3, [r3, #0]
 8014f86:	b29a      	uxth	r2, r3
 8014f88:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8014f8c:	b29b      	uxth	r3, r3
 8014f8e:	029b      	lsls	r3, r3, #10
 8014f90:	b29b      	uxth	r3, r3
 8014f92:	4313      	orrs	r3, r2
 8014f94:	b29a      	uxth	r2, r3
 8014f96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014f98:	801a      	strh	r2, [r3, #0]
 8014f9a:	e03d      	b.n	8015018 <USB_EPStartXfer+0x8da>
 8014f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014fa0:	095b      	lsrs	r3, r3, #5
 8014fa2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8014fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014faa:	f003 031f 	and.w	r3, r3, #31
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d104      	bne.n	8014fbc <USB_EPStartXfer+0x87e>
 8014fb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8014fb6:	3b01      	subs	r3, #1
 8014fb8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8014fbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014fbe:	881b      	ldrh	r3, [r3, #0]
 8014fc0:	b29a      	uxth	r2, r3
 8014fc2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8014fc6:	b29b      	uxth	r3, r3
 8014fc8:	029b      	lsls	r3, r3, #10
 8014fca:	b29b      	uxth	r3, r3
 8014fcc:	4313      	orrs	r3, r2
 8014fce:	b29b      	uxth	r3, r3
 8014fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014fd8:	b29a      	uxth	r2, r3
 8014fda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014fdc:	801a      	strh	r2, [r3, #0]
 8014fde:	e01b      	b.n	8015018 <USB_EPStartXfer+0x8da>
 8014fe0:	463b      	mov	r3, r7
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	785b      	ldrb	r3, [r3, #1]
 8014fe6:	2b01      	cmp	r3, #1
 8014fe8:	d116      	bne.n	8015018 <USB_EPStartXfer+0x8da>
 8014fea:	1d3b      	adds	r3, r7, #4
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014ff2:	b29b      	uxth	r3, r3
 8014ff4:	461a      	mov	r2, r3
 8014ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014ff8:	4413      	add	r3, r2
 8014ffa:	673b      	str	r3, [r7, #112]	; 0x70
 8014ffc:	463b      	mov	r3, r7
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	781b      	ldrb	r3, [r3, #0]
 8015002:	00da      	lsls	r2, r3, #3
 8015004:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015006:	4413      	add	r3, r2
 8015008:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801500c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801500e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015012:	b29a      	uxth	r2, r3
 8015014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015016:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8015018:	463b      	mov	r3, r7
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	895b      	ldrh	r3, [r3, #10]
 801501e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8015022:	463b      	mov	r3, r7
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	6959      	ldr	r1, [r3, #20]
 8015028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801502c:	b29b      	uxth	r3, r3
 801502e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8015032:	1d38      	adds	r0, r7, #4
 8015034:	6800      	ldr	r0, [r0, #0]
 8015036:	f000 fdfc 	bl	8015c32 <USB_WritePMA>
 801503a:	e0a9      	b.n	8015190 <USB_EPStartXfer+0xa52>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801503c:	463b      	mov	r3, r7
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	785b      	ldrb	r3, [r3, #1]
 8015042:	2b00      	cmp	r3, #0
 8015044:	d16e      	bne.n	8015124 <USB_EPStartXfer+0x9e6>
 8015046:	1d3b      	adds	r3, r7, #4
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801504c:	1d3b      	adds	r3, r7, #4
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8015054:	b29b      	uxth	r3, r3
 8015056:	461a      	mov	r2, r3
 8015058:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801505a:	4413      	add	r3, r2
 801505c:	67fb      	str	r3, [r7, #124]	; 0x7c
 801505e:	463b      	mov	r3, r7
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	781b      	ldrb	r3, [r3, #0]
 8015064:	00da      	lsls	r2, r3, #3
 8015066:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015068:	4413      	add	r3, r2
 801506a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801506e:	67bb      	str	r3, [r7, #120]	; 0x78
 8015070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015072:	881b      	ldrh	r3, [r3, #0]
 8015074:	b29b      	uxth	r3, r3
 8015076:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801507a:	b29a      	uxth	r2, r3
 801507c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801507e:	801a      	strh	r2, [r3, #0]
 8015080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015084:	2b00      	cmp	r3, #0
 8015086:	d10a      	bne.n	801509e <USB_EPStartXfer+0x960>
 8015088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801508a:	881b      	ldrh	r3, [r3, #0]
 801508c:	b29b      	uxth	r3, r3
 801508e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8015092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8015096:	b29a      	uxth	r2, r3
 8015098:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801509a:	801a      	strh	r2, [r3, #0]
 801509c:	e067      	b.n	801516e <USB_EPStartXfer+0xa30>
 801509e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80150a2:	2b3e      	cmp	r3, #62	; 0x3e
 80150a4:	d81c      	bhi.n	80150e0 <USB_EPStartXfer+0x9a2>
 80150a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80150aa:	085b      	lsrs	r3, r3, #1
 80150ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80150b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80150b4:	f003 0301 	and.w	r3, r3, #1
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d004      	beq.n	80150c6 <USB_EPStartXfer+0x988>
 80150bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80150c0:	3301      	adds	r3, #1
 80150c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80150c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80150c8:	881b      	ldrh	r3, [r3, #0]
 80150ca:	b29a      	uxth	r2, r3
 80150cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80150d0:	b29b      	uxth	r3, r3
 80150d2:	029b      	lsls	r3, r3, #10
 80150d4:	b29b      	uxth	r3, r3
 80150d6:	4313      	orrs	r3, r2
 80150d8:	b29a      	uxth	r2, r3
 80150da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80150dc:	801a      	strh	r2, [r3, #0]
 80150de:	e046      	b.n	801516e <USB_EPStartXfer+0xa30>
 80150e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80150e4:	095b      	lsrs	r3, r3, #5
 80150e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80150ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80150ee:	f003 031f 	and.w	r3, r3, #31
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d104      	bne.n	8015100 <USB_EPStartXfer+0x9c2>
 80150f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80150fa:	3b01      	subs	r3, #1
 80150fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8015100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015102:	881b      	ldrh	r3, [r3, #0]
 8015104:	b29a      	uxth	r2, r3
 8015106:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801510a:	b29b      	uxth	r3, r3
 801510c:	029b      	lsls	r3, r3, #10
 801510e:	b29b      	uxth	r3, r3
 8015110:	4313      	orrs	r3, r2
 8015112:	b29b      	uxth	r3, r3
 8015114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8015118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801511c:	b29a      	uxth	r2, r3
 801511e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015120:	801a      	strh	r2, [r3, #0]
 8015122:	e024      	b.n	801516e <USB_EPStartXfer+0xa30>
 8015124:	463b      	mov	r3, r7
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	785b      	ldrb	r3, [r3, #1]
 801512a:	2b01      	cmp	r3, #1
 801512c:	d11f      	bne.n	801516e <USB_EPStartXfer+0xa30>
 801512e:	1d3b      	adds	r3, r7, #4
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015136:	1d3b      	adds	r3, r7, #4
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801513e:	b29b      	uxth	r3, r3
 8015140:	461a      	mov	r2, r3
 8015142:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015146:	4413      	add	r3, r2
 8015148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801514c:	463b      	mov	r3, r7
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	781b      	ldrb	r3, [r3, #0]
 8015152:	00da      	lsls	r2, r3, #3
 8015154:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015158:	4413      	add	r3, r2
 801515a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801515e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015166:	b29a      	uxth	r2, r3
 8015168:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801516c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801516e:	463b      	mov	r3, r7
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	891b      	ldrh	r3, [r3, #8]
 8015174:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8015178:	463b      	mov	r3, r7
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	6959      	ldr	r1, [r3, #20]
 801517e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015182:	b29b      	uxth	r3, r3
 8015184:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8015188:	1d38      	adds	r0, r7, #4
 801518a:	6800      	ldr	r0, [r0, #0]
 801518c:	f000 fd51 	bl	8015c32 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8015190:	1d3b      	adds	r3, r7, #4
 8015192:	681a      	ldr	r2, [r3, #0]
 8015194:	463b      	mov	r3, r7
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	781b      	ldrb	r3, [r3, #0]
 801519a:	009b      	lsls	r3, r3, #2
 801519c:	4413      	add	r3, r2
 801519e:	881b      	ldrh	r3, [r3, #0]
 80151a0:	b29b      	uxth	r3, r3
 80151a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80151a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80151aa:	817b      	strh	r3, [r7, #10]
 80151ac:	897b      	ldrh	r3, [r7, #10]
 80151ae:	f083 0310 	eor.w	r3, r3, #16
 80151b2:	817b      	strh	r3, [r7, #10]
 80151b4:	897b      	ldrh	r3, [r7, #10]
 80151b6:	f083 0320 	eor.w	r3, r3, #32
 80151ba:	817b      	strh	r3, [r7, #10]
 80151bc:	1d3b      	adds	r3, r7, #4
 80151be:	681a      	ldr	r2, [r3, #0]
 80151c0:	463b      	mov	r3, r7
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	781b      	ldrb	r3, [r3, #0]
 80151c6:	009b      	lsls	r3, r3, #2
 80151c8:	441a      	add	r2, r3
 80151ca:	897b      	ldrh	r3, [r7, #10]
 80151cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80151d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80151d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80151d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80151dc:	b29b      	uxth	r3, r3
 80151de:	8013      	strh	r3, [r2, #0]
 80151e0:	e3f3      	b.n	80159ca <USB_EPStartXfer+0x128c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80151e2:	463b      	mov	r3, r7
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	7b1b      	ldrb	r3, [r3, #12]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	f040 809c 	bne.w	8015326 <USB_EPStartXfer+0xbe8>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80151ee:	463b      	mov	r3, r7
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	699a      	ldr	r2, [r3, #24]
 80151f4:	463b      	mov	r3, r7
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	691b      	ldr	r3, [r3, #16]
 80151fa:	429a      	cmp	r2, r3
 80151fc:	d90e      	bls.n	801521c <USB_EPStartXfer+0xade>
      {
        len = ep->maxpacket;
 80151fe:	463b      	mov	r3, r7
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	691b      	ldr	r3, [r3, #16]
 8015204:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8015208:	463b      	mov	r3, r7
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	699a      	ldr	r2, [r3, #24]
 801520e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015212:	1ad2      	subs	r2, r2, r3
 8015214:	463b      	mov	r3, r7
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	619a      	str	r2, [r3, #24]
 801521a:	e008      	b.n	801522e <USB_EPStartXfer+0xaf0>
      }
      else
      {
        len = ep->xfer_len;
 801521c:	463b      	mov	r3, r7
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	699b      	ldr	r3, [r3, #24]
 8015222:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8015226:	463b      	mov	r3, r7
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	2200      	movs	r2, #0
 801522c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801522e:	1d3b      	adds	r3, r7, #4
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015236:	1d3b      	adds	r3, r7, #4
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801523e:	b29b      	uxth	r3, r3
 8015240:	461a      	mov	r2, r3
 8015242:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015246:	4413      	add	r3, r2
 8015248:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801524c:	463b      	mov	r3, r7
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	781b      	ldrb	r3, [r3, #0]
 8015252:	00da      	lsls	r2, r3, #3
 8015254:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015258:	4413      	add	r3, r2
 801525a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801525e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015262:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015266:	881b      	ldrh	r3, [r3, #0]
 8015268:	b29b      	uxth	r3, r3
 801526a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801526e:	b29a      	uxth	r2, r3
 8015270:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015274:	801a      	strh	r2, [r3, #0]
 8015276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801527a:	2b00      	cmp	r3, #0
 801527c:	d10c      	bne.n	8015298 <USB_EPStartXfer+0xb5a>
 801527e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015282:	881b      	ldrh	r3, [r3, #0]
 8015284:	b29b      	uxth	r3, r3
 8015286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801528a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801528e:	b29a      	uxth	r2, r3
 8015290:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015294:	801a      	strh	r2, [r3, #0]
 8015296:	e36a      	b.n	801596e <USB_EPStartXfer+0x1230>
 8015298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801529c:	2b3e      	cmp	r3, #62	; 0x3e
 801529e:	d81e      	bhi.n	80152de <USB_EPStartXfer+0xba0>
 80152a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80152a4:	085b      	lsrs	r3, r3, #1
 80152a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80152aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80152ae:	f003 0301 	and.w	r3, r3, #1
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d004      	beq.n	80152c0 <USB_EPStartXfer+0xb82>
 80152b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80152ba:	3301      	adds	r3, #1
 80152bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80152c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80152c4:	881b      	ldrh	r3, [r3, #0]
 80152c6:	b29a      	uxth	r2, r3
 80152c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80152cc:	b29b      	uxth	r3, r3
 80152ce:	029b      	lsls	r3, r3, #10
 80152d0:	b29b      	uxth	r3, r3
 80152d2:	4313      	orrs	r3, r2
 80152d4:	b29a      	uxth	r2, r3
 80152d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80152da:	801a      	strh	r2, [r3, #0]
 80152dc:	e347      	b.n	801596e <USB_EPStartXfer+0x1230>
 80152de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80152e2:	095b      	lsrs	r3, r3, #5
 80152e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80152e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80152ec:	f003 031f 	and.w	r3, r3, #31
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d104      	bne.n	80152fe <USB_EPStartXfer+0xbc0>
 80152f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80152f8:	3b01      	subs	r3, #1
 80152fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80152fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015302:	881b      	ldrh	r3, [r3, #0]
 8015304:	b29a      	uxth	r2, r3
 8015306:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801530a:	b29b      	uxth	r3, r3
 801530c:	029b      	lsls	r3, r3, #10
 801530e:	b29b      	uxth	r3, r3
 8015310:	4313      	orrs	r3, r2
 8015312:	b29b      	uxth	r3, r3
 8015314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8015318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801531c:	b29a      	uxth	r2, r3
 801531e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015322:	801a      	strh	r2, [r3, #0]
 8015324:	e323      	b.n	801596e <USB_EPStartXfer+0x1230>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8015326:	463b      	mov	r3, r7
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	78db      	ldrb	r3, [r3, #3]
 801532c:	2b02      	cmp	r3, #2
 801532e:	f040 81a9 	bne.w	8015684 <USB_EPStartXfer+0xf46>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8015332:	463b      	mov	r3, r7
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	785b      	ldrb	r3, [r3, #1]
 8015338:	2b00      	cmp	r3, #0
 801533a:	f040 8082 	bne.w	8015442 <USB_EPStartXfer+0xd04>
 801533e:	1d3b      	adds	r3, r7, #4
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8015346:	1d3b      	adds	r3, r7, #4
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801534e:	b29b      	uxth	r3, r3
 8015350:	461a      	mov	r2, r3
 8015352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015356:	4413      	add	r3, r2
 8015358:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801535c:	463b      	mov	r3, r7
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	781b      	ldrb	r3, [r3, #0]
 8015362:	00da      	lsls	r2, r3, #3
 8015364:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015368:	4413      	add	r3, r2
 801536a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801536e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8015372:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015376:	881b      	ldrh	r3, [r3, #0]
 8015378:	b29b      	uxth	r3, r3
 801537a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801537e:	b29a      	uxth	r2, r3
 8015380:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015384:	801a      	strh	r2, [r3, #0]
 8015386:	463b      	mov	r3, r7
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	691b      	ldr	r3, [r3, #16]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d10c      	bne.n	80153aa <USB_EPStartXfer+0xc6c>
 8015390:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015394:	881b      	ldrh	r3, [r3, #0]
 8015396:	b29b      	uxth	r3, r3
 8015398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801539c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80153a0:	b29a      	uxth	r2, r3
 80153a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80153a6:	801a      	strh	r2, [r3, #0]
 80153a8:	e071      	b.n	801548e <USB_EPStartXfer+0xd50>
 80153aa:	463b      	mov	r3, r7
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	691b      	ldr	r3, [r3, #16]
 80153b0:	2b3e      	cmp	r3, #62	; 0x3e
 80153b2:	d820      	bhi.n	80153f6 <USB_EPStartXfer+0xcb8>
 80153b4:	463b      	mov	r3, r7
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	691b      	ldr	r3, [r3, #16]
 80153ba:	085b      	lsrs	r3, r3, #1
 80153bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80153c0:	463b      	mov	r3, r7
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	691b      	ldr	r3, [r3, #16]
 80153c6:	f003 0301 	and.w	r3, r3, #1
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d004      	beq.n	80153d8 <USB_EPStartXfer+0xc9a>
 80153ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80153d2:	3301      	adds	r3, #1
 80153d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80153d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80153dc:	881b      	ldrh	r3, [r3, #0]
 80153de:	b29a      	uxth	r2, r3
 80153e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80153e4:	b29b      	uxth	r3, r3
 80153e6:	029b      	lsls	r3, r3, #10
 80153e8:	b29b      	uxth	r3, r3
 80153ea:	4313      	orrs	r3, r2
 80153ec:	b29a      	uxth	r2, r3
 80153ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80153f2:	801a      	strh	r2, [r3, #0]
 80153f4:	e04b      	b.n	801548e <USB_EPStartXfer+0xd50>
 80153f6:	463b      	mov	r3, r7
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	691b      	ldr	r3, [r3, #16]
 80153fc:	095b      	lsrs	r3, r3, #5
 80153fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8015402:	463b      	mov	r3, r7
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	691b      	ldr	r3, [r3, #16]
 8015408:	f003 031f 	and.w	r3, r3, #31
 801540c:	2b00      	cmp	r3, #0
 801540e:	d104      	bne.n	801541a <USB_EPStartXfer+0xcdc>
 8015410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015414:	3b01      	subs	r3, #1
 8015416:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801541a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801541e:	881b      	ldrh	r3, [r3, #0]
 8015420:	b29a      	uxth	r2, r3
 8015422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015426:	b29b      	uxth	r3, r3
 8015428:	029b      	lsls	r3, r3, #10
 801542a:	b29b      	uxth	r3, r3
 801542c:	4313      	orrs	r3, r2
 801542e:	b29b      	uxth	r3, r3
 8015430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8015434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8015438:	b29a      	uxth	r2, r3
 801543a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801543e:	801a      	strh	r2, [r3, #0]
 8015440:	e025      	b.n	801548e <USB_EPStartXfer+0xd50>
 8015442:	463b      	mov	r3, r7
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	785b      	ldrb	r3, [r3, #1]
 8015448:	2b01      	cmp	r3, #1
 801544a:	d120      	bne.n	801548e <USB_EPStartXfer+0xd50>
 801544c:	1d3b      	adds	r3, r7, #4
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015454:	1d3b      	adds	r3, r7, #4
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801545c:	b29b      	uxth	r3, r3
 801545e:	461a      	mov	r2, r3
 8015460:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015464:	4413      	add	r3, r2
 8015466:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801546a:	463b      	mov	r3, r7
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	781b      	ldrb	r3, [r3, #0]
 8015470:	00da      	lsls	r2, r3, #3
 8015472:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015476:	4413      	add	r3, r2
 8015478:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801547c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8015480:	463b      	mov	r3, r7
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	691b      	ldr	r3, [r3, #16]
 8015486:	b29a      	uxth	r2, r3
 8015488:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801548c:	801a      	strh	r2, [r3, #0]
 801548e:	1d3b      	adds	r3, r7, #4
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8015496:	463b      	mov	r3, r7
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	785b      	ldrb	r3, [r3, #1]
 801549c:	2b00      	cmp	r3, #0
 801549e:	f040 8082 	bne.w	80155a6 <USB_EPStartXfer+0xe68>
 80154a2:	1d3b      	adds	r3, r7, #4
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80154aa:	1d3b      	adds	r3, r7, #4
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80154b2:	b29b      	uxth	r3, r3
 80154b4:	461a      	mov	r2, r3
 80154b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80154ba:	4413      	add	r3, r2
 80154bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80154c0:	463b      	mov	r3, r7
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	781b      	ldrb	r3, [r3, #0]
 80154c6:	00da      	lsls	r2, r3, #3
 80154c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80154cc:	4413      	add	r3, r2
 80154ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80154d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80154d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80154da:	881b      	ldrh	r3, [r3, #0]
 80154dc:	b29b      	uxth	r3, r3
 80154de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80154e2:	b29a      	uxth	r2, r3
 80154e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80154e8:	801a      	strh	r2, [r3, #0]
 80154ea:	463b      	mov	r3, r7
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	691b      	ldr	r3, [r3, #16]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d10c      	bne.n	801550e <USB_EPStartXfer+0xdd0>
 80154f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80154f8:	881b      	ldrh	r3, [r3, #0]
 80154fa:	b29b      	uxth	r3, r3
 80154fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8015500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8015504:	b29a      	uxth	r2, r3
 8015506:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801550a:	801a      	strh	r2, [r3, #0]
 801550c:	e06d      	b.n	80155ea <USB_EPStartXfer+0xeac>
 801550e:	463b      	mov	r3, r7
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	691b      	ldr	r3, [r3, #16]
 8015514:	2b3e      	cmp	r3, #62	; 0x3e
 8015516:	d820      	bhi.n	801555a <USB_EPStartXfer+0xe1c>
 8015518:	463b      	mov	r3, r7
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	691b      	ldr	r3, [r3, #16]
 801551e:	085b      	lsrs	r3, r3, #1
 8015520:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8015524:	463b      	mov	r3, r7
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	691b      	ldr	r3, [r3, #16]
 801552a:	f003 0301 	and.w	r3, r3, #1
 801552e:	2b00      	cmp	r3, #0
 8015530:	d004      	beq.n	801553c <USB_EPStartXfer+0xdfe>
 8015532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015536:	3301      	adds	r3, #1
 8015538:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801553c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015540:	881b      	ldrh	r3, [r3, #0]
 8015542:	b29a      	uxth	r2, r3
 8015544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015548:	b29b      	uxth	r3, r3
 801554a:	029b      	lsls	r3, r3, #10
 801554c:	b29b      	uxth	r3, r3
 801554e:	4313      	orrs	r3, r2
 8015550:	b29a      	uxth	r2, r3
 8015552:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015556:	801a      	strh	r2, [r3, #0]
 8015558:	e047      	b.n	80155ea <USB_EPStartXfer+0xeac>
 801555a:	463b      	mov	r3, r7
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	691b      	ldr	r3, [r3, #16]
 8015560:	095b      	lsrs	r3, r3, #5
 8015562:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8015566:	463b      	mov	r3, r7
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	691b      	ldr	r3, [r3, #16]
 801556c:	f003 031f 	and.w	r3, r3, #31
 8015570:	2b00      	cmp	r3, #0
 8015572:	d104      	bne.n	801557e <USB_EPStartXfer+0xe40>
 8015574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015578:	3b01      	subs	r3, #1
 801557a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801557e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015582:	881b      	ldrh	r3, [r3, #0]
 8015584:	b29a      	uxth	r2, r3
 8015586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801558a:	b29b      	uxth	r3, r3
 801558c:	029b      	lsls	r3, r3, #10
 801558e:	b29b      	uxth	r3, r3
 8015590:	4313      	orrs	r3, r2
 8015592:	b29b      	uxth	r3, r3
 8015594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8015598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801559c:	b29a      	uxth	r2, r3
 801559e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80155a2:	801a      	strh	r2, [r3, #0]
 80155a4:	e021      	b.n	80155ea <USB_EPStartXfer+0xeac>
 80155a6:	463b      	mov	r3, r7
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	785b      	ldrb	r3, [r3, #1]
 80155ac:	2b01      	cmp	r3, #1
 80155ae:	d11c      	bne.n	80155ea <USB_EPStartXfer+0xeac>
 80155b0:	1d3b      	adds	r3, r7, #4
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80155b8:	b29b      	uxth	r3, r3
 80155ba:	461a      	mov	r2, r3
 80155bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80155c0:	4413      	add	r3, r2
 80155c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80155c6:	463b      	mov	r3, r7
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	781b      	ldrb	r3, [r3, #0]
 80155cc:	00da      	lsls	r2, r3, #3
 80155ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80155d2:	4413      	add	r3, r2
 80155d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80155d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80155dc:	463b      	mov	r3, r7
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	691b      	ldr	r3, [r3, #16]
 80155e2:	b29a      	uxth	r2, r3
 80155e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80155e8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80155ea:	463b      	mov	r3, r7
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	69db      	ldr	r3, [r3, #28]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	f000 81bc 	beq.w	801596e <USB_EPStartXfer+0x1230>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80155f6:	1d3b      	adds	r3, r7, #4
 80155f8:	681a      	ldr	r2, [r3, #0]
 80155fa:	463b      	mov	r3, r7
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	781b      	ldrb	r3, [r3, #0]
 8015600:	009b      	lsls	r3, r3, #2
 8015602:	4413      	add	r3, r2
 8015604:	881b      	ldrh	r3, [r3, #0]
 8015606:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801560a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801560e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015612:	2b00      	cmp	r3, #0
 8015614:	d005      	beq.n	8015622 <USB_EPStartXfer+0xee4>
 8015616:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801561a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801561e:	2b00      	cmp	r3, #0
 8015620:	d10d      	bne.n	801563e <USB_EPStartXfer+0xf00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8015622:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8015626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801562a:	2b00      	cmp	r3, #0
 801562c:	f040 819f 	bne.w	801596e <USB_EPStartXfer+0x1230>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8015630:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8015634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015638:	2b00      	cmp	r3, #0
 801563a:	f040 8198 	bne.w	801596e <USB_EPStartXfer+0x1230>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801563e:	1d3b      	adds	r3, r7, #4
 8015640:	681a      	ldr	r2, [r3, #0]
 8015642:	463b      	mov	r3, r7
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	781b      	ldrb	r3, [r3, #0]
 8015648:	009b      	lsls	r3, r3, #2
 801564a:	4413      	add	r3, r2
 801564c:	881b      	ldrh	r3, [r3, #0]
 801564e:	b29b      	uxth	r3, r3
 8015650:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015658:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 801565c:	1d3b      	adds	r3, r7, #4
 801565e:	681a      	ldr	r2, [r3, #0]
 8015660:	463b      	mov	r3, r7
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	781b      	ldrb	r3, [r3, #0]
 8015666:	009b      	lsls	r3, r3, #2
 8015668:	441a      	add	r2, r3
 801566a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 801566e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801567a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801567e:	b29b      	uxth	r3, r3
 8015680:	8013      	strh	r3, [r2, #0]
 8015682:	e174      	b.n	801596e <USB_EPStartXfer+0x1230>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8015684:	463b      	mov	r3, r7
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	78db      	ldrb	r3, [r3, #3]
 801568a:	2b01      	cmp	r3, #1
 801568c:	f040 816d 	bne.w	801596a <USB_EPStartXfer+0x122c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8015690:	463b      	mov	r3, r7
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	699a      	ldr	r2, [r3, #24]
 8015696:	463b      	mov	r3, r7
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	691b      	ldr	r3, [r3, #16]
 801569c:	429a      	cmp	r2, r3
 801569e:	d90e      	bls.n	80156be <USB_EPStartXfer+0xf80>
        {
          len = ep->maxpacket;
 80156a0:	463b      	mov	r3, r7
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	691b      	ldr	r3, [r3, #16]
 80156a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80156aa:	463b      	mov	r3, r7
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	699a      	ldr	r2, [r3, #24]
 80156b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80156b4:	1ad2      	subs	r2, r2, r3
 80156b6:	463b      	mov	r3, r7
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	619a      	str	r2, [r3, #24]
 80156bc:	e008      	b.n	80156d0 <USB_EPStartXfer+0xf92>
        }
        else
        {
          len = ep->xfer_len;
 80156be:	463b      	mov	r3, r7
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	699b      	ldr	r3, [r3, #24]
 80156c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80156c8:	463b      	mov	r3, r7
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	2200      	movs	r2, #0
 80156ce:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80156d0:	463b      	mov	r3, r7
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	785b      	ldrb	r3, [r3, #1]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d17b      	bne.n	80157d2 <USB_EPStartXfer+0x1094>
 80156da:	1d3b      	adds	r3, r7, #4
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80156e2:	1d3b      	adds	r3, r7, #4
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80156ea:	b29b      	uxth	r3, r3
 80156ec:	461a      	mov	r2, r3
 80156ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80156f2:	4413      	add	r3, r2
 80156f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80156f8:	463b      	mov	r3, r7
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	781b      	ldrb	r3, [r3, #0]
 80156fe:	00da      	lsls	r2, r3, #3
 8015700:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015704:	4413      	add	r3, r2
 8015706:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801570a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801570e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015712:	881b      	ldrh	r3, [r3, #0]
 8015714:	b29b      	uxth	r3, r3
 8015716:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801571a:	b29a      	uxth	r2, r3
 801571c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015720:	801a      	strh	r2, [r3, #0]
 8015722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015726:	2b00      	cmp	r3, #0
 8015728:	d10c      	bne.n	8015744 <USB_EPStartXfer+0x1006>
 801572a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801572e:	881b      	ldrh	r3, [r3, #0]
 8015730:	b29b      	uxth	r3, r3
 8015732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8015736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801573a:	b29a      	uxth	r2, r3
 801573c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015740:	801a      	strh	r2, [r3, #0]
 8015742:	e06b      	b.n	801581c <USB_EPStartXfer+0x10de>
 8015744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015748:	2b3e      	cmp	r3, #62	; 0x3e
 801574a:	d81e      	bhi.n	801578a <USB_EPStartXfer+0x104c>
 801574c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015750:	085b      	lsrs	r3, r3, #1
 8015752:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8015756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801575a:	f003 0301 	and.w	r3, r3, #1
 801575e:	2b00      	cmp	r3, #0
 8015760:	d004      	beq.n	801576c <USB_EPStartXfer+0x102e>
 8015762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015766:	3301      	adds	r3, #1
 8015768:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801576c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015770:	881b      	ldrh	r3, [r3, #0]
 8015772:	b29a      	uxth	r2, r3
 8015774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015778:	b29b      	uxth	r3, r3
 801577a:	029b      	lsls	r3, r3, #10
 801577c:	b29b      	uxth	r3, r3
 801577e:	4313      	orrs	r3, r2
 8015780:	b29a      	uxth	r2, r3
 8015782:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015786:	801a      	strh	r2, [r3, #0]
 8015788:	e048      	b.n	801581c <USB_EPStartXfer+0x10de>
 801578a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801578e:	095b      	lsrs	r3, r3, #5
 8015790:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8015794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015798:	f003 031f 	and.w	r3, r3, #31
 801579c:	2b00      	cmp	r3, #0
 801579e:	d104      	bne.n	80157aa <USB_EPStartXfer+0x106c>
 80157a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80157a4:	3b01      	subs	r3, #1
 80157a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80157aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80157ae:	881b      	ldrh	r3, [r3, #0]
 80157b0:	b29a      	uxth	r2, r3
 80157b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80157b6:	b29b      	uxth	r3, r3
 80157b8:	029b      	lsls	r3, r3, #10
 80157ba:	b29b      	uxth	r3, r3
 80157bc:	4313      	orrs	r3, r2
 80157be:	b29b      	uxth	r3, r3
 80157c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80157c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80157c8:	b29a      	uxth	r2, r3
 80157ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80157ce:	801a      	strh	r2, [r3, #0]
 80157d0:	e024      	b.n	801581c <USB_EPStartXfer+0x10de>
 80157d2:	463b      	mov	r3, r7
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	785b      	ldrb	r3, [r3, #1]
 80157d8:	2b01      	cmp	r3, #1
 80157da:	d11f      	bne.n	801581c <USB_EPStartXfer+0x10de>
 80157dc:	1d3b      	adds	r3, r7, #4
 80157de:	681b      	ldr	r3, [r3, #0]
 80157e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80157e4:	1d3b      	adds	r3, r7, #4
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80157ec:	b29b      	uxth	r3, r3
 80157ee:	461a      	mov	r2, r3
 80157f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80157f4:	4413      	add	r3, r2
 80157f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80157fa:	463b      	mov	r3, r7
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	781b      	ldrb	r3, [r3, #0]
 8015800:	00da      	lsls	r2, r3, #3
 8015802:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015806:	4413      	add	r3, r2
 8015808:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801580c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8015810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015814:	b29a      	uxth	r2, r3
 8015816:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801581a:	801a      	strh	r2, [r3, #0]
 801581c:	1d3b      	adds	r3, r7, #4
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8015824:	463b      	mov	r3, r7
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	785b      	ldrb	r3, [r3, #1]
 801582a:	2b00      	cmp	r3, #0
 801582c:	d17b      	bne.n	8015926 <USB_EPStartXfer+0x11e8>
 801582e:	1d3b      	adds	r3, r7, #4
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8015836:	1d3b      	adds	r3, r7, #4
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801583e:	b29b      	uxth	r3, r3
 8015840:	461a      	mov	r2, r3
 8015842:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015846:	4413      	add	r3, r2
 8015848:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801584c:	463b      	mov	r3, r7
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	781b      	ldrb	r3, [r3, #0]
 8015852:	00da      	lsls	r2, r3, #3
 8015854:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015858:	4413      	add	r3, r2
 801585a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801585e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8015862:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015866:	881b      	ldrh	r3, [r3, #0]
 8015868:	b29b      	uxth	r3, r3
 801586a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801586e:	b29a      	uxth	r2, r3
 8015870:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015874:	801a      	strh	r2, [r3, #0]
 8015876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801587a:	2b00      	cmp	r3, #0
 801587c:	d10c      	bne.n	8015898 <USB_EPStartXfer+0x115a>
 801587e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015882:	881b      	ldrh	r3, [r3, #0]
 8015884:	b29b      	uxth	r3, r3
 8015886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801588a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801588e:	b29a      	uxth	r2, r3
 8015890:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015894:	801a      	strh	r2, [r3, #0]
 8015896:	e06a      	b.n	801596e <USB_EPStartXfer+0x1230>
 8015898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801589c:	2b3e      	cmp	r3, #62	; 0x3e
 801589e:	d81e      	bhi.n	80158de <USB_EPStartXfer+0x11a0>
 80158a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80158a4:	085b      	lsrs	r3, r3, #1
 80158a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80158aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80158ae:	f003 0301 	and.w	r3, r3, #1
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d004      	beq.n	80158c0 <USB_EPStartXfer+0x1182>
 80158b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80158ba:	3301      	adds	r3, #1
 80158bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80158c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80158c4:	881b      	ldrh	r3, [r3, #0]
 80158c6:	b29a      	uxth	r2, r3
 80158c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80158cc:	b29b      	uxth	r3, r3
 80158ce:	029b      	lsls	r3, r3, #10
 80158d0:	b29b      	uxth	r3, r3
 80158d2:	4313      	orrs	r3, r2
 80158d4:	b29a      	uxth	r2, r3
 80158d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80158da:	801a      	strh	r2, [r3, #0]
 80158dc:	e047      	b.n	801596e <USB_EPStartXfer+0x1230>
 80158de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80158e2:	095b      	lsrs	r3, r3, #5
 80158e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80158e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80158ec:	f003 031f 	and.w	r3, r3, #31
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d104      	bne.n	80158fe <USB_EPStartXfer+0x11c0>
 80158f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80158f8:	3b01      	subs	r3, #1
 80158fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80158fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015902:	881b      	ldrh	r3, [r3, #0]
 8015904:	b29a      	uxth	r2, r3
 8015906:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801590a:	b29b      	uxth	r3, r3
 801590c:	029b      	lsls	r3, r3, #10
 801590e:	b29b      	uxth	r3, r3
 8015910:	4313      	orrs	r3, r2
 8015912:	b29b      	uxth	r3, r3
 8015914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8015918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801591c:	b29a      	uxth	r2, r3
 801591e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015922:	801a      	strh	r2, [r3, #0]
 8015924:	e023      	b.n	801596e <USB_EPStartXfer+0x1230>
 8015926:	463b      	mov	r3, r7
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	785b      	ldrb	r3, [r3, #1]
 801592c:	2b01      	cmp	r3, #1
 801592e:	d11e      	bne.n	801596e <USB_EPStartXfer+0x1230>
 8015930:	1d3b      	adds	r3, r7, #4
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8015938:	b29b      	uxth	r3, r3
 801593a:	461a      	mov	r2, r3
 801593c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015940:	4413      	add	r3, r2
 8015942:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8015946:	463b      	mov	r3, r7
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	781b      	ldrb	r3, [r3, #0]
 801594c:	00da      	lsls	r2, r3, #3
 801594e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015952:	4413      	add	r3, r2
 8015954:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8015958:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801595c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015960:	b29a      	uxth	r2, r3
 8015962:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015966:	801a      	strh	r2, [r3, #0]
 8015968:	e001      	b.n	801596e <USB_EPStartXfer+0x1230>
      }
      else
      {
        return HAL_ERROR;
 801596a:	2301      	movs	r3, #1
 801596c:	e02e      	b.n	80159cc <USB_EPStartXfer+0x128e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801596e:	1d3b      	adds	r3, r7, #4
 8015970:	681a      	ldr	r2, [r3, #0]
 8015972:	463b      	mov	r3, r7
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	781b      	ldrb	r3, [r3, #0]
 8015978:	009b      	lsls	r3, r3, #2
 801597a:	4413      	add	r3, r2
 801597c:	881b      	ldrh	r3, [r3, #0]
 801597e:	b29b      	uxth	r3, r3
 8015980:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015988:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801598c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8015990:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8015994:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8015998:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801599c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80159a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80159a4:	1d3b      	adds	r3, r7, #4
 80159a6:	681a      	ldr	r2, [r3, #0]
 80159a8:	463b      	mov	r3, r7
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	781b      	ldrb	r3, [r3, #0]
 80159ae:	009b      	lsls	r3, r3, #2
 80159b0:	441a      	add	r2, r3
 80159b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80159b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80159ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80159be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80159c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80159c6:	b29b      	uxth	r3, r3
 80159c8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80159ca:	2300      	movs	r3, #0
}
 80159cc:	4618      	mov	r0, r3
 80159ce:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80159d2:	46bd      	mov	sp, r7
 80159d4:	bd80      	pop	{r7, pc}

080159d6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80159d6:	b480      	push	{r7}
 80159d8:	b085      	sub	sp, #20
 80159da:	af00      	add	r7, sp, #0
 80159dc:	6078      	str	r0, [r7, #4]
 80159de:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80159e0:	683b      	ldr	r3, [r7, #0]
 80159e2:	785b      	ldrb	r3, [r3, #1]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d020      	beq.n	8015a2a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80159e8:	687a      	ldr	r2, [r7, #4]
 80159ea:	683b      	ldr	r3, [r7, #0]
 80159ec:	781b      	ldrb	r3, [r3, #0]
 80159ee:	009b      	lsls	r3, r3, #2
 80159f0:	4413      	add	r3, r2
 80159f2:	881b      	ldrh	r3, [r3, #0]
 80159f4:	b29b      	uxth	r3, r3
 80159f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80159fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80159fe:	81bb      	strh	r3, [r7, #12]
 8015a00:	89bb      	ldrh	r3, [r7, #12]
 8015a02:	f083 0310 	eor.w	r3, r3, #16
 8015a06:	81bb      	strh	r3, [r7, #12]
 8015a08:	687a      	ldr	r2, [r7, #4]
 8015a0a:	683b      	ldr	r3, [r7, #0]
 8015a0c:	781b      	ldrb	r3, [r3, #0]
 8015a0e:	009b      	lsls	r3, r3, #2
 8015a10:	441a      	add	r2, r3
 8015a12:	89bb      	ldrh	r3, [r7, #12]
 8015a14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015a18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a24:	b29b      	uxth	r3, r3
 8015a26:	8013      	strh	r3, [r2, #0]
 8015a28:	e01f      	b.n	8015a6a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8015a2a:	687a      	ldr	r2, [r7, #4]
 8015a2c:	683b      	ldr	r3, [r7, #0]
 8015a2e:	781b      	ldrb	r3, [r3, #0]
 8015a30:	009b      	lsls	r3, r3, #2
 8015a32:	4413      	add	r3, r2
 8015a34:	881b      	ldrh	r3, [r3, #0]
 8015a36:	b29b      	uxth	r3, r3
 8015a38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015a40:	81fb      	strh	r3, [r7, #14]
 8015a42:	89fb      	ldrh	r3, [r7, #14]
 8015a44:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8015a48:	81fb      	strh	r3, [r7, #14]
 8015a4a:	687a      	ldr	r2, [r7, #4]
 8015a4c:	683b      	ldr	r3, [r7, #0]
 8015a4e:	781b      	ldrb	r3, [r3, #0]
 8015a50:	009b      	lsls	r3, r3, #2
 8015a52:	441a      	add	r2, r3
 8015a54:	89fb      	ldrh	r3, [r7, #14]
 8015a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a66:	b29b      	uxth	r3, r3
 8015a68:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8015a6a:	2300      	movs	r3, #0
}
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	3714      	adds	r7, #20
 8015a70:	46bd      	mov	sp, r7
 8015a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a76:	4770      	bx	lr

08015a78 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8015a78:	b480      	push	{r7}
 8015a7a:	b087      	sub	sp, #28
 8015a7c:	af00      	add	r7, sp, #0
 8015a7e:	6078      	str	r0, [r7, #4]
 8015a80:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8015a82:	683b      	ldr	r3, [r7, #0]
 8015a84:	7b1b      	ldrb	r3, [r3, #12]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	f040 809d 	bne.w	8015bc6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8015a8c:	683b      	ldr	r3, [r7, #0]
 8015a8e:	785b      	ldrb	r3, [r3, #1]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d04c      	beq.n	8015b2e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015a94:	687a      	ldr	r2, [r7, #4]
 8015a96:	683b      	ldr	r3, [r7, #0]
 8015a98:	781b      	ldrb	r3, [r3, #0]
 8015a9a:	009b      	lsls	r3, r3, #2
 8015a9c:	4413      	add	r3, r2
 8015a9e:	881b      	ldrh	r3, [r3, #0]
 8015aa0:	823b      	strh	r3, [r7, #16]
 8015aa2:	8a3b      	ldrh	r3, [r7, #16]
 8015aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d01b      	beq.n	8015ae4 <USB_EPClearStall+0x6c>
 8015aac:	687a      	ldr	r2, [r7, #4]
 8015aae:	683b      	ldr	r3, [r7, #0]
 8015ab0:	781b      	ldrb	r3, [r3, #0]
 8015ab2:	009b      	lsls	r3, r3, #2
 8015ab4:	4413      	add	r3, r2
 8015ab6:	881b      	ldrh	r3, [r3, #0]
 8015ab8:	b29b      	uxth	r3, r3
 8015aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015ac2:	81fb      	strh	r3, [r7, #14]
 8015ac4:	687a      	ldr	r2, [r7, #4]
 8015ac6:	683b      	ldr	r3, [r7, #0]
 8015ac8:	781b      	ldrb	r3, [r3, #0]
 8015aca:	009b      	lsls	r3, r3, #2
 8015acc:	441a      	add	r2, r3
 8015ace:	89fb      	ldrh	r3, [r7, #14]
 8015ad0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015ad4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015adc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8015ae0:	b29b      	uxth	r3, r3
 8015ae2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8015ae4:	683b      	ldr	r3, [r7, #0]
 8015ae6:	78db      	ldrb	r3, [r3, #3]
 8015ae8:	2b01      	cmp	r3, #1
 8015aea:	d06c      	beq.n	8015bc6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8015aec:	687a      	ldr	r2, [r7, #4]
 8015aee:	683b      	ldr	r3, [r7, #0]
 8015af0:	781b      	ldrb	r3, [r3, #0]
 8015af2:	009b      	lsls	r3, r3, #2
 8015af4:	4413      	add	r3, r2
 8015af6:	881b      	ldrh	r3, [r3, #0]
 8015af8:	b29b      	uxth	r3, r3
 8015afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015afe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015b02:	81bb      	strh	r3, [r7, #12]
 8015b04:	89bb      	ldrh	r3, [r7, #12]
 8015b06:	f083 0320 	eor.w	r3, r3, #32
 8015b0a:	81bb      	strh	r3, [r7, #12]
 8015b0c:	687a      	ldr	r2, [r7, #4]
 8015b0e:	683b      	ldr	r3, [r7, #0]
 8015b10:	781b      	ldrb	r3, [r3, #0]
 8015b12:	009b      	lsls	r3, r3, #2
 8015b14:	441a      	add	r2, r3
 8015b16:	89bb      	ldrh	r3, [r7, #12]
 8015b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b28:	b29b      	uxth	r3, r3
 8015b2a:	8013      	strh	r3, [r2, #0]
 8015b2c:	e04b      	b.n	8015bc6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015b2e:	687a      	ldr	r2, [r7, #4]
 8015b30:	683b      	ldr	r3, [r7, #0]
 8015b32:	781b      	ldrb	r3, [r3, #0]
 8015b34:	009b      	lsls	r3, r3, #2
 8015b36:	4413      	add	r3, r2
 8015b38:	881b      	ldrh	r3, [r3, #0]
 8015b3a:	82fb      	strh	r3, [r7, #22]
 8015b3c:	8afb      	ldrh	r3, [r7, #22]
 8015b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d01b      	beq.n	8015b7e <USB_EPClearStall+0x106>
 8015b46:	687a      	ldr	r2, [r7, #4]
 8015b48:	683b      	ldr	r3, [r7, #0]
 8015b4a:	781b      	ldrb	r3, [r3, #0]
 8015b4c:	009b      	lsls	r3, r3, #2
 8015b4e:	4413      	add	r3, r2
 8015b50:	881b      	ldrh	r3, [r3, #0]
 8015b52:	b29b      	uxth	r3, r3
 8015b54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015b5c:	82bb      	strh	r3, [r7, #20]
 8015b5e:	687a      	ldr	r2, [r7, #4]
 8015b60:	683b      	ldr	r3, [r7, #0]
 8015b62:	781b      	ldrb	r3, [r3, #0]
 8015b64:	009b      	lsls	r3, r3, #2
 8015b66:	441a      	add	r2, r3
 8015b68:	8abb      	ldrh	r3, [r7, #20]
 8015b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015b72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8015b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b7a:	b29b      	uxth	r3, r3
 8015b7c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8015b7e:	687a      	ldr	r2, [r7, #4]
 8015b80:	683b      	ldr	r3, [r7, #0]
 8015b82:	781b      	ldrb	r3, [r3, #0]
 8015b84:	009b      	lsls	r3, r3, #2
 8015b86:	4413      	add	r3, r2
 8015b88:	881b      	ldrh	r3, [r3, #0]
 8015b8a:	b29b      	uxth	r3, r3
 8015b8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015b94:	827b      	strh	r3, [r7, #18]
 8015b96:	8a7b      	ldrh	r3, [r7, #18]
 8015b98:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8015b9c:	827b      	strh	r3, [r7, #18]
 8015b9e:	8a7b      	ldrh	r3, [r7, #18]
 8015ba0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8015ba4:	827b      	strh	r3, [r7, #18]
 8015ba6:	687a      	ldr	r2, [r7, #4]
 8015ba8:	683b      	ldr	r3, [r7, #0]
 8015baa:	781b      	ldrb	r3, [r3, #0]
 8015bac:	009b      	lsls	r3, r3, #2
 8015bae:	441a      	add	r2, r3
 8015bb0:	8a7b      	ldrh	r3, [r7, #18]
 8015bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015bc2:	b29b      	uxth	r3, r3
 8015bc4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8015bc6:	2300      	movs	r3, #0
}
 8015bc8:	4618      	mov	r0, r3
 8015bca:	371c      	adds	r7, #28
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bd2:	4770      	bx	lr

08015bd4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8015bd4:	b480      	push	{r7}
 8015bd6:	b083      	sub	sp, #12
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	6078      	str	r0, [r7, #4]
 8015bdc:	460b      	mov	r3, r1
 8015bde:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8015be0:	78fb      	ldrb	r3, [r7, #3]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d103      	bne.n	8015bee <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	2280      	movs	r2, #128	; 0x80
 8015bea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8015bee:	2300      	movs	r3, #0
}
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	370c      	adds	r7, #12
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bfa:	4770      	bx	lr

08015bfc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8015bfc:	b480      	push	{r7}
 8015bfe:	b083      	sub	sp, #12
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8015c04:	2300      	movs	r3, #0
}
 8015c06:	4618      	mov	r0, r3
 8015c08:	370c      	adds	r7, #12
 8015c0a:	46bd      	mov	sp, r7
 8015c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c10:	4770      	bx	lr

08015c12 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8015c12:	b480      	push	{r7}
 8015c14:	b085      	sub	sp, #20
 8015c16:	af00      	add	r7, sp, #0
 8015c18:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8015c20:	b29b      	uxth	r3, r3
 8015c22:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8015c24:	68fb      	ldr	r3, [r7, #12]
}
 8015c26:	4618      	mov	r0, r3
 8015c28:	3714      	adds	r7, #20
 8015c2a:	46bd      	mov	sp, r7
 8015c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c30:	4770      	bx	lr

08015c32 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8015c32:	b480      	push	{r7}
 8015c34:	b08b      	sub	sp, #44	; 0x2c
 8015c36:	af00      	add	r7, sp, #0
 8015c38:	60f8      	str	r0, [r7, #12]
 8015c3a:	60b9      	str	r1, [r7, #8]
 8015c3c:	4611      	mov	r1, r2
 8015c3e:	461a      	mov	r2, r3
 8015c40:	460b      	mov	r3, r1
 8015c42:	80fb      	strh	r3, [r7, #6]
 8015c44:	4613      	mov	r3, r2
 8015c46:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8015c48:	88bb      	ldrh	r3, [r7, #4]
 8015c4a:	3301      	adds	r3, #1
 8015c4c:	085b      	lsrs	r3, r3, #1
 8015c4e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8015c54:	68bb      	ldr	r3, [r7, #8]
 8015c56:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8015c58:	88fa      	ldrh	r2, [r7, #6]
 8015c5a:	697b      	ldr	r3, [r7, #20]
 8015c5c:	4413      	add	r3, r2
 8015c5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015c62:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8015c64:	69bb      	ldr	r3, [r7, #24]
 8015c66:	627b      	str	r3, [r7, #36]	; 0x24
 8015c68:	e01b      	b.n	8015ca2 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8015c6a:	69fb      	ldr	r3, [r7, #28]
 8015c6c:	781b      	ldrb	r3, [r3, #0]
 8015c6e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8015c70:	69fb      	ldr	r3, [r7, #28]
 8015c72:	3301      	adds	r3, #1
 8015c74:	781b      	ldrb	r3, [r3, #0]
 8015c76:	021b      	lsls	r3, r3, #8
 8015c78:	b21a      	sxth	r2, r3
 8015c7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015c7e:	4313      	orrs	r3, r2
 8015c80:	b21b      	sxth	r3, r3
 8015c82:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8015c84:	6a3b      	ldr	r3, [r7, #32]
 8015c86:	8a7a      	ldrh	r2, [r7, #18]
 8015c88:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8015c8a:	6a3b      	ldr	r3, [r7, #32]
 8015c8c:	3302      	adds	r3, #2
 8015c8e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8015c90:	69fb      	ldr	r3, [r7, #28]
 8015c92:	3301      	adds	r3, #1
 8015c94:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8015c96:	69fb      	ldr	r3, [r7, #28]
 8015c98:	3301      	adds	r3, #1
 8015c9a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8015c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c9e:	3b01      	subs	r3, #1
 8015ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8015ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d1e0      	bne.n	8015c6a <USB_WritePMA+0x38>
  }
}
 8015ca8:	bf00      	nop
 8015caa:	bf00      	nop
 8015cac:	372c      	adds	r7, #44	; 0x2c
 8015cae:	46bd      	mov	sp, r7
 8015cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb4:	4770      	bx	lr

08015cb6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8015cb6:	b480      	push	{r7}
 8015cb8:	b08b      	sub	sp, #44	; 0x2c
 8015cba:	af00      	add	r7, sp, #0
 8015cbc:	60f8      	str	r0, [r7, #12]
 8015cbe:	60b9      	str	r1, [r7, #8]
 8015cc0:	4611      	mov	r1, r2
 8015cc2:	461a      	mov	r2, r3
 8015cc4:	460b      	mov	r3, r1
 8015cc6:	80fb      	strh	r3, [r7, #6]
 8015cc8:	4613      	mov	r3, r2
 8015cca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8015ccc:	88bb      	ldrh	r3, [r7, #4]
 8015cce:	085b      	lsrs	r3, r3, #1
 8015cd0:	b29b      	uxth	r3, r3
 8015cd2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8015cd8:	68bb      	ldr	r3, [r7, #8]
 8015cda:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8015cdc:	88fa      	ldrh	r2, [r7, #6]
 8015cde:	697b      	ldr	r3, [r7, #20]
 8015ce0:	4413      	add	r3, r2
 8015ce2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015ce6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8015ce8:	69bb      	ldr	r3, [r7, #24]
 8015cea:	627b      	str	r3, [r7, #36]	; 0x24
 8015cec:	e018      	b.n	8015d20 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8015cee:	6a3b      	ldr	r3, [r7, #32]
 8015cf0:	881b      	ldrh	r3, [r3, #0]
 8015cf2:	b29b      	uxth	r3, r3
 8015cf4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8015cf6:	6a3b      	ldr	r3, [r7, #32]
 8015cf8:	3302      	adds	r3, #2
 8015cfa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8015cfc:	693b      	ldr	r3, [r7, #16]
 8015cfe:	b2da      	uxtb	r2, r3
 8015d00:	69fb      	ldr	r3, [r7, #28]
 8015d02:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8015d04:	69fb      	ldr	r3, [r7, #28]
 8015d06:	3301      	adds	r3, #1
 8015d08:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8015d0a:	693b      	ldr	r3, [r7, #16]
 8015d0c:	0a1b      	lsrs	r3, r3, #8
 8015d0e:	b2da      	uxtb	r2, r3
 8015d10:	69fb      	ldr	r3, [r7, #28]
 8015d12:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8015d14:	69fb      	ldr	r3, [r7, #28]
 8015d16:	3301      	adds	r3, #1
 8015d18:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8015d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d1c:	3b01      	subs	r3, #1
 8015d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8015d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d1e3      	bne.n	8015cee <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8015d26:	88bb      	ldrh	r3, [r7, #4]
 8015d28:	f003 0301 	and.w	r3, r3, #1
 8015d2c:	b29b      	uxth	r3, r3
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d007      	beq.n	8015d42 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8015d32:	6a3b      	ldr	r3, [r7, #32]
 8015d34:	881b      	ldrh	r3, [r3, #0]
 8015d36:	b29b      	uxth	r3, r3
 8015d38:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8015d3a:	693b      	ldr	r3, [r7, #16]
 8015d3c:	b2da      	uxtb	r2, r3
 8015d3e:	69fb      	ldr	r3, [r7, #28]
 8015d40:	701a      	strb	r2, [r3, #0]
  }
}
 8015d42:	bf00      	nop
 8015d44:	372c      	adds	r7, #44	; 0x2c
 8015d46:	46bd      	mov	sp, r7
 8015d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d4c:	4770      	bx	lr

08015d4e <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015d4e:	b580      	push	{r7, lr}
 8015d50:	b082      	sub	sp, #8
 8015d52:	af00      	add	r7, sp, #0
 8015d54:	6078      	str	r0, [r7, #4]
 8015d56:	460b      	mov	r3, r1
 8015d58:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	7c1b      	ldrb	r3, [r3, #16]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d115      	bne.n	8015d8e <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8015d62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015d66:	2202      	movs	r2, #2
 8015d68:	2101      	movs	r1, #1
 8015d6a:	6878      	ldr	r0, [r7, #4]
 8015d6c:	f002 fd83 	bl	8018876 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	2201      	movs	r2, #1
 8015d74:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8015d78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015d7c:	2202      	movs	r2, #2
 8015d7e:	2181      	movs	r1, #129	; 0x81
 8015d80:	6878      	ldr	r0, [r7, #4]
 8015d82:	f002 fd78 	bl	8018876 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	2201      	movs	r2, #1
 8015d8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8015d8c:	e012      	b.n	8015db4 <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8015d8e:	2340      	movs	r3, #64	; 0x40
 8015d90:	2202      	movs	r2, #2
 8015d92:	2101      	movs	r1, #1
 8015d94:	6878      	ldr	r0, [r7, #4]
 8015d96:	f002 fd6e 	bl	8018876 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	2201      	movs	r2, #1
 8015d9e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8015da2:	2340      	movs	r3, #64	; 0x40
 8015da4:	2202      	movs	r2, #2
 8015da6:	2181      	movs	r1, #129	; 0x81
 8015da8:	6878      	ldr	r0, [r7, #4]
 8015daa:	f002 fd64 	bl	8018876 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	2201      	movs	r2, #1
 8015db2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8015db4:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8015db8:	f002 fea4 	bl	8018b04 <USBD_static_malloc>
 8015dbc:	4602      	mov	r2, r0
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d101      	bne.n	8015dd2 <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 8015dce:	2302      	movs	r3, #2
 8015dd0:	e003      	b.n	8015dda <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8015dd2:	6878      	ldr	r0, [r7, #4]
 8015dd4:	f000 f9db 	bl	801618e <MSC_BOT_Init>

  return USBD_OK;
 8015dd8:	2300      	movs	r3, #0
}
 8015dda:	4618      	mov	r0, r3
 8015ddc:	3708      	adds	r7, #8
 8015dde:	46bd      	mov	sp, r7
 8015de0:	bd80      	pop	{r7, pc}

08015de2 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 8015de2:	b580      	push	{r7, lr}
 8015de4:	b082      	sub	sp, #8
 8015de6:	af00      	add	r7, sp, #0
 8015de8:	6078      	str	r0, [r7, #4]
 8015dea:	460b      	mov	r3, r1
 8015dec:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8015dee:	2101      	movs	r1, #1
 8015df0:	6878      	ldr	r0, [r7, #4]
 8015df2:	f002 fd66 	bl	80188c2 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	2200      	movs	r2, #0
 8015dfa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8015dfe:	2181      	movs	r1, #129	; 0x81
 8015e00:	6878      	ldr	r0, [r7, #4]
 8015e02:	f002 fd5e 	bl	80188c2 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	2200      	movs	r2, #0
 8015e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8015e0c:	6878      	ldr	r0, [r7, #4]
 8015e0e:	f000 fa08 	bl	8016222 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d009      	beq.n	8015e30 <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e22:	4618      	mov	r0, r3
 8015e24:	f002 fe7c 	bl	8018b20 <USBD_static_free>
    pdev->pClassData  = NULL;
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	2200      	movs	r2, #0
 8015e2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8015e30:	2300      	movs	r3, #0
}
 8015e32:	4618      	mov	r0, r3
 8015e34:	3708      	adds	r7, #8
 8015e36:	46bd      	mov	sp, r7
 8015e38:	bd80      	pop	{r7, pc}
	...

08015e3c <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	b086      	sub	sp, #24
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	6078      	str	r0, [r7, #4]
 8015e44:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e4c:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 8015e4e:	2300      	movs	r3, #0
 8015e50:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8015e52:	2300      	movs	r3, #0
 8015e54:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015e56:	683b      	ldr	r3, [r7, #0]
 8015e58:	781b      	ldrb	r3, [r3, #0]
 8015e5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d04d      	beq.n	8015efe <USBD_MSC_Setup+0xc2>
 8015e62:	2b20      	cmp	r3, #32
 8015e64:	f040 8113 	bne.w	801608e <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8015e68:	683b      	ldr	r3, [r7, #0]
 8015e6a:	785b      	ldrb	r3, [r3, #1]
 8015e6c:	2bfe      	cmp	r3, #254	; 0xfe
 8015e6e:	d002      	beq.n	8015e76 <USBD_MSC_Setup+0x3a>
 8015e70:	2bff      	cmp	r3, #255	; 0xff
 8015e72:	d024      	beq.n	8015ebe <USBD_MSC_Setup+0x82>
 8015e74:	e03b      	b.n	8015eee <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8015e76:	683b      	ldr	r3, [r7, #0]
 8015e78:	885b      	ldrh	r3, [r3, #2]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d118      	bne.n	8015eb0 <USBD_MSC_Setup+0x74>
 8015e7e:	683b      	ldr	r3, [r7, #0]
 8015e80:	88db      	ldrh	r3, [r3, #6]
 8015e82:	2b01      	cmp	r3, #1
 8015e84:	d114      	bne.n	8015eb0 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 8015e86:	683b      	ldr	r3, [r7, #0]
 8015e88:	781b      	ldrb	r3, [r3, #0]
 8015e8a:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	da0f      	bge.n	8015eb0 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015e96:	699b      	ldr	r3, [r3, #24]
 8015e98:	4798      	blx	r3
 8015e9a:	4603      	mov	r3, r0
 8015e9c:	461a      	mov	r2, r3
 8015e9e:	693b      	ldr	r3, [r7, #16]
 8015ea0:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8015ea2:	693b      	ldr	r3, [r7, #16]
 8015ea4:	2201      	movs	r2, #1
 8015ea6:	4619      	mov	r1, r3
 8015ea8:	6878      	ldr	r0, [r7, #4]
 8015eaa:	f002 f9a0 	bl	80181ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015eae:	e025      	b.n	8015efc <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8015eb0:	6839      	ldr	r1, [r7, #0]
 8015eb2:	6878      	ldr	r0, [r7, #4]
 8015eb4:	f002 f930 	bl	8018118 <USBD_CtlError>
            ret = USBD_FAIL;
 8015eb8:	2302      	movs	r3, #2
 8015eba:	75fb      	strb	r3, [r7, #23]
          break;
 8015ebc:	e01e      	b.n	8015efc <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8015ebe:	683b      	ldr	r3, [r7, #0]
 8015ec0:	885b      	ldrh	r3, [r3, #2]
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d10c      	bne.n	8015ee0 <USBD_MSC_Setup+0xa4>
 8015ec6:	683b      	ldr	r3, [r7, #0]
 8015ec8:	88db      	ldrh	r3, [r3, #6]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d108      	bne.n	8015ee0 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 8015ece:	683b      	ldr	r3, [r7, #0]
 8015ed0:	781b      	ldrb	r3, [r3, #0]
 8015ed2:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	db03      	blt.n	8015ee0 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 8015ed8:	6878      	ldr	r0, [r7, #4]
 8015eda:	f000 f988 	bl	80161ee <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015ede:	e00d      	b.n	8015efc <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8015ee0:	6839      	ldr	r1, [r7, #0]
 8015ee2:	6878      	ldr	r0, [r7, #4]
 8015ee4:	f002 f918 	bl	8018118 <USBD_CtlError>
            ret = USBD_FAIL;
 8015ee8:	2302      	movs	r3, #2
 8015eea:	75fb      	strb	r3, [r7, #23]
          break;
 8015eec:	e006      	b.n	8015efc <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015eee:	6839      	ldr	r1, [r7, #0]
 8015ef0:	6878      	ldr	r0, [r7, #4]
 8015ef2:	f002 f911 	bl	8018118 <USBD_CtlError>
          ret = USBD_FAIL;
 8015ef6:	2302      	movs	r3, #2
 8015ef8:	75fb      	strb	r3, [r7, #23]
          break;
 8015efa:	bf00      	nop
      }
      break;
 8015efc:	e0ce      	b.n	801609c <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015efe:	683b      	ldr	r3, [r7, #0]
 8015f00:	785b      	ldrb	r3, [r3, #1]
 8015f02:	2b0b      	cmp	r3, #11
 8015f04:	f200 80bb 	bhi.w	801607e <USBD_MSC_Setup+0x242>
 8015f08:	a201      	add	r2, pc, #4	; (adr r2, 8015f10 <USBD_MSC_Setup+0xd4>)
 8015f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f0e:	bf00      	nop
 8015f10:	08015f41 	.word	0x08015f41
 8015f14:	08015fb7 	.word	0x08015fb7
 8015f18:	0801607f 	.word	0x0801607f
 8015f1c:	0801607f 	.word	0x0801607f
 8015f20:	0801607f 	.word	0x0801607f
 8015f24:	0801607f 	.word	0x0801607f
 8015f28:	0801607f 	.word	0x0801607f
 8015f2c:	0801607f 	.word	0x0801607f
 8015f30:	0801607f 	.word	0x0801607f
 8015f34:	0801607f 	.word	0x0801607f
 8015f38:	08015f69 	.word	0x08015f69
 8015f3c:	08015f91 	.word	0x08015f91
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f46:	2b03      	cmp	r3, #3
 8015f48:	d107      	bne.n	8015f5a <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8015f4a:	f107 030e 	add.w	r3, r7, #14
 8015f4e:	2202      	movs	r2, #2
 8015f50:	4619      	mov	r1, r3
 8015f52:	6878      	ldr	r0, [r7, #4]
 8015f54:	f002 f94b 	bl	80181ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015f58:	e098      	b.n	801608c <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8015f5a:	6839      	ldr	r1, [r7, #0]
 8015f5c:	6878      	ldr	r0, [r7, #4]
 8015f5e:	f002 f8db 	bl	8018118 <USBD_CtlError>
            ret = USBD_FAIL;
 8015f62:	2302      	movs	r3, #2
 8015f64:	75fb      	strb	r3, [r7, #23]
          break;
 8015f66:	e091      	b.n	801608c <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f6e:	2b03      	cmp	r3, #3
 8015f70:	d107      	bne.n	8015f82 <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8015f72:	693b      	ldr	r3, [r7, #16]
 8015f74:	3304      	adds	r3, #4
 8015f76:	2201      	movs	r2, #1
 8015f78:	4619      	mov	r1, r3
 8015f7a:	6878      	ldr	r0, [r7, #4]
 8015f7c:	f002 f937 	bl	80181ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015f80:	e084      	b.n	801608c <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8015f82:	6839      	ldr	r1, [r7, #0]
 8015f84:	6878      	ldr	r0, [r7, #4]
 8015f86:	f002 f8c7 	bl	8018118 <USBD_CtlError>
            ret = USBD_FAIL;
 8015f8a:	2302      	movs	r3, #2
 8015f8c:	75fb      	strb	r3, [r7, #23]
          break;
 8015f8e:	e07d      	b.n	801608c <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f96:	2b03      	cmp	r3, #3
 8015f98:	d106      	bne.n	8015fa8 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8015f9a:	683b      	ldr	r3, [r7, #0]
 8015f9c:	885b      	ldrh	r3, [r3, #2]
 8015f9e:	b2db      	uxtb	r3, r3
 8015fa0:	461a      	mov	r2, r3
 8015fa2:	693b      	ldr	r3, [r7, #16]
 8015fa4:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015fa6:	e071      	b.n	801608c <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8015fa8:	6839      	ldr	r1, [r7, #0]
 8015faa:	6878      	ldr	r0, [r7, #4]
 8015fac:	f002 f8b4 	bl	8018118 <USBD_CtlError>
            ret = USBD_FAIL;
 8015fb0:	2302      	movs	r3, #2
 8015fb2:	75fb      	strb	r3, [r7, #23]
          break;
 8015fb4:	e06a      	b.n	801608c <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8015fb6:	683b      	ldr	r3, [r7, #0]
 8015fb8:	889b      	ldrh	r3, [r3, #4]
 8015fba:	b2db      	uxtb	r3, r3
 8015fbc:	4619      	mov	r1, r3
 8015fbe:	6878      	ldr	r0, [r7, #4]
 8015fc0:	f002 fc9e 	bl	8018900 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 8015fc4:	683b      	ldr	r3, [r7, #0]
 8015fc6:	889b      	ldrh	r3, [r3, #4]
 8015fc8:	b2db      	uxtb	r3, r3
 8015fca:	4619      	mov	r1, r3
 8015fcc:	6878      	ldr	r0, [r7, #4]
 8015fce:	f002 fc78 	bl	80188c2 <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8015fd2:	683b      	ldr	r3, [r7, #0]
 8015fd4:	889b      	ldrh	r3, [r3, #4]
 8015fd6:	b25b      	sxtb	r3, r3
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	da23      	bge.n	8016024 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8015fdc:	683b      	ldr	r3, [r7, #0]
 8015fde:	889b      	ldrh	r3, [r3, #4]
 8015fe0:	b2db      	uxtb	r3, r3
 8015fe2:	f003 020f 	and.w	r2, r3, #15
 8015fe6:	6879      	ldr	r1, [r7, #4]
 8015fe8:	4613      	mov	r3, r2
 8015fea:	009b      	lsls	r3, r3, #2
 8015fec:	4413      	add	r3, r2
 8015fee:	009b      	lsls	r3, r3, #2
 8015ff0:	440b      	add	r3, r1
 8015ff2:	3318      	adds	r3, #24
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	7c1b      	ldrb	r3, [r3, #16]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d107      	bne.n	8016010 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8016000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016004:	2202      	movs	r2, #2
 8016006:	2181      	movs	r1, #129	; 0x81
 8016008:	6878      	ldr	r0, [r7, #4]
 801600a:	f002 fc34 	bl	8018876 <USBD_LL_OpenEP>
 801600e:	e005      	b.n	801601c <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8016010:	2340      	movs	r3, #64	; 0x40
 8016012:	2202      	movs	r2, #2
 8016014:	2181      	movs	r1, #129	; 0x81
 8016016:	6878      	ldr	r0, [r7, #4]
 8016018:	f002 fc2d 	bl	8018876 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	2201      	movs	r2, #1
 8016020:	62da      	str	r2, [r3, #44]	; 0x2c
 8016022:	e024      	b.n	801606e <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8016024:	683b      	ldr	r3, [r7, #0]
 8016026:	889b      	ldrh	r3, [r3, #4]
 8016028:	b2db      	uxtb	r3, r3
 801602a:	f003 020f 	and.w	r2, r3, #15
 801602e:	6879      	ldr	r1, [r7, #4]
 8016030:	4613      	mov	r3, r2
 8016032:	009b      	lsls	r3, r3, #2
 8016034:	4413      	add	r3, r2
 8016036:	009b      	lsls	r3, r3, #2
 8016038:	440b      	add	r3, r1
 801603a:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 801603e:	2200      	movs	r2, #0
 8016040:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	7c1b      	ldrb	r3, [r3, #16]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d107      	bne.n	801605a <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 801604a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801604e:	2202      	movs	r2, #2
 8016050:	2101      	movs	r1, #1
 8016052:	6878      	ldr	r0, [r7, #4]
 8016054:	f002 fc0f 	bl	8018876 <USBD_LL_OpenEP>
 8016058:	e005      	b.n	8016066 <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 801605a:	2340      	movs	r3, #64	; 0x40
 801605c:	2202      	movs	r2, #2
 801605e:	2101      	movs	r1, #1
 8016060:	6878      	ldr	r0, [r7, #4]
 8016062:	f002 fc08 	bl	8018876 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	2201      	movs	r2, #1
 801606a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801606e:	683b      	ldr	r3, [r7, #0]
 8016070:	889b      	ldrh	r3, [r3, #4]
 8016072:	b2db      	uxtb	r3, r3
 8016074:	4619      	mov	r1, r3
 8016076:	6878      	ldr	r0, [r7, #4]
 8016078:	f000 fa54 	bl	8016524 <MSC_BOT_CplClrFeature>
          break;
 801607c:	e006      	b.n	801608c <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 801607e:	6839      	ldr	r1, [r7, #0]
 8016080:	6878      	ldr	r0, [r7, #4]
 8016082:	f002 f849 	bl	8018118 <USBD_CtlError>
          ret = USBD_FAIL;
 8016086:	2302      	movs	r3, #2
 8016088:	75fb      	strb	r3, [r7, #23]
          break;
 801608a:	bf00      	nop
      }
      break;
 801608c:	e006      	b.n	801609c <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 801608e:	6839      	ldr	r1, [r7, #0]
 8016090:	6878      	ldr	r0, [r7, #4]
 8016092:	f002 f841 	bl	8018118 <USBD_CtlError>
      ret = USBD_FAIL;
 8016096:	2302      	movs	r3, #2
 8016098:	75fb      	strb	r3, [r7, #23]
      break;
 801609a:	bf00      	nop
  }

  return ret;
 801609c:	7dfb      	ldrb	r3, [r7, #23]
}
 801609e:	4618      	mov	r0, r3
 80160a0:	3718      	adds	r7, #24
 80160a2:	46bd      	mov	sp, r7
 80160a4:	bd80      	pop	{r7, pc}
 80160a6:	bf00      	nop

080160a8 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b082      	sub	sp, #8
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
 80160b0:	460b      	mov	r3, r1
 80160b2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80160b4:	78fb      	ldrb	r3, [r7, #3]
 80160b6:	4619      	mov	r1, r3
 80160b8:	6878      	ldr	r0, [r7, #4]
 80160ba:	f000 f8c3 	bl	8016244 <MSC_BOT_DataIn>

  return USBD_OK;
 80160be:	2300      	movs	r3, #0
}
 80160c0:	4618      	mov	r0, r3
 80160c2:	3708      	adds	r7, #8
 80160c4:	46bd      	mov	sp, r7
 80160c6:	bd80      	pop	{r7, pc}

080160c8 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b082      	sub	sp, #8
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	6078      	str	r0, [r7, #4]
 80160d0:	460b      	mov	r3, r1
 80160d2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80160d4:	78fb      	ldrb	r3, [r7, #3]
 80160d6:	4619      	mov	r1, r3
 80160d8:	6878      	ldr	r0, [r7, #4]
 80160da:	f000 f8e5 	bl	80162a8 <MSC_BOT_DataOut>

  return USBD_OK;
 80160de:	2300      	movs	r3, #0
}
 80160e0:	4618      	mov	r0, r3
 80160e2:	3708      	adds	r7, #8
 80160e4:	46bd      	mov	sp, r7
 80160e6:	bd80      	pop	{r7, pc}

080160e8 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80160e8:	b480      	push	{r7}
 80160ea:	b083      	sub	sp, #12
 80160ec:	af00      	add	r7, sp, #0
 80160ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	2220      	movs	r2, #32
 80160f4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80160f6:	4b03      	ldr	r3, [pc, #12]	; (8016104 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80160f8:	4618      	mov	r0, r3
 80160fa:	370c      	adds	r7, #12
 80160fc:	46bd      	mov	sp, r7
 80160fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016102:	4770      	bx	lr
 8016104:	20000044 	.word	0x20000044

08016108 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8016108:	b480      	push	{r7}
 801610a:	b083      	sub	sp, #12
 801610c:	af00      	add	r7, sp, #0
 801610e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	2220      	movs	r2, #32
 8016114:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8016116:	4b03      	ldr	r3, [pc, #12]	; (8016124 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8016118:	4618      	mov	r0, r3
 801611a:	370c      	adds	r7, #12
 801611c:	46bd      	mov	sp, r7
 801611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016122:	4770      	bx	lr
 8016124:	20000064 	.word	0x20000064

08016128 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016128:	b480      	push	{r7}
 801612a:	b083      	sub	sp, #12
 801612c:	af00      	add	r7, sp, #0
 801612e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	2220      	movs	r2, #32
 8016134:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8016136:	4b03      	ldr	r3, [pc, #12]	; (8016144 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8016138:	4618      	mov	r0, r3
 801613a:	370c      	adds	r7, #12
 801613c:	46bd      	mov	sp, r7
 801613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016142:	4770      	bx	lr
 8016144:	20000084 	.word	0x20000084

08016148 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016148:	b480      	push	{r7}
 801614a:	b083      	sub	sp, #12
 801614c:	af00      	add	r7, sp, #0
 801614e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	220a      	movs	r2, #10
 8016154:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8016156:	4b03      	ldr	r3, [pc, #12]	; (8016164 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016158:	4618      	mov	r0, r3
 801615a:	370c      	adds	r7, #12
 801615c:	46bd      	mov	sp, r7
 801615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016162:	4770      	bx	lr
 8016164:	200000a4 	.word	0x200000a4

08016168 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 8016168:	b480      	push	{r7}
 801616a:	b083      	sub	sp, #12
 801616c:	af00      	add	r7, sp, #0
 801616e:	6078      	str	r0, [r7, #4]
 8016170:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8016172:	683b      	ldr	r3, [r7, #0]
 8016174:	2b00      	cmp	r3, #0
 8016176:	d003      	beq.n	8016180 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	683a      	ldr	r2, [r7, #0]
 801617c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 8016180:	2300      	movs	r3, #0
}
 8016182:	4618      	mov	r0, r3
 8016184:	370c      	adds	r7, #12
 8016186:	46bd      	mov	sp, r7
 8016188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801618c:	4770      	bx	lr

0801618e <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 801618e:	b580      	push	{r7, lr}
 8016190:	b084      	sub	sp, #16
 8016192:	af00      	add	r7, sp, #0
 8016194:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801619c:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	2200      	movs	r2, #0
 80161a2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	2200      	movs	r2, #0
 80161a8:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	2200      	movs	r2, #0
 80161ae:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	2200      	movs	r2, #0
 80161b6:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	2000      	movs	r0, #0
 80161c4:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 80161c6:	2101      	movs	r1, #1
 80161c8:	6878      	ldr	r0, [r7, #4]
 80161ca:	f002 fb99 	bl	8018900 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 80161ce:	2181      	movs	r1, #129	; 0x81
 80161d0:	6878      	ldr	r0, [r7, #4]
 80161d2:	f002 fb95 	bl	8018900 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80161dc:	231f      	movs	r3, #31
 80161de:	2101      	movs	r1, #1
 80161e0:	6878      	ldr	r0, [r7, #4]
 80161e2:	f002 fc58 	bl	8018a96 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80161e6:	bf00      	nop
 80161e8:	3710      	adds	r7, #16
 80161ea:	46bd      	mov	sp, r7
 80161ec:	bd80      	pop	{r7, pc}

080161ee <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 80161ee:	b580      	push	{r7, lr}
 80161f0:	b084      	sub	sp, #16
 80161f2:	af00      	add	r7, sp, #0
 80161f4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80161fc:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	2200      	movs	r2, #0
 8016202:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	2201      	movs	r2, #1
 8016208:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8016210:	231f      	movs	r3, #31
 8016212:	2101      	movs	r1, #1
 8016214:	6878      	ldr	r0, [r7, #4]
 8016216:	f002 fc3e 	bl	8018a96 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 801621a:	bf00      	nop
 801621c:	3710      	adds	r7, #16
 801621e:	46bd      	mov	sp, r7
 8016220:	bd80      	pop	{r7, pc}

08016222 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8016222:	b480      	push	{r7}
 8016224:	b085      	sub	sp, #20
 8016226:	af00      	add	r7, sp, #0
 8016228:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016230:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	2200      	movs	r2, #0
 8016236:	721a      	strb	r2, [r3, #8]
}
 8016238:	bf00      	nop
 801623a:	3714      	adds	r7, #20
 801623c:	46bd      	mov	sp, r7
 801623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016242:	4770      	bx	lr

08016244 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 8016244:	b580      	push	{r7, lr}
 8016246:	b084      	sub	sp, #16
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
 801624c:	460b      	mov	r3, r1
 801624e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016256:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	7a1b      	ldrb	r3, [r3, #8]
 801625c:	2b02      	cmp	r3, #2
 801625e:	d005      	beq.n	801626c <MSC_BOT_DataIn+0x28>
 8016260:	2b02      	cmp	r3, #2
 8016262:	db1a      	blt.n	801629a <MSC_BOT_DataIn+0x56>
 8016264:	3b03      	subs	r3, #3
 8016266:	2b01      	cmp	r3, #1
 8016268:	d817      	bhi.n	801629a <MSC_BOT_DataIn+0x56>
 801626a:	e011      	b.n	8016290 <MSC_BOT_DataIn+0x4c>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8016278:	461a      	mov	r2, r3
 801627a:	6878      	ldr	r0, [r7, #4]
 801627c:	f000 f97a 	bl	8016574 <SCSI_ProcessCmd>
 8016280:	4603      	mov	r3, r0
 8016282:	2b00      	cmp	r3, #0
 8016284:	da0b      	bge.n	801629e <MSC_BOT_DataIn+0x5a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8016286:	2101      	movs	r1, #1
 8016288:	6878      	ldr	r0, [r7, #4]
 801628a:	f000 f8f1 	bl	8016470 <MSC_BOT_SendCSW>
      }
      break;
 801628e:	e006      	b.n	801629e <MSC_BOT_DataIn+0x5a>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8016290:	2100      	movs	r1, #0
 8016292:	6878      	ldr	r0, [r7, #4]
 8016294:	f000 f8ec 	bl	8016470 <MSC_BOT_SendCSW>
      break;
 8016298:	e002      	b.n	80162a0 <MSC_BOT_DataIn+0x5c>

    default:
      break;
 801629a:	bf00      	nop
 801629c:	e000      	b.n	80162a0 <MSC_BOT_DataIn+0x5c>
      break;
 801629e:	bf00      	nop
  }
}
 80162a0:	bf00      	nop
 80162a2:	3710      	adds	r7, #16
 80162a4:	46bd      	mov	sp, r7
 80162a6:	bd80      	pop	{r7, pc}

080162a8 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b084      	sub	sp, #16
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	6078      	str	r0, [r7, #4]
 80162b0:	460b      	mov	r3, r1
 80162b2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80162ba:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	7a1b      	ldrb	r3, [r3, #8]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d002      	beq.n	80162ca <MSC_BOT_DataOut+0x22>
 80162c4:	2b01      	cmp	r3, #1
 80162c6:	d004      	beq.n	80162d2 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80162c8:	e015      	b.n	80162f6 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 80162ca:	6878      	ldr	r0, [r7, #4]
 80162cc:	f000 f818 	bl	8016300 <MSC_BOT_CBW_Decode>
      break;
 80162d0:	e011      	b.n	80162f6 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80162de:	461a      	mov	r2, r3
 80162e0:	6878      	ldr	r0, [r7, #4]
 80162e2:	f000 f947 	bl	8016574 <SCSI_ProcessCmd>
 80162e6:	4603      	mov	r3, r0
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	da03      	bge.n	80162f4 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80162ec:	2101      	movs	r1, #1
 80162ee:	6878      	ldr	r0, [r7, #4]
 80162f0:	f000 f8be 	bl	8016470 <MSC_BOT_SendCSW>
      break;
 80162f4:	bf00      	nop
  }
}
 80162f6:	bf00      	nop
 80162f8:	3710      	adds	r7, #16
 80162fa:	46bd      	mov	sp, r7
 80162fc:	bd80      	pop	{r7, pc}
	...

08016300 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b084      	sub	sp, #16
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801630e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8016328:	2101      	movs	r1, #1
 801632a:	6878      	ldr	r0, [r7, #4]
 801632c:	f002 fbd6 	bl	8018adc <USBD_LL_GetRxDataSize>
 8016330:	4603      	mov	r3, r0
 8016332:	2b1f      	cmp	r3, #31
 8016334:	d114      	bne.n	8016360 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 801633c:	4a32      	ldr	r2, [pc, #200]	; (8016408 <MSC_BOT_CBW_Decode+0x108>)
 801633e:	4293      	cmp	r3, r2
 8016340:	d10e      	bne.n	8016360 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8016348:	2b01      	cmp	r3, #1
 801634a:	d809      	bhi.n	8016360 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 8016352:	2b00      	cmp	r3, #0
 8016354:	d004      	beq.n	8016360 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 801635c:	2b10      	cmp	r3, #16
 801635e:	d90e      	bls.n	801637e <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8016366:	2320      	movs	r3, #32
 8016368:	2205      	movs	r2, #5
 801636a:	6878      	ldr	r0, [r7, #4]
 801636c:	f000 fc4b 	bl	8016c06 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	2202      	movs	r2, #2
 8016374:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8016376:	6878      	ldr	r0, [r7, #4]
 8016378:	f000 f8a6 	bl	80164c8 <MSC_BOT_Abort>
 801637c:	e041      	b.n	8016402 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801637e:	68fb      	ldr	r3, [r7, #12]
 8016380:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801638a:	461a      	mov	r2, r3
 801638c:	6878      	ldr	r0, [r7, #4]
 801638e:	f000 f8f1 	bl	8016574 <SCSI_ProcessCmd>
 8016392:	4603      	mov	r3, r0
 8016394:	2b00      	cmp	r3, #0
 8016396:	da0c      	bge.n	80163b2 <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	7a1b      	ldrb	r3, [r3, #8]
 801639c:	2b05      	cmp	r3, #5
 801639e:	d104      	bne.n	80163aa <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80163a0:	2101      	movs	r1, #1
 80163a2:	6878      	ldr	r0, [r7, #4]
 80163a4:	f000 f864 	bl	8016470 <MSC_BOT_SendCSW>
 80163a8:	e02b      	b.n	8016402 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80163aa:	6878      	ldr	r0, [r7, #4]
 80163ac:	f000 f88c 	bl	80164c8 <MSC_BOT_Abort>
 80163b0:	e027      	b.n	8016402 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	7a1b      	ldrb	r3, [r3, #8]
 80163b6:	2b02      	cmp	r3, #2
 80163b8:	d022      	beq.n	8016400 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80163be:	2b01      	cmp	r3, #1
 80163c0:	d01e      	beq.n	8016400 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80163c6:	2b03      	cmp	r3, #3
 80163c8:	d01a      	beq.n	8016400 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	895b      	ldrh	r3, [r3, #10]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d009      	beq.n	80163e6 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	f103 010c 	add.w	r1, r3, #12
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	895b      	ldrh	r3, [r3, #10]
 80163dc:	461a      	mov	r2, r3
 80163de:	6878      	ldr	r0, [r7, #4]
 80163e0:	f000 f814 	bl	801640c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80163e4:	e00d      	b.n	8016402 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	895b      	ldrh	r3, [r3, #10]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d104      	bne.n	80163f8 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80163ee:	2100      	movs	r1, #0
 80163f0:	6878      	ldr	r0, [r7, #4]
 80163f2:	f000 f83d 	bl	8016470 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80163f6:	e004      	b.n	8016402 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80163f8:	6878      	ldr	r0, [r7, #4]
 80163fa:	f000 f865 	bl	80164c8 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80163fe:	e000      	b.n	8016402 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8016400:	bf00      	nop
    }
  }
}
 8016402:	3710      	adds	r7, #16
 8016404:	46bd      	mov	sp, r7
 8016406:	bd80      	pop	{r7, pc}
 8016408:	43425355 	.word	0x43425355

0801640c <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 801640c:	b580      	push	{r7, lr}
 801640e:	b086      	sub	sp, #24
 8016410:	af00      	add	r7, sp, #0
 8016412:	60f8      	str	r0, [r7, #12]
 8016414:	60b9      	str	r1, [r7, #8]
 8016416:	4613      	mov	r3, r2
 8016418:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016420:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8016422:	697b      	ldr	r3, [r7, #20]
 8016424:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8016428:	88fb      	ldrh	r3, [r7, #6]
 801642a:	429a      	cmp	r2, r3
 801642c:	d204      	bcs.n	8016438 <MSC_BOT_SendData+0x2c>
 801642e:	697b      	ldr	r3, [r7, #20]
 8016430:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016434:	b29b      	uxth	r3, r3
 8016436:	e000      	b.n	801643a <MSC_BOT_SendData+0x2e>
 8016438:	88fb      	ldrh	r3, [r7, #6]
 801643a:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 801643c:	697b      	ldr	r3, [r7, #20]
 801643e:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8016442:	88fb      	ldrh	r3, [r7, #6]
 8016444:	1ad2      	subs	r2, r2, r3
 8016446:	697b      	ldr	r3, [r7, #20]
 8016448:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801644c:	697b      	ldr	r3, [r7, #20]
 801644e:	2200      	movs	r2, #0
 8016450:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8016454:	697b      	ldr	r3, [r7, #20]
 8016456:	2204      	movs	r2, #4
 8016458:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 801645a:	8a7b      	ldrh	r3, [r7, #18]
 801645c:	68ba      	ldr	r2, [r7, #8]
 801645e:	2181      	movs	r1, #129	; 0x81
 8016460:	68f8      	ldr	r0, [r7, #12]
 8016462:	f002 faf5 	bl	8018a50 <USBD_LL_Transmit>
}
 8016466:	bf00      	nop
 8016468:	3718      	adds	r7, #24
 801646a:	46bd      	mov	sp, r7
 801646c:	bd80      	pop	{r7, pc}
	...

08016470 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b084      	sub	sp, #16
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
 8016478:	460b      	mov	r3, r1
 801647a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016482:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	4a0f      	ldr	r2, [pc, #60]	; (80164c4 <MSC_BOT_SendCSW+0x54>)
 8016488:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	78fa      	ldrb	r2, [r7, #3]
 8016490:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	2200      	movs	r2, #0
 8016498:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 80164a0:	230d      	movs	r3, #13
 80164a2:	2181      	movs	r1, #129	; 0x81
 80164a4:	6878      	ldr	r0, [r7, #4]
 80164a6:	f002 fad3 	bl	8018a50 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80164b0:	231f      	movs	r3, #31
 80164b2:	2101      	movs	r1, #1
 80164b4:	6878      	ldr	r0, [r7, #4]
 80164b6:	f002 faee 	bl	8018a96 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80164ba:	bf00      	nop
 80164bc:	3710      	adds	r7, #16
 80164be:	46bd      	mov	sp, r7
 80164c0:	bd80      	pop	{r7, pc}
 80164c2:	bf00      	nop
 80164c4:	53425355 	.word	0x53425355

080164c8 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 80164c8:	b580      	push	{r7, lr}
 80164ca:	b084      	sub	sp, #16
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80164d6:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d10c      	bne.n	80164fc <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d007      	beq.n	80164fc <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d103      	bne.n	80164fc <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80164f4:	2101      	movs	r1, #1
 80164f6:	6878      	ldr	r0, [r7, #4]
 80164f8:	f002 fa21 	bl	801893e <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80164fc:	2181      	movs	r1, #129	; 0x81
 80164fe:	6878      	ldr	r0, [r7, #4]
 8016500:	f002 fa1d 	bl	801893e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	7a5b      	ldrb	r3, [r3, #9]
 8016508:	2b02      	cmp	r3, #2
 801650a:	d107      	bne.n	801651c <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8016512:	231f      	movs	r3, #31
 8016514:	2101      	movs	r1, #1
 8016516:	6878      	ldr	r0, [r7, #4]
 8016518:	f002 fabd 	bl	8018a96 <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 801651c:	bf00      	nop
 801651e:	3710      	adds	r7, #16
 8016520:	46bd      	mov	sp, r7
 8016522:	bd80      	pop	{r7, pc}

08016524 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8016524:	b580      	push	{r7, lr}
 8016526:	b084      	sub	sp, #16
 8016528:	af00      	add	r7, sp, #0
 801652a:	6078      	str	r0, [r7, #4]
 801652c:	460b      	mov	r3, r1
 801652e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016536:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	7a5b      	ldrb	r3, [r3, #9]
 801653c:	2b02      	cmp	r3, #2
 801653e:	d107      	bne.n	8016550 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8016540:	2181      	movs	r1, #129	; 0x81
 8016542:	6878      	ldr	r0, [r7, #4]
 8016544:	f002 f9fb 	bl	801893e <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	2200      	movs	r2, #0
 801654c:	725a      	strb	r2, [r3, #9]
 801654e:	e00d      	b.n	801656c <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8016550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016554:	2b00      	cmp	r3, #0
 8016556:	da08      	bge.n	801656a <MSC_BOT_CplClrFeature+0x46>
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	7a5b      	ldrb	r3, [r3, #9]
 801655c:	2b01      	cmp	r3, #1
 801655e:	d004      	beq.n	801656a <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8016560:	2101      	movs	r1, #1
 8016562:	6878      	ldr	r0, [r7, #4]
 8016564:	f7ff ff84 	bl	8016470 <MSC_BOT_SendCSW>
 8016568:	e000      	b.n	801656c <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 801656a:	bf00      	nop
  }
}
 801656c:	3710      	adds	r7, #16
 801656e:	46bd      	mov	sp, r7
 8016570:	bd80      	pop	{r7, pc}
	...

08016574 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8016574:	b580      	push	{r7, lr}
 8016576:	b084      	sub	sp, #16
 8016578:	af00      	add	r7, sp, #0
 801657a:	60f8      	str	r0, [r7, #12]
 801657c:	460b      	mov	r3, r1
 801657e:	607a      	str	r2, [r7, #4]
 8016580:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	781b      	ldrb	r3, [r3, #0]
 8016586:	2b5a      	cmp	r3, #90	; 0x5a
 8016588:	f200 810e 	bhi.w	80167a8 <SCSI_ProcessCmd+0x234>
 801658c:	a201      	add	r2, pc, #4	; (adr r2, 8016594 <SCSI_ProcessCmd+0x20>)
 801658e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016592:	bf00      	nop
 8016594:	08016701 	.word	0x08016701
 8016598:	080167a9 	.word	0x080167a9
 801659c:	080167a9 	.word	0x080167a9
 80165a0:	0801670f 	.word	0x0801670f
 80165a4:	080167a9 	.word	0x080167a9
 80165a8:	080167a9 	.word	0x080167a9
 80165ac:	080167a9 	.word	0x080167a9
 80165b0:	080167a9 	.word	0x080167a9
 80165b4:	080167a9 	.word	0x080167a9
 80165b8:	080167a9 	.word	0x080167a9
 80165bc:	080167a9 	.word	0x080167a9
 80165c0:	080167a9 	.word	0x080167a9
 80165c4:	080167a9 	.word	0x080167a9
 80165c8:	080167a9 	.word	0x080167a9
 80165cc:	080167a9 	.word	0x080167a9
 80165d0:	080167a9 	.word	0x080167a9
 80165d4:	080167a9 	.word	0x080167a9
 80165d8:	080167a9 	.word	0x080167a9
 80165dc:	0801671d 	.word	0x0801671d
 80165e0:	080167a9 	.word	0x080167a9
 80165e4:	080167a9 	.word	0x080167a9
 80165e8:	080167a9 	.word	0x080167a9
 80165ec:	080167a9 	.word	0x080167a9
 80165f0:	080167a9 	.word	0x080167a9
 80165f4:	080167a9 	.word	0x080167a9
 80165f8:	080167a9 	.word	0x080167a9
 80165fc:	08016747 	.word	0x08016747
 8016600:	0801672b 	.word	0x0801672b
 8016604:	080167a9 	.word	0x080167a9
 8016608:	080167a9 	.word	0x080167a9
 801660c:	08016739 	.word	0x08016739
 8016610:	080167a9 	.word	0x080167a9
 8016614:	080167a9 	.word	0x080167a9
 8016618:	080167a9 	.word	0x080167a9
 801661c:	080167a9 	.word	0x080167a9
 8016620:	08016763 	.word	0x08016763
 8016624:	080167a9 	.word	0x080167a9
 8016628:	08016771 	.word	0x08016771
 801662c:	080167a9 	.word	0x080167a9
 8016630:	080167a9 	.word	0x080167a9
 8016634:	0801677f 	.word	0x0801677f
 8016638:	080167a9 	.word	0x080167a9
 801663c:	0801678d 	.word	0x0801678d
 8016640:	080167a9 	.word	0x080167a9
 8016644:	080167a9 	.word	0x080167a9
 8016648:	080167a9 	.word	0x080167a9
 801664c:	080167a9 	.word	0x080167a9
 8016650:	0801679b 	.word	0x0801679b
 8016654:	080167a9 	.word	0x080167a9
 8016658:	080167a9 	.word	0x080167a9
 801665c:	080167a9 	.word	0x080167a9
 8016660:	080167a9 	.word	0x080167a9
 8016664:	080167a9 	.word	0x080167a9
 8016668:	080167a9 	.word	0x080167a9
 801666c:	080167a9 	.word	0x080167a9
 8016670:	080167a9 	.word	0x080167a9
 8016674:	080167a9 	.word	0x080167a9
 8016678:	080167a9 	.word	0x080167a9
 801667c:	080167a9 	.word	0x080167a9
 8016680:	080167a9 	.word	0x080167a9
 8016684:	080167a9 	.word	0x080167a9
 8016688:	080167a9 	.word	0x080167a9
 801668c:	080167a9 	.word	0x080167a9
 8016690:	080167a9 	.word	0x080167a9
 8016694:	080167a9 	.word	0x080167a9
 8016698:	080167a9 	.word	0x080167a9
 801669c:	080167a9 	.word	0x080167a9
 80166a0:	080167a9 	.word	0x080167a9
 80166a4:	080167a9 	.word	0x080167a9
 80166a8:	080167a9 	.word	0x080167a9
 80166ac:	080167a9 	.word	0x080167a9
 80166b0:	080167a9 	.word	0x080167a9
 80166b4:	080167a9 	.word	0x080167a9
 80166b8:	080167a9 	.word	0x080167a9
 80166bc:	080167a9 	.word	0x080167a9
 80166c0:	080167a9 	.word	0x080167a9
 80166c4:	080167a9 	.word	0x080167a9
 80166c8:	080167a9 	.word	0x080167a9
 80166cc:	080167a9 	.word	0x080167a9
 80166d0:	080167a9 	.word	0x080167a9
 80166d4:	080167a9 	.word	0x080167a9
 80166d8:	080167a9 	.word	0x080167a9
 80166dc:	080167a9 	.word	0x080167a9
 80166e0:	080167a9 	.word	0x080167a9
 80166e4:	080167a9 	.word	0x080167a9
 80166e8:	080167a9 	.word	0x080167a9
 80166ec:	080167a9 	.word	0x080167a9
 80166f0:	080167a9 	.word	0x080167a9
 80166f4:	080167a9 	.word	0x080167a9
 80166f8:	080167a9 	.word	0x080167a9
 80166fc:	08016755 	.word	0x08016755
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8016700:	7afb      	ldrb	r3, [r7, #11]
 8016702:	687a      	ldr	r2, [r7, #4]
 8016704:	4619      	mov	r1, r3
 8016706:	68f8      	ldr	r0, [r7, #12]
 8016708:	f000 f85c 	bl	80167c4 <SCSI_TestUnitReady>
      break;
 801670c:	e055      	b.n	80167ba <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 801670e:	7afb      	ldrb	r3, [r7, #11]
 8016710:	687a      	ldr	r2, [r7, #4]
 8016712:	4619      	mov	r1, r3
 8016714:	68f8      	ldr	r0, [r7, #12]
 8016716:	f000 fa0b 	bl	8016b30 <SCSI_RequestSense>
      break;
 801671a:	e04e      	b.n	80167ba <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 801671c:	7afb      	ldrb	r3, [r7, #11]
 801671e:	687a      	ldr	r2, [r7, #4]
 8016720:	4619      	mov	r1, r3
 8016722:	68f8      	ldr	r0, [r7, #12]
 8016724:	f000 f888 	bl	8016838 <SCSI_Inquiry>
      break;
 8016728:	e047      	b.n	80167ba <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 801672a:	7afb      	ldrb	r3, [r7, #11]
 801672c:	687a      	ldr	r2, [r7, #4]
 801672e:	4619      	mov	r1, r3
 8016730:	68f8      	ldr	r0, [r7, #12]
 8016732:	f000 faa2 	bl	8016c7a <SCSI_StartStopUnit>
      break;
 8016736:	e040      	b.n	80167ba <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8016738:	7afb      	ldrb	r3, [r7, #11]
 801673a:	687a      	ldr	r2, [r7, #4]
 801673c:	4619      	mov	r1, r3
 801673e:	68f8      	ldr	r0, [r7, #12]
 8016740:	f000 fa9b 	bl	8016c7a <SCSI_StartStopUnit>
      break;
 8016744:	e039      	b.n	80167ba <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 8016746:	7afb      	ldrb	r3, [r7, #11]
 8016748:	687a      	ldr	r2, [r7, #4]
 801674a:	4619      	mov	r1, r3
 801674c:	68f8      	ldr	r0, [r7, #12]
 801674e:	f000 f99f 	bl	8016a90 <SCSI_ModeSense6>
      break;
 8016752:	e032      	b.n	80167ba <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8016754:	7afb      	ldrb	r3, [r7, #11]
 8016756:	687a      	ldr	r2, [r7, #4]
 8016758:	4619      	mov	r1, r3
 801675a:	68f8      	ldr	r0, [r7, #12]
 801675c:	f000 f9c0 	bl	8016ae0 <SCSI_ModeSense10>
      break;
 8016760:	e02b      	b.n	80167ba <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8016762:	7afb      	ldrb	r3, [r7, #11]
 8016764:	687a      	ldr	r2, [r7, #4]
 8016766:	4619      	mov	r1, r3
 8016768:	68f8      	ldr	r0, [r7, #12]
 801676a:	f000 f92c 	bl	80169c6 <SCSI_ReadFormatCapacity>
      break;
 801676e:	e024      	b.n	80167ba <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 8016770:	7afb      	ldrb	r3, [r7, #11]
 8016772:	687a      	ldr	r2, [r7, #4]
 8016774:	4619      	mov	r1, r3
 8016776:	68f8      	ldr	r0, [r7, #12]
 8016778:	f000 f8be 	bl	80168f8 <SCSI_ReadCapacity10>
      break;
 801677c:	e01d      	b.n	80167ba <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 801677e:	7afb      	ldrb	r3, [r7, #11]
 8016780:	687a      	ldr	r2, [r7, #4]
 8016782:	4619      	mov	r1, r3
 8016784:	68f8      	ldr	r0, [r7, #12]
 8016786:	f000 fa8d 	bl	8016ca4 <SCSI_Read10>
      break;
 801678a:	e016      	b.n	80167ba <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 801678c:	7afb      	ldrb	r3, [r7, #11]
 801678e:	687a      	ldr	r2, [r7, #4]
 8016790:	4619      	mov	r1, r3
 8016792:	68f8      	ldr	r0, [r7, #12]
 8016794:	f000 fb12 	bl	8016dbc <SCSI_Write10>
      break;
 8016798:	e00f      	b.n	80167ba <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 801679a:	7afb      	ldrb	r3, [r7, #11]
 801679c:	687a      	ldr	r2, [r7, #4]
 801679e:	4619      	mov	r1, r3
 80167a0:	68f8      	ldr	r0, [r7, #12]
 80167a2:	f000 fbbb 	bl	8016f1c <SCSI_Verify10>
      break;
 80167a6:	e008      	b.n	80167ba <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80167a8:	7af9      	ldrb	r1, [r7, #11]
 80167aa:	2320      	movs	r3, #32
 80167ac:	2205      	movs	r2, #5
 80167ae:	68f8      	ldr	r0, [r7, #12]
 80167b0:	f000 fa29 	bl	8016c06 <SCSI_SenseCode>
      return -1;
 80167b4:	f04f 33ff 	mov.w	r3, #4294967295
 80167b8:	e000      	b.n	80167bc <SCSI_ProcessCmd+0x248>
  }

  return 0;
 80167ba:	2300      	movs	r3, #0
}
 80167bc:	4618      	mov	r0, r3
 80167be:	3710      	adds	r7, #16
 80167c0:	46bd      	mov	sp, r7
 80167c2:	bd80      	pop	{r7, pc}

080167c4 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b086      	sub	sp, #24
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	60f8      	str	r0, [r7, #12]
 80167cc:	460b      	mov	r3, r1
 80167ce:	607a      	str	r2, [r7, #4]
 80167d0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80167d8:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80167da:	697b      	ldr	r3, [r7, #20]
 80167dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d00a      	beq.n	80167fa <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80167e4:	697b      	ldr	r3, [r7, #20]
 80167e6:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80167ea:	2320      	movs	r3, #32
 80167ec:	2205      	movs	r2, #5
 80167ee:	68f8      	ldr	r0, [r7, #12]
 80167f0:	f000 fa09 	bl	8016c06 <SCSI_SenseCode>

    return -1;
 80167f4:	f04f 33ff 	mov.w	r3, #4294967295
 80167f8:	e019      	b.n	801682e <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016800:	689b      	ldr	r3, [r3, #8]
 8016802:	7afa      	ldrb	r2, [r7, #11]
 8016804:	4610      	mov	r0, r2
 8016806:	4798      	blx	r3
 8016808:	4603      	mov	r3, r0
 801680a:	2b00      	cmp	r3, #0
 801680c:	d00b      	beq.n	8016826 <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801680e:	7af9      	ldrb	r1, [r7, #11]
 8016810:	233a      	movs	r3, #58	; 0x3a
 8016812:	2202      	movs	r2, #2
 8016814:	68f8      	ldr	r0, [r7, #12]
 8016816:	f000 f9f6 	bl	8016c06 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801681a:	697b      	ldr	r3, [r7, #20]
 801681c:	2205      	movs	r2, #5
 801681e:	721a      	strb	r2, [r3, #8]

    return -1;
 8016820:	f04f 33ff 	mov.w	r3, #4294967295
 8016824:	e003      	b.n	801682e <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 8016826:	697b      	ldr	r3, [r7, #20]
 8016828:	2200      	movs	r2, #0
 801682a:	815a      	strh	r2, [r3, #10]

  return 0;
 801682c:	2300      	movs	r3, #0
}
 801682e:	4618      	mov	r0, r3
 8016830:	3718      	adds	r7, #24
 8016832:	46bd      	mov	sp, r7
 8016834:	bd80      	pop	{r7, pc}
	...

08016838 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8016838:	b480      	push	{r7}
 801683a:	b089      	sub	sp, #36	; 0x24
 801683c:	af00      	add	r7, sp, #0
 801683e:	60f8      	str	r0, [r7, #12]
 8016840:	460b      	mov	r3, r1
 8016842:	607a      	str	r2, [r7, #4]
 8016844:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801684c:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	3301      	adds	r3, #1
 8016852:	781b      	ldrb	r3, [r3, #0]
 8016854:	f003 0301 	and.w	r3, r3, #1
 8016858:	2b00      	cmp	r3, #0
 801685a:	d014      	beq.n	8016886 <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 801685c:	2307      	movs	r3, #7
 801685e:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 8016860:	69bb      	ldr	r3, [r7, #24]
 8016862:	8bfa      	ldrh	r2, [r7, #30]
 8016864:	815a      	strh	r2, [r3, #10]

    while (len)
 8016866:	e00a      	b.n	801687e <SCSI_Inquiry+0x46>
    {
      len--;
 8016868:	8bfb      	ldrh	r3, [r7, #30]
 801686a:	3b01      	subs	r3, #1
 801686c:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 801686e:	8bfa      	ldrh	r2, [r7, #30]
 8016870:	8bfb      	ldrh	r3, [r7, #30]
 8016872:	4920      	ldr	r1, [pc, #128]	; (80168f4 <SCSI_Inquiry+0xbc>)
 8016874:	5c89      	ldrb	r1, [r1, r2]
 8016876:	69ba      	ldr	r2, [r7, #24]
 8016878:	4413      	add	r3, r2
 801687a:	460a      	mov	r2, r1
 801687c:	731a      	strb	r2, [r3, #12]
    while (len)
 801687e:	8bfb      	ldrh	r3, [r7, #30]
 8016880:	2b00      	cmp	r3, #0
 8016882:	d1f1      	bne.n	8016868 <SCSI_Inquiry+0x30>
 8016884:	e02e      	b.n	80168e4 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801688c:	69d9      	ldr	r1, [r3, #28]
 801688e:	7afa      	ldrb	r2, [r7, #11]
 8016890:	4613      	mov	r3, r2
 8016892:	00db      	lsls	r3, r3, #3
 8016894:	4413      	add	r3, r2
 8016896:	009b      	lsls	r3, r3, #2
 8016898:	440b      	add	r3, r1
 801689a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801689c:	697b      	ldr	r3, [r7, #20]
 801689e:	3304      	adds	r3, #4
 80168a0:	781b      	ldrb	r3, [r3, #0]
 80168a2:	b29b      	uxth	r3, r3
 80168a4:	3305      	adds	r3, #5
 80168a6:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	3304      	adds	r3, #4
 80168ac:	781b      	ldrb	r3, [r3, #0]
 80168ae:	b29b      	uxth	r3, r3
 80168b0:	8bfa      	ldrh	r2, [r7, #30]
 80168b2:	429a      	cmp	r2, r3
 80168b4:	d303      	bcc.n	80168be <SCSI_Inquiry+0x86>
    {
      len = params[4];
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	3304      	adds	r3, #4
 80168ba:	781b      	ldrb	r3, [r3, #0]
 80168bc:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 80168be:	69bb      	ldr	r3, [r7, #24]
 80168c0:	8bfa      	ldrh	r2, [r7, #30]
 80168c2:	815a      	strh	r2, [r3, #10]

    while (len)
 80168c4:	e00b      	b.n	80168de <SCSI_Inquiry+0xa6>
    {
      len--;
 80168c6:	8bfb      	ldrh	r3, [r7, #30]
 80168c8:	3b01      	subs	r3, #1
 80168ca:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 80168cc:	8bfb      	ldrh	r3, [r7, #30]
 80168ce:	697a      	ldr	r2, [r7, #20]
 80168d0:	441a      	add	r2, r3
 80168d2:	8bfb      	ldrh	r3, [r7, #30]
 80168d4:	7811      	ldrb	r1, [r2, #0]
 80168d6:	69ba      	ldr	r2, [r7, #24]
 80168d8:	4413      	add	r3, r2
 80168da:	460a      	mov	r2, r1
 80168dc:	731a      	strb	r2, [r3, #12]
    while (len)
 80168de:	8bfb      	ldrh	r3, [r7, #30]
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d1f0      	bne.n	80168c6 <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 80168e4:	2300      	movs	r3, #0
}
 80168e6:	4618      	mov	r0, r3
 80168e8:	3724      	adds	r7, #36	; 0x24
 80168ea:	46bd      	mov	sp, r7
 80168ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f0:	4770      	bx	lr
 80168f2:	bf00      	nop
 80168f4:	08028ca4 	.word	0x08028ca4

080168f8 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b086      	sub	sp, #24
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	60f8      	str	r0, [r7, #12]
 8016900:	460b      	mov	r3, r1
 8016902:	607a      	str	r2, [r7, #4]
 8016904:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801690c:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016914:	685b      	ldr	r3, [r3, #4]
 8016916:	697a      	ldr	r2, [r7, #20]
 8016918:	f502 7118 	add.w	r1, r2, #608	; 0x260
 801691c:	697a      	ldr	r2, [r7, #20]
 801691e:	f202 225e 	addw	r2, r2, #606	; 0x25e
 8016922:	7af8      	ldrb	r0, [r7, #11]
 8016924:	4798      	blx	r3
 8016926:	4603      	mov	r3, r0
 8016928:	2b00      	cmp	r3, #0
 801692a:	d008      	beq.n	801693e <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801692c:	7af9      	ldrb	r1, [r7, #11]
 801692e:	233a      	movs	r3, #58	; 0x3a
 8016930:	2202      	movs	r2, #2
 8016932:	68f8      	ldr	r0, [r7, #12]
 8016934:	f000 f967 	bl	8016c06 <SCSI_SenseCode>
    return -1;
 8016938:	f04f 33ff 	mov.w	r3, #4294967295
 801693c:	e03f      	b.n	80169be <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801693e:	697b      	ldr	r3, [r7, #20]
 8016940:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8016944:	3b01      	subs	r3, #1
 8016946:	0e1b      	lsrs	r3, r3, #24
 8016948:	b2da      	uxtb	r2, r3
 801694a:	697b      	ldr	r3, [r7, #20]
 801694c:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801694e:	697b      	ldr	r3, [r7, #20]
 8016950:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8016954:	3b01      	subs	r3, #1
 8016956:	0c1b      	lsrs	r3, r3, #16
 8016958:	b2da      	uxtb	r2, r3
 801695a:	697b      	ldr	r3, [r7, #20]
 801695c:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801695e:	697b      	ldr	r3, [r7, #20]
 8016960:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8016964:	3b01      	subs	r3, #1
 8016966:	0a1b      	lsrs	r3, r3, #8
 8016968:	b2da      	uxtb	r2, r3
 801696a:	697b      	ldr	r3, [r7, #20]
 801696c:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801696e:	697b      	ldr	r3, [r7, #20]
 8016970:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8016974:	b2db      	uxtb	r3, r3
 8016976:	3b01      	subs	r3, #1
 8016978:	b2da      	uxtb	r2, r3
 801697a:	697b      	ldr	r3, [r7, #20]
 801697c:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801697e:	697b      	ldr	r3, [r7, #20]
 8016980:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8016984:	161b      	asrs	r3, r3, #24
 8016986:	b2da      	uxtb	r2, r3
 8016988:	697b      	ldr	r3, [r7, #20]
 801698a:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801698c:	697b      	ldr	r3, [r7, #20]
 801698e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8016992:	141b      	asrs	r3, r3, #16
 8016994:	b2da      	uxtb	r2, r3
 8016996:	697b      	ldr	r3, [r7, #20]
 8016998:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801699a:	697b      	ldr	r3, [r7, #20]
 801699c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80169a0:	0a1b      	lsrs	r3, r3, #8
 80169a2:	b29b      	uxth	r3, r3
 80169a4:	b2da      	uxtb	r2, r3
 80169a6:	697b      	ldr	r3, [r7, #20]
 80169a8:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80169aa:	697b      	ldr	r3, [r7, #20]
 80169ac:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80169b0:	b2da      	uxtb	r2, r3
 80169b2:	697b      	ldr	r3, [r7, #20]
 80169b4:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 80169b6:	697b      	ldr	r3, [r7, #20]
 80169b8:	2208      	movs	r2, #8
 80169ba:	815a      	strh	r2, [r3, #10]
    return 0;
 80169bc:	2300      	movs	r3, #0
  }
}
 80169be:	4618      	mov	r0, r3
 80169c0:	3718      	adds	r7, #24
 80169c2:	46bd      	mov	sp, r7
 80169c4:	bd80      	pop	{r7, pc}

080169c6 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80169c6:	b580      	push	{r7, lr}
 80169c8:	b088      	sub	sp, #32
 80169ca:	af00      	add	r7, sp, #0
 80169cc:	60f8      	str	r0, [r7, #12]
 80169ce:	460b      	mov	r3, r1
 80169d0:	607a      	str	r2, [r7, #4]
 80169d2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80169da:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 80169dc:	2300      	movs	r3, #0
 80169de:	83fb      	strh	r3, [r7, #30]
 80169e0:	e007      	b.n	80169f2 <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 80169e2:	8bfb      	ldrh	r3, [r7, #30]
 80169e4:	69ba      	ldr	r2, [r7, #24]
 80169e6:	4413      	add	r3, r2
 80169e8:	2200      	movs	r2, #0
 80169ea:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 80169ec:	8bfb      	ldrh	r3, [r7, #30]
 80169ee:	3301      	adds	r3, #1
 80169f0:	83fb      	strh	r3, [r7, #30]
 80169f2:	8bfb      	ldrh	r3, [r7, #30]
 80169f4:	2b0b      	cmp	r3, #11
 80169f6:	d9f4      	bls.n	80169e2 <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80169fe:	685b      	ldr	r3, [r3, #4]
 8016a00:	f107 0216 	add.w	r2, r7, #22
 8016a04:	f107 0110 	add.w	r1, r7, #16
 8016a08:	7af8      	ldrb	r0, [r7, #11]
 8016a0a:	4798      	blx	r3
 8016a0c:	4603      	mov	r3, r0
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d008      	beq.n	8016a24 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016a12:	7af9      	ldrb	r1, [r7, #11]
 8016a14:	233a      	movs	r3, #58	; 0x3a
 8016a16:	2202      	movs	r2, #2
 8016a18:	68f8      	ldr	r0, [r7, #12]
 8016a1a:	f000 f8f4 	bl	8016c06 <SCSI_SenseCode>
    return -1;
 8016a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8016a22:	e030      	b.n	8016a86 <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 8016a24:	69bb      	ldr	r3, [r7, #24]
 8016a26:	2208      	movs	r2, #8
 8016a28:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8016a2a:	693b      	ldr	r3, [r7, #16]
 8016a2c:	3b01      	subs	r3, #1
 8016a2e:	0e1b      	lsrs	r3, r3, #24
 8016a30:	b2da      	uxtb	r2, r3
 8016a32:	69bb      	ldr	r3, [r7, #24]
 8016a34:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8016a36:	693b      	ldr	r3, [r7, #16]
 8016a38:	3b01      	subs	r3, #1
 8016a3a:	0c1b      	lsrs	r3, r3, #16
 8016a3c:	b2da      	uxtb	r2, r3
 8016a3e:	69bb      	ldr	r3, [r7, #24]
 8016a40:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8016a42:	693b      	ldr	r3, [r7, #16]
 8016a44:	3b01      	subs	r3, #1
 8016a46:	0a1b      	lsrs	r3, r3, #8
 8016a48:	b2da      	uxtb	r2, r3
 8016a4a:	69bb      	ldr	r3, [r7, #24]
 8016a4c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8016a4e:	693b      	ldr	r3, [r7, #16]
 8016a50:	b2db      	uxtb	r3, r3
 8016a52:	3b01      	subs	r3, #1
 8016a54:	b2da      	uxtb	r2, r3
 8016a56:	69bb      	ldr	r3, [r7, #24]
 8016a58:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 8016a5a:	69bb      	ldr	r3, [r7, #24]
 8016a5c:	2202      	movs	r2, #2
 8016a5e:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8016a60:	8afb      	ldrh	r3, [r7, #22]
 8016a62:	141b      	asrs	r3, r3, #16
 8016a64:	b2da      	uxtb	r2, r3
 8016a66:	69bb      	ldr	r3, [r7, #24]
 8016a68:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8016a6a:	8afb      	ldrh	r3, [r7, #22]
 8016a6c:	0a1b      	lsrs	r3, r3, #8
 8016a6e:	b29b      	uxth	r3, r3
 8016a70:	b2da      	uxtb	r2, r3
 8016a72:	69bb      	ldr	r3, [r7, #24]
 8016a74:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8016a76:	8afb      	ldrh	r3, [r7, #22]
 8016a78:	b2da      	uxtb	r2, r3
 8016a7a:	69bb      	ldr	r3, [r7, #24]
 8016a7c:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 8016a7e:	69bb      	ldr	r3, [r7, #24]
 8016a80:	220c      	movs	r2, #12
 8016a82:	815a      	strh	r2, [r3, #10]
    return 0;
 8016a84:	2300      	movs	r3, #0
  }
}
 8016a86:	4618      	mov	r0, r3
 8016a88:	3720      	adds	r7, #32
 8016a8a:	46bd      	mov	sp, r7
 8016a8c:	bd80      	pop	{r7, pc}
	...

08016a90 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8016a90:	b480      	push	{r7}
 8016a92:	b087      	sub	sp, #28
 8016a94:	af00      	add	r7, sp, #0
 8016a96:	60f8      	str	r0, [r7, #12]
 8016a98:	460b      	mov	r3, r1
 8016a9a:	607a      	str	r2, [r7, #4]
 8016a9c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016aa4:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 8016aa6:	2308      	movs	r3, #8
 8016aa8:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 8016aaa:	693b      	ldr	r3, [r7, #16]
 8016aac:	8afa      	ldrh	r2, [r7, #22]
 8016aae:	815a      	strh	r2, [r3, #10]

  while (len)
 8016ab0:	e00a      	b.n	8016ac8 <SCSI_ModeSense6+0x38>
  {
    len--;
 8016ab2:	8afb      	ldrh	r3, [r7, #22]
 8016ab4:	3b01      	subs	r3, #1
 8016ab6:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8016ab8:	8afa      	ldrh	r2, [r7, #22]
 8016aba:	8afb      	ldrh	r3, [r7, #22]
 8016abc:	4907      	ldr	r1, [pc, #28]	; (8016adc <SCSI_ModeSense6+0x4c>)
 8016abe:	5c89      	ldrb	r1, [r1, r2]
 8016ac0:	693a      	ldr	r2, [r7, #16]
 8016ac2:	4413      	add	r3, r2
 8016ac4:	460a      	mov	r2, r1
 8016ac6:	731a      	strb	r2, [r3, #12]
  while (len)
 8016ac8:	8afb      	ldrh	r3, [r7, #22]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d1f1      	bne.n	8016ab2 <SCSI_ModeSense6+0x22>
  }
  return 0;
 8016ace:	2300      	movs	r3, #0
}
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	371c      	adds	r7, #28
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ada:	4770      	bx	lr
 8016adc:	08028cac 	.word	0x08028cac

08016ae0 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8016ae0:	b480      	push	{r7}
 8016ae2:	b087      	sub	sp, #28
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	60f8      	str	r0, [r7, #12]
 8016ae8:	460b      	mov	r3, r1
 8016aea:	607a      	str	r2, [r7, #4]
 8016aec:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 8016aee:	2308      	movs	r3, #8
 8016af0:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016af8:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 8016afa:	693b      	ldr	r3, [r7, #16]
 8016afc:	8afa      	ldrh	r2, [r7, #22]
 8016afe:	815a      	strh	r2, [r3, #10]

  while (len)
 8016b00:	e00a      	b.n	8016b18 <SCSI_ModeSense10+0x38>
  {
    len--;
 8016b02:	8afb      	ldrh	r3, [r7, #22]
 8016b04:	3b01      	subs	r3, #1
 8016b06:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8016b08:	8afa      	ldrh	r2, [r7, #22]
 8016b0a:	8afb      	ldrh	r3, [r7, #22]
 8016b0c:	4907      	ldr	r1, [pc, #28]	; (8016b2c <SCSI_ModeSense10+0x4c>)
 8016b0e:	5c89      	ldrb	r1, [r1, r2]
 8016b10:	693a      	ldr	r2, [r7, #16]
 8016b12:	4413      	add	r3, r2
 8016b14:	460a      	mov	r2, r1
 8016b16:	731a      	strb	r2, [r3, #12]
  while (len)
 8016b18:	8afb      	ldrh	r3, [r7, #22]
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d1f1      	bne.n	8016b02 <SCSI_ModeSense10+0x22>
  }

  return 0;
 8016b1e:	2300      	movs	r3, #0
}
 8016b20:	4618      	mov	r0, r3
 8016b22:	371c      	adds	r7, #28
 8016b24:	46bd      	mov	sp, r7
 8016b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b2a:	4770      	bx	lr
 8016b2c:	08028cb4 	.word	0x08028cb4

08016b30 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8016b30:	b480      	push	{r7}
 8016b32:	b087      	sub	sp, #28
 8016b34:	af00      	add	r7, sp, #0
 8016b36:	60f8      	str	r0, [r7, #12]
 8016b38:	460b      	mov	r3, r1
 8016b3a:	607a      	str	r2, [r7, #4]
 8016b3c:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b44:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8016b46:	2300      	movs	r3, #0
 8016b48:	75fb      	strb	r3, [r7, #23]
 8016b4a:	e007      	b.n	8016b5c <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8016b4c:	7dfb      	ldrb	r3, [r7, #23]
 8016b4e:	693a      	ldr	r2, [r7, #16]
 8016b50:	4413      	add	r3, r2
 8016b52:	2200      	movs	r2, #0
 8016b54:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8016b56:	7dfb      	ldrb	r3, [r7, #23]
 8016b58:	3301      	adds	r3, #1
 8016b5a:	75fb      	strb	r3, [r7, #23]
 8016b5c:	7dfb      	ldrb	r3, [r7, #23]
 8016b5e:	2b11      	cmp	r3, #17
 8016b60:	d9f4      	bls.n	8016b4c <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 8016b62:	693b      	ldr	r3, [r7, #16]
 8016b64:	2270      	movs	r2, #112	; 0x70
 8016b66:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8016b68:	693b      	ldr	r3, [r7, #16]
 8016b6a:	220c      	movs	r2, #12
 8016b6c:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8016b6e:	693b      	ldr	r3, [r7, #16]
 8016b70:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8016b74:	693b      	ldr	r3, [r7, #16]
 8016b76:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8016b7a:	429a      	cmp	r2, r3
 8016b7c:	d02e      	beq.n	8016bdc <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8016b7e:	693b      	ldr	r3, [r7, #16]
 8016b80:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8016b84:	693a      	ldr	r2, [r7, #16]
 8016b86:	3347      	adds	r3, #71	; 0x47
 8016b88:	00db      	lsls	r3, r3, #3
 8016b8a:	4413      	add	r3, r2
 8016b8c:	791a      	ldrb	r2, [r3, #4]
 8016b8e:	693b      	ldr	r3, [r7, #16]
 8016b90:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8016b92:	693b      	ldr	r3, [r7, #16]
 8016b94:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8016b98:	693a      	ldr	r2, [r7, #16]
 8016b9a:	3347      	adds	r3, #71	; 0x47
 8016b9c:	00db      	lsls	r3, r3, #3
 8016b9e:	4413      	add	r3, r2
 8016ba0:	7a5a      	ldrb	r2, [r3, #9]
 8016ba2:	693b      	ldr	r3, [r7, #16]
 8016ba4:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8016ba6:	693b      	ldr	r3, [r7, #16]
 8016ba8:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8016bac:	693a      	ldr	r2, [r7, #16]
 8016bae:	3347      	adds	r3, #71	; 0x47
 8016bb0:	00db      	lsls	r3, r3, #3
 8016bb2:	4413      	add	r3, r2
 8016bb4:	7a1a      	ldrb	r2, [r3, #8]
 8016bb6:	693b      	ldr	r3, [r7, #16]
 8016bb8:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 8016bba:	693b      	ldr	r3, [r7, #16]
 8016bbc:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8016bc0:	3301      	adds	r3, #1
 8016bc2:	b2da      	uxtb	r2, r3
 8016bc4:	693b      	ldr	r3, [r7, #16]
 8016bc6:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8016bca:	693b      	ldr	r3, [r7, #16]
 8016bcc:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8016bd0:	2b04      	cmp	r3, #4
 8016bd2:	d103      	bne.n	8016bdc <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 8016bd4:	693b      	ldr	r3, [r7, #16]
 8016bd6:	2200      	movs	r2, #0
 8016bd8:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8016bdc:	693b      	ldr	r3, [r7, #16]
 8016bde:	2212      	movs	r2, #18
 8016be0:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	3304      	adds	r3, #4
 8016be6:	781b      	ldrb	r3, [r3, #0]
 8016be8:	2b12      	cmp	r3, #18
 8016bea:	d805      	bhi.n	8016bf8 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	3304      	adds	r3, #4
 8016bf0:	781b      	ldrb	r3, [r3, #0]
 8016bf2:	b29a      	uxth	r2, r3
 8016bf4:	693b      	ldr	r3, [r7, #16]
 8016bf6:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8016bf8:	2300      	movs	r3, #0
}
 8016bfa:	4618      	mov	r0, r3
 8016bfc:	371c      	adds	r7, #28
 8016bfe:	46bd      	mov	sp, r7
 8016c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c04:	4770      	bx	lr

08016c06 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8016c06:	b480      	push	{r7}
 8016c08:	b085      	sub	sp, #20
 8016c0a:	af00      	add	r7, sp, #0
 8016c0c:	6078      	str	r0, [r7, #4]
 8016c0e:	4608      	mov	r0, r1
 8016c10:	4611      	mov	r1, r2
 8016c12:	461a      	mov	r2, r3
 8016c14:	4603      	mov	r3, r0
 8016c16:	70fb      	strb	r3, [r7, #3]
 8016c18:	460b      	mov	r3, r1
 8016c1a:	70bb      	strb	r3, [r7, #2]
 8016c1c:	4613      	mov	r3, r2
 8016c1e:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016c26:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8016c2e:	68fa      	ldr	r2, [r7, #12]
 8016c30:	3347      	adds	r3, #71	; 0x47
 8016c32:	00db      	lsls	r3, r3, #3
 8016c34:	4413      	add	r3, r2
 8016c36:	78ba      	ldrb	r2, [r7, #2]
 8016c38:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8016c40:	68fa      	ldr	r2, [r7, #12]
 8016c42:	3347      	adds	r3, #71	; 0x47
 8016c44:	00db      	lsls	r3, r3, #3
 8016c46:	4413      	add	r3, r2
 8016c48:	2200      	movs	r2, #0
 8016c4a:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8016c52:	3301      	adds	r3, #1
 8016c54:	b2da      	uxtb	r2, r3
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8016c62:	2b04      	cmp	r3, #4
 8016c64:	d103      	bne.n	8016c6e <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	2200      	movs	r2, #0
 8016c6a:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 8016c6e:	bf00      	nop
 8016c70:	3714      	adds	r7, #20
 8016c72:	46bd      	mov	sp, r7
 8016c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c78:	4770      	bx	lr

08016c7a <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8016c7a:	b480      	push	{r7}
 8016c7c:	b087      	sub	sp, #28
 8016c7e:	af00      	add	r7, sp, #0
 8016c80:	60f8      	str	r0, [r7, #12]
 8016c82:	460b      	mov	r3, r1
 8016c84:	607a      	str	r2, [r7, #4]
 8016c86:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016c8e:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 8016c90:	697b      	ldr	r3, [r7, #20]
 8016c92:	2200      	movs	r2, #0
 8016c94:	815a      	strh	r2, [r3, #10]
  return 0;
 8016c96:	2300      	movs	r3, #0
}
 8016c98:	4618      	mov	r0, r3
 8016c9a:	371c      	adds	r7, #28
 8016c9c:	46bd      	mov	sp, r7
 8016c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca2:	4770      	bx	lr

08016ca4 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016ca4:	b580      	push	{r7, lr}
 8016ca6:	b086      	sub	sp, #24
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	60f8      	str	r0, [r7, #12]
 8016cac:	460b      	mov	r3, r1
 8016cae:	607a      	str	r2, [r7, #4]
 8016cb0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016cb8:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8016cba:	697b      	ldr	r3, [r7, #20]
 8016cbc:	7a1b      	ldrb	r3, [r3, #8]
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d16e      	bne.n	8016da0 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8016cc2:	697b      	ldr	r3, [r7, #20]
 8016cc4:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8016cc8:	b25b      	sxtb	r3, r3
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	db0a      	blt.n	8016ce4 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016cce:	697b      	ldr	r3, [r7, #20]
 8016cd0:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8016cd4:	2320      	movs	r3, #32
 8016cd6:	2205      	movs	r2, #5
 8016cd8:	68f8      	ldr	r0, [r7, #12]
 8016cda:	f7ff ff94 	bl	8016c06 <SCSI_SenseCode>
      return -1;
 8016cde:	f04f 33ff 	mov.w	r3, #4294967295
 8016ce2:	e067      	b.n	8016db4 <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016cea:	689b      	ldr	r3, [r3, #8]
 8016cec:	7afa      	ldrb	r2, [r7, #11]
 8016cee:	4610      	mov	r0, r2
 8016cf0:	4798      	blx	r3
 8016cf2:	4603      	mov	r3, r0
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d008      	beq.n	8016d0a <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016cf8:	7af9      	ldrb	r1, [r7, #11]
 8016cfa:	233a      	movs	r3, #58	; 0x3a
 8016cfc:	2202      	movs	r2, #2
 8016cfe:	68f8      	ldr	r0, [r7, #12]
 8016d00:	f7ff ff81 	bl	8016c06 <SCSI_SenseCode>
      return -1;
 8016d04:	f04f 33ff 	mov.w	r3, #4294967295
 8016d08:	e054      	b.n	8016db4 <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	3302      	adds	r3, #2
 8016d0e:	781b      	ldrb	r3, [r3, #0]
 8016d10:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	3303      	adds	r3, #3
 8016d16:	781b      	ldrb	r3, [r3, #0]
 8016d18:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8016d1a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	3304      	adds	r3, #4
 8016d20:	781b      	ldrb	r3, [r3, #0]
 8016d22:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8016d24:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8016d26:	687a      	ldr	r2, [r7, #4]
 8016d28:	3205      	adds	r2, #5
 8016d2a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8016d2c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8016d2e:	697b      	ldr	r3, [r7, #20]
 8016d30:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	3307      	adds	r3, #7
 8016d38:	781b      	ldrb	r3, [r3, #0]
 8016d3a:	021b      	lsls	r3, r3, #8
 8016d3c:	687a      	ldr	r2, [r7, #4]
 8016d3e:	3208      	adds	r2, #8
 8016d40:	7812      	ldrb	r2, [r2, #0]
 8016d42:	431a      	orrs	r2, r3
 8016d44:	697b      	ldr	r3, [r7, #20]
 8016d46:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8016d4a:	697b      	ldr	r3, [r7, #20]
 8016d4c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8016d50:	697b      	ldr	r3, [r7, #20]
 8016d52:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8016d56:	7af9      	ldrb	r1, [r7, #11]
 8016d58:	68f8      	ldr	r0, [r7, #12]
 8016d5a:	f000 f912 	bl	8016f82 <SCSI_CheckAddressRange>
 8016d5e:	4603      	mov	r3, r0
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	da02      	bge.n	8016d6a <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8016d64:	f04f 33ff 	mov.w	r3, #4294967295
 8016d68:	e024      	b.n	8016db4 <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8016d6a:	697b      	ldr	r3, [r7, #20]
 8016d6c:	2202      	movs	r2, #2
 8016d6e:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8016d70:	697b      	ldr	r3, [r7, #20]
 8016d72:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8016d76:	697b      	ldr	r3, [r7, #20]
 8016d78:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8016d7c:	6979      	ldr	r1, [r7, #20]
 8016d7e:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 8016d82:	fb01 f303 	mul.w	r3, r1, r3
 8016d86:	429a      	cmp	r2, r3
 8016d88:	d00a      	beq.n	8016da0 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016d8a:	697b      	ldr	r3, [r7, #20]
 8016d8c:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8016d90:	2320      	movs	r3, #32
 8016d92:	2205      	movs	r2, #5
 8016d94:	68f8      	ldr	r0, [r7, #12]
 8016d96:	f7ff ff36 	bl	8016c06 <SCSI_SenseCode>
      return -1;
 8016d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8016d9e:	e009      	b.n	8016db4 <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8016da0:	697b      	ldr	r3, [r7, #20]
 8016da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016da6:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 8016da8:	7afb      	ldrb	r3, [r7, #11]
 8016daa:	4619      	mov	r1, r3
 8016dac:	68f8      	ldr	r0, [r7, #12]
 8016dae:	f000 f90a 	bl	8016fc6 <SCSI_ProcessRead>
 8016db2:	4603      	mov	r3, r0
}
 8016db4:	4618      	mov	r0, r3
 8016db6:	3718      	adds	r7, #24
 8016db8:	46bd      	mov	sp, r7
 8016dba:	bd80      	pop	{r7, pc}

08016dbc <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8016dbc:	b580      	push	{r7, lr}
 8016dbe:	b086      	sub	sp, #24
 8016dc0:	af00      	add	r7, sp, #0
 8016dc2:	60f8      	str	r0, [r7, #12]
 8016dc4:	460b      	mov	r3, r1
 8016dc6:	607a      	str	r2, [r7, #4]
 8016dc8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016dd0:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8016dd2:	697b      	ldr	r3, [r7, #20]
 8016dd4:	7a1b      	ldrb	r3, [r3, #8]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	f040 8096 	bne.w	8016f08 <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8016ddc:	697b      	ldr	r3, [r7, #20]
 8016dde:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8016de2:	b25b      	sxtb	r3, r3
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	da0a      	bge.n	8016dfe <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016de8:	697b      	ldr	r3, [r7, #20]
 8016dea:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8016dee:	2320      	movs	r3, #32
 8016df0:	2205      	movs	r2, #5
 8016df2:	68f8      	ldr	r0, [r7, #12]
 8016df4:	f7ff ff07 	bl	8016c06 <SCSI_SenseCode>
      return -1;
 8016df8:	f04f 33ff 	mov.w	r3, #4294967295
 8016dfc:	e08a      	b.n	8016f14 <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016e04:	689b      	ldr	r3, [r3, #8]
 8016e06:	7afa      	ldrb	r2, [r7, #11]
 8016e08:	4610      	mov	r0, r2
 8016e0a:	4798      	blx	r3
 8016e0c:	4603      	mov	r3, r0
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d008      	beq.n	8016e24 <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016e12:	7af9      	ldrb	r1, [r7, #11]
 8016e14:	233a      	movs	r3, #58	; 0x3a
 8016e16:	2202      	movs	r2, #2
 8016e18:	68f8      	ldr	r0, [r7, #12]
 8016e1a:	f7ff fef4 	bl	8016c06 <SCSI_SenseCode>
      return -1;
 8016e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8016e22:	e077      	b.n	8016f14 <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016e2a:	68db      	ldr	r3, [r3, #12]
 8016e2c:	7afa      	ldrb	r2, [r7, #11]
 8016e2e:	4610      	mov	r0, r2
 8016e30:	4798      	blx	r3
 8016e32:	4603      	mov	r3, r0
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d008      	beq.n	8016e4a <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8016e38:	7af9      	ldrb	r1, [r7, #11]
 8016e3a:	2327      	movs	r3, #39	; 0x27
 8016e3c:	2202      	movs	r2, #2
 8016e3e:	68f8      	ldr	r0, [r7, #12]
 8016e40:	f7ff fee1 	bl	8016c06 <SCSI_SenseCode>
      return -1;
 8016e44:	f04f 33ff 	mov.w	r3, #4294967295
 8016e48:	e064      	b.n	8016f14 <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	3302      	adds	r3, #2
 8016e4e:	781b      	ldrb	r3, [r3, #0]
 8016e50:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	3303      	adds	r3, #3
 8016e56:	781b      	ldrb	r3, [r3, #0]
 8016e58:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8016e5a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	3304      	adds	r3, #4
 8016e60:	781b      	ldrb	r3, [r3, #0]
 8016e62:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8016e64:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8016e66:	687a      	ldr	r2, [r7, #4]
 8016e68:	3205      	adds	r2, #5
 8016e6a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8016e6c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8016e6e:	697b      	ldr	r3, [r7, #20]
 8016e70:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	3307      	adds	r3, #7
 8016e78:	781b      	ldrb	r3, [r3, #0]
 8016e7a:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8016e7c:	687a      	ldr	r2, [r7, #4]
 8016e7e:	3208      	adds	r2, #8
 8016e80:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8016e82:	431a      	orrs	r2, r3
 8016e84:	697b      	ldr	r3, [r7, #20]
 8016e86:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8016e8a:	697b      	ldr	r3, [r7, #20]
 8016e8c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8016e90:	697b      	ldr	r3, [r7, #20]
 8016e92:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8016e96:	7af9      	ldrb	r1, [r7, #11]
 8016e98:	68f8      	ldr	r0, [r7, #12]
 8016e9a:	f000 f872 	bl	8016f82 <SCSI_CheckAddressRange>
 8016e9e:	4603      	mov	r3, r0
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	da02      	bge.n	8016eaa <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8016ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8016ea8:	e034      	b.n	8016f14 <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8016eaa:	697b      	ldr	r3, [r7, #20]
 8016eac:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8016eb0:	697a      	ldr	r2, [r7, #20]
 8016eb2:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8016eb6:	fb02 f303 	mul.w	r3, r2, r3
 8016eba:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8016ebc:	697b      	ldr	r3, [r7, #20]
 8016ebe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016ec2:	693a      	ldr	r2, [r7, #16]
 8016ec4:	429a      	cmp	r2, r3
 8016ec6:	d00a      	beq.n	8016ede <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016ec8:	697b      	ldr	r3, [r7, #20]
 8016eca:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8016ece:	2320      	movs	r3, #32
 8016ed0:	2205      	movs	r2, #5
 8016ed2:	68f8      	ldr	r0, [r7, #12]
 8016ed4:	f7ff fe97 	bl	8016c06 <SCSI_SenseCode>
      return -1;
 8016ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8016edc:	e01a      	b.n	8016f14 <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8016ede:	693b      	ldr	r3, [r7, #16]
 8016ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016ee4:	bf28      	it	cs
 8016ee6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8016eea:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8016eec:	697b      	ldr	r3, [r7, #20]
 8016eee:	2201      	movs	r2, #1
 8016ef0:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8016ef2:	697b      	ldr	r3, [r7, #20]
 8016ef4:	f103 020c 	add.w	r2, r3, #12
 8016ef8:	693b      	ldr	r3, [r7, #16]
 8016efa:	b29b      	uxth	r3, r3
 8016efc:	2101      	movs	r1, #1
 8016efe:	68f8      	ldr	r0, [r7, #12]
 8016f00:	f001 fdc9 	bl	8018a96 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 8016f04:	2300      	movs	r3, #0
 8016f06:	e005      	b.n	8016f14 <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 8016f08:	7afb      	ldrb	r3, [r7, #11]
 8016f0a:	4619      	mov	r1, r3
 8016f0c:	68f8      	ldr	r0, [r7, #12]
 8016f0e:	f000 f8ce 	bl	80170ae <SCSI_ProcessWrite>
 8016f12:	4603      	mov	r3, r0
}
 8016f14:	4618      	mov	r0, r3
 8016f16:	3718      	adds	r7, #24
 8016f18:	46bd      	mov	sp, r7
 8016f1a:	bd80      	pop	{r7, pc}

08016f1c <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8016f1c:	b580      	push	{r7, lr}
 8016f1e:	b086      	sub	sp, #24
 8016f20:	af00      	add	r7, sp, #0
 8016f22:	60f8      	str	r0, [r7, #12]
 8016f24:	460b      	mov	r3, r1
 8016f26:	607a      	str	r2, [r7, #4]
 8016f28:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f30:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	3301      	adds	r3, #1
 8016f36:	781b      	ldrb	r3, [r3, #0]
 8016f38:	f003 0302 	and.w	r3, r3, #2
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d008      	beq.n	8016f52 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8016f40:	7af9      	ldrb	r1, [r7, #11]
 8016f42:	2324      	movs	r3, #36	; 0x24
 8016f44:	2205      	movs	r2, #5
 8016f46:	68f8      	ldr	r0, [r7, #12]
 8016f48:	f7ff fe5d 	bl	8016c06 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8016f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8016f50:	e013      	b.n	8016f7a <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8016f52:	697b      	ldr	r3, [r7, #20]
 8016f54:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8016f58:	697b      	ldr	r3, [r7, #20]
 8016f5a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8016f5e:	7af9      	ldrb	r1, [r7, #11]
 8016f60:	68f8      	ldr	r0, [r7, #12]
 8016f62:	f000 f80e 	bl	8016f82 <SCSI_CheckAddressRange>
 8016f66:	4603      	mov	r3, r0
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	da02      	bge.n	8016f72 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 8016f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8016f70:	e003      	b.n	8016f7a <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 8016f72:	697b      	ldr	r3, [r7, #20]
 8016f74:	2200      	movs	r2, #0
 8016f76:	815a      	strh	r2, [r3, #10]
  return 0;
 8016f78:	2300      	movs	r3, #0
}
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	3718      	adds	r7, #24
 8016f7e:	46bd      	mov	sp, r7
 8016f80:	bd80      	pop	{r7, pc}

08016f82 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8016f82:	b580      	push	{r7, lr}
 8016f84:	b086      	sub	sp, #24
 8016f86:	af00      	add	r7, sp, #0
 8016f88:	60f8      	str	r0, [r7, #12]
 8016f8a:	607a      	str	r2, [r7, #4]
 8016f8c:	603b      	str	r3, [r7, #0]
 8016f8e:	460b      	mov	r3, r1
 8016f90:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f98:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8016f9a:	687a      	ldr	r2, [r7, #4]
 8016f9c:	683b      	ldr	r3, [r7, #0]
 8016f9e:	441a      	add	r2, r3
 8016fa0:	697b      	ldr	r3, [r7, #20]
 8016fa2:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8016fa6:	429a      	cmp	r2, r3
 8016fa8:	d908      	bls.n	8016fbc <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8016faa:	7af9      	ldrb	r1, [r7, #11]
 8016fac:	2321      	movs	r3, #33	; 0x21
 8016fae:	2205      	movs	r2, #5
 8016fb0:	68f8      	ldr	r0, [r7, #12]
 8016fb2:	f7ff fe28 	bl	8016c06 <SCSI_SenseCode>
    return -1;
 8016fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8016fba:	e000      	b.n	8016fbe <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 8016fbc:	2300      	movs	r3, #0
}
 8016fbe:	4618      	mov	r0, r3
 8016fc0:	3718      	adds	r7, #24
 8016fc2:	46bd      	mov	sp, r7
 8016fc4:	bd80      	pop	{r7, pc}

08016fc6 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8016fc6:	b590      	push	{r4, r7, lr}
 8016fc8:	b085      	sub	sp, #20
 8016fca:	af00      	add	r7, sp, #0
 8016fcc:	6078      	str	r0, [r7, #4]
 8016fce:	460b      	mov	r3, r1
 8016fd0:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016fd8:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8016fe0:	68fa      	ldr	r2, [r7, #12]
 8016fe2:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8016fe6:	fb02 f303 	mul.w	r3, r2, r3
 8016fea:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8016fec:	68bb      	ldr	r3, [r7, #8]
 8016fee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016ff2:	bf28      	it	cs
 8016ff4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8016ff8:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017000:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8017014:	4618      	mov	r0, r3
 8017016:	68bb      	ldr	r3, [r7, #8]
 8017018:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 801701c:	b29b      	uxth	r3, r3
 801701e:	78f8      	ldrb	r0, [r7, #3]
 8017020:	47a0      	blx	r4
 8017022:	4603      	mov	r3, r0
 8017024:	2b00      	cmp	r3, #0
 8017026:	da08      	bge.n	801703a <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8017028:	78f9      	ldrb	r1, [r7, #3]
 801702a:	2311      	movs	r3, #17
 801702c:	2204      	movs	r2, #4
 801702e:	6878      	ldr	r0, [r7, #4]
 8017030:	f7ff fde9 	bl	8016c06 <SCSI_SenseCode>
    return -1;
 8017034:	f04f 33ff 	mov.w	r3, #4294967295
 8017038:	e035      	b.n	80170a6 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	f103 020c 	add.w	r2, r3, #12
 8017040:	68bb      	ldr	r3, [r7, #8]
 8017042:	b29b      	uxth	r3, r3
 8017044:	2181      	movs	r1, #129	; 0x81
 8017046:	6878      	ldr	r0, [r7, #4]
 8017048:	f001 fd02 	bl	8018a50 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8017058:	4619      	mov	r1, r3
 801705a:	68bb      	ldr	r3, [r7, #8]
 801705c:	fbb3 f3f1 	udiv	r3, r3, r1
 8017060:	441a      	add	r2, r3
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8017074:	4619      	mov	r1, r3
 8017076:	68bb      	ldr	r3, [r7, #8]
 8017078:	fbb3 f3f1 	udiv	r3, r3, r1
 801707c:	1ad2      	subs	r2, r2, r3
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 801708a:	68bb      	ldr	r3, [r7, #8]
 801708c:	1ad2      	subs	r2, r2, r3
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801709a:	2b00      	cmp	r3, #0
 801709c:	d102      	bne.n	80170a4 <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	2203      	movs	r2, #3
 80170a2:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 80170a4:	2300      	movs	r3, #0
}
 80170a6:	4618      	mov	r0, r3
 80170a8:	3714      	adds	r7, #20
 80170aa:	46bd      	mov	sp, r7
 80170ac:	bd90      	pop	{r4, r7, pc}

080170ae <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 80170ae:	b590      	push	{r4, r7, lr}
 80170b0:	b085      	sub	sp, #20
 80170b2:	af00      	add	r7, sp, #0
 80170b4:	6078      	str	r0, [r7, #4]
 80170b6:	460b      	mov	r3, r1
 80170b8:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80170c0:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80170c2:	68fb      	ldr	r3, [r7, #12]
 80170c4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80170c8:	68fa      	ldr	r2, [r7, #12]
 80170ca:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 80170ce:	fb02 f303 	mul.w	r3, r2, r3
 80170d2:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80170d4:	68bb      	ldr	r3, [r7, #8]
 80170d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80170da:	bf28      	it	cs
 80170dc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80170e0:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80170e8:	695c      	ldr	r4, [r3, #20]
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	f103 010c 	add.w	r1, r3, #12
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80170fc:	4618      	mov	r0, r3
 80170fe:	68bb      	ldr	r3, [r7, #8]
 8017100:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8017104:	b29b      	uxth	r3, r3
 8017106:	78f8      	ldrb	r0, [r7, #3]
 8017108:	47a0      	blx	r4
 801710a:	4603      	mov	r3, r0
 801710c:	2b00      	cmp	r3, #0
 801710e:	da08      	bge.n	8017122 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8017110:	78f9      	ldrb	r1, [r7, #3]
 8017112:	2303      	movs	r3, #3
 8017114:	2204      	movs	r2, #4
 8017116:	6878      	ldr	r0, [r7, #4]
 8017118:	f7ff fd75 	bl	8016c06 <SCSI_SenseCode>

    return -1;
 801711c:	f04f 33ff 	mov.w	r3, #4294967295
 8017120:	e045      	b.n	80171ae <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 801712e:	4619      	mov	r1, r3
 8017130:	68bb      	ldr	r3, [r7, #8]
 8017132:	fbb3 f3f1 	udiv	r3, r3, r1
 8017136:	441a      	add	r2, r3
 8017138:	68fb      	ldr	r3, [r7, #12]
 801713a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8017144:	68fb      	ldr	r3, [r7, #12]
 8017146:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 801714a:	4619      	mov	r1, r3
 801714c:	68bb      	ldr	r3, [r7, #8]
 801714e:	fbb3 f3f1 	udiv	r3, r3, r1
 8017152:	1ad2      	subs	r2, r2, r3
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8017160:	68bb      	ldr	r3, [r7, #8]
 8017162:	1ad2      	subs	r2, r2, r3
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8017170:	2b00      	cmp	r3, #0
 8017172:	d104      	bne.n	801717e <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8017174:	2100      	movs	r1, #0
 8017176:	6878      	ldr	r0, [r7, #4]
 8017178:	f7ff f97a 	bl	8016470 <MSC_BOT_SendCSW>
 801717c:	e016      	b.n	80171ac <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 801717e:	68fb      	ldr	r3, [r7, #12]
 8017180:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8017184:	68fa      	ldr	r2, [r7, #12]
 8017186:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 801718a:	fb02 f303 	mul.w	r3, r2, r3
 801718e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017192:	bf28      	it	cs
 8017194:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8017198:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	f103 020c 	add.w	r2, r3, #12
 80171a0:	68bb      	ldr	r3, [r7, #8]
 80171a2:	b29b      	uxth	r3, r3
 80171a4:	2101      	movs	r1, #1
 80171a6:	6878      	ldr	r0, [r7, #4]
 80171a8:	f001 fc75 	bl	8018a96 <USBD_LL_PrepareReceive>
  }

  return 0;
 80171ac:	2300      	movs	r3, #0
}
 80171ae:	4618      	mov	r0, r3
 80171b0:	3714      	adds	r7, #20
 80171b2:	46bd      	mov	sp, r7
 80171b4:	bd90      	pop	{r4, r7, pc}

080171b6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80171b6:	b580      	push	{r7, lr}
 80171b8:	b084      	sub	sp, #16
 80171ba:	af00      	add	r7, sp, #0
 80171bc:	60f8      	str	r0, [r7, #12]
 80171be:	60b9      	str	r1, [r7, #8]
 80171c0:	4613      	mov	r3, r2
 80171c2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d101      	bne.n	80171ce <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80171ca:	2302      	movs	r3, #2
 80171cc:	e01a      	b.n	8017204 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d003      	beq.n	80171e0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	2200      	movs	r2, #0
 80171dc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80171e0:	68bb      	ldr	r3, [r7, #8]
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d003      	beq.n	80171ee <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	68ba      	ldr	r2, [r7, #8]
 80171ea:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	2201      	movs	r2, #1
 80171f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	79fa      	ldrb	r2, [r7, #7]
 80171fa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80171fc:	68f8      	ldr	r0, [r7, #12]
 80171fe:	f001 facd 	bl	801879c <USBD_LL_Init>

  return USBD_OK;
 8017202:	2300      	movs	r3, #0
}
 8017204:	4618      	mov	r0, r3
 8017206:	3710      	adds	r7, #16
 8017208:	46bd      	mov	sp, r7
 801720a:	bd80      	pop	{r7, pc}

0801720c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801720c:	b480      	push	{r7}
 801720e:	b085      	sub	sp, #20
 8017210:	af00      	add	r7, sp, #0
 8017212:	6078      	str	r0, [r7, #4]
 8017214:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8017216:	2300      	movs	r3, #0
 8017218:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 801721a:	683b      	ldr	r3, [r7, #0]
 801721c:	2b00      	cmp	r3, #0
 801721e:	d006      	beq.n	801722e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	683a      	ldr	r2, [r7, #0]
 8017224:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8017228:	2300      	movs	r3, #0
 801722a:	73fb      	strb	r3, [r7, #15]
 801722c:	e001      	b.n	8017232 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801722e:	2302      	movs	r3, #2
 8017230:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8017232:	7bfb      	ldrb	r3, [r7, #15]
}
 8017234:	4618      	mov	r0, r3
 8017236:	3714      	adds	r7, #20
 8017238:	46bd      	mov	sp, r7
 801723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801723e:	4770      	bx	lr

08017240 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8017240:	b580      	push	{r7, lr}
 8017242:	b082      	sub	sp, #8
 8017244:	af00      	add	r7, sp, #0
 8017246:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8017248:	6878      	ldr	r0, [r7, #4]
 801724a:	f001 faf9 	bl	8018840 <USBD_LL_Start>

  return USBD_OK;
 801724e:	2300      	movs	r3, #0
}
 8017250:	4618      	mov	r0, r3
 8017252:	3708      	adds	r7, #8
 8017254:	46bd      	mov	sp, r7
 8017256:	bd80      	pop	{r7, pc}

08017258 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8017258:	b480      	push	{r7}
 801725a:	b083      	sub	sp, #12
 801725c:	af00      	add	r7, sp, #0
 801725e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017260:	2300      	movs	r3, #0
}
 8017262:	4618      	mov	r0, r3
 8017264:	370c      	adds	r7, #12
 8017266:	46bd      	mov	sp, r7
 8017268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801726c:	4770      	bx	lr

0801726e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801726e:	b580      	push	{r7, lr}
 8017270:	b084      	sub	sp, #16
 8017272:	af00      	add	r7, sp, #0
 8017274:	6078      	str	r0, [r7, #4]
 8017276:	460b      	mov	r3, r1
 8017278:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801727a:	2302      	movs	r3, #2
 801727c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017284:	2b00      	cmp	r3, #0
 8017286:	d00c      	beq.n	80172a2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	78fa      	ldrb	r2, [r7, #3]
 8017292:	4611      	mov	r1, r2
 8017294:	6878      	ldr	r0, [r7, #4]
 8017296:	4798      	blx	r3
 8017298:	4603      	mov	r3, r0
 801729a:	2b00      	cmp	r3, #0
 801729c:	d101      	bne.n	80172a2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 801729e:	2300      	movs	r3, #0
 80172a0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80172a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80172a4:	4618      	mov	r0, r3
 80172a6:	3710      	adds	r7, #16
 80172a8:	46bd      	mov	sp, r7
 80172aa:	bd80      	pop	{r7, pc}

080172ac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80172ac:	b580      	push	{r7, lr}
 80172ae:	b082      	sub	sp, #8
 80172b0:	af00      	add	r7, sp, #0
 80172b2:	6078      	str	r0, [r7, #4]
 80172b4:	460b      	mov	r3, r1
 80172b6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80172be:	685b      	ldr	r3, [r3, #4]
 80172c0:	78fa      	ldrb	r2, [r7, #3]
 80172c2:	4611      	mov	r1, r2
 80172c4:	6878      	ldr	r0, [r7, #4]
 80172c6:	4798      	blx	r3

  return USBD_OK;
 80172c8:	2300      	movs	r3, #0
}
 80172ca:	4618      	mov	r0, r3
 80172cc:	3708      	adds	r7, #8
 80172ce:	46bd      	mov	sp, r7
 80172d0:	bd80      	pop	{r7, pc}

080172d2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80172d2:	b580      	push	{r7, lr}
 80172d4:	b082      	sub	sp, #8
 80172d6:	af00      	add	r7, sp, #0
 80172d8:	6078      	str	r0, [r7, #4]
 80172da:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80172e2:	6839      	ldr	r1, [r7, #0]
 80172e4:	4618      	mov	r0, r3
 80172e6:	f000 feda 	bl	801809e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	2201      	movs	r2, #1
 80172ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80172f8:	461a      	mov	r2, r3
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8017306:	f003 031f 	and.w	r3, r3, #31
 801730a:	2b02      	cmp	r3, #2
 801730c:	d016      	beq.n	801733c <USBD_LL_SetupStage+0x6a>
 801730e:	2b02      	cmp	r3, #2
 8017310:	d81c      	bhi.n	801734c <USBD_LL_SetupStage+0x7a>
 8017312:	2b00      	cmp	r3, #0
 8017314:	d002      	beq.n	801731c <USBD_LL_SetupStage+0x4a>
 8017316:	2b01      	cmp	r3, #1
 8017318:	d008      	beq.n	801732c <USBD_LL_SetupStage+0x5a>
 801731a:	e017      	b.n	801734c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8017322:	4619      	mov	r1, r3
 8017324:	6878      	ldr	r0, [r7, #4]
 8017326:	f000 f9cd 	bl	80176c4 <USBD_StdDevReq>
      break;
 801732a:	e01a      	b.n	8017362 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8017332:	4619      	mov	r1, r3
 8017334:	6878      	ldr	r0, [r7, #4]
 8017336:	f000 fa2f 	bl	8017798 <USBD_StdItfReq>
      break;
 801733a:	e012      	b.n	8017362 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8017342:	4619      	mov	r1, r3
 8017344:	6878      	ldr	r0, [r7, #4]
 8017346:	f000 fa6f 	bl	8017828 <USBD_StdEPReq>
      break;
 801734a:	e00a      	b.n	8017362 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8017352:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8017356:	b2db      	uxtb	r3, r3
 8017358:	4619      	mov	r1, r3
 801735a:	6878      	ldr	r0, [r7, #4]
 801735c:	f001 faef 	bl	801893e <USBD_LL_StallEP>
      break;
 8017360:	bf00      	nop
  }

  return USBD_OK;
 8017362:	2300      	movs	r3, #0
}
 8017364:	4618      	mov	r0, r3
 8017366:	3708      	adds	r7, #8
 8017368:	46bd      	mov	sp, r7
 801736a:	bd80      	pop	{r7, pc}

0801736c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801736c:	b580      	push	{r7, lr}
 801736e:	b086      	sub	sp, #24
 8017370:	af00      	add	r7, sp, #0
 8017372:	60f8      	str	r0, [r7, #12]
 8017374:	460b      	mov	r3, r1
 8017376:	607a      	str	r2, [r7, #4]
 8017378:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801737a:	7afb      	ldrb	r3, [r7, #11]
 801737c:	2b00      	cmp	r3, #0
 801737e:	d14b      	bne.n	8017418 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8017386:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801738e:	2b03      	cmp	r3, #3
 8017390:	d134      	bne.n	80173fc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8017392:	697b      	ldr	r3, [r7, #20]
 8017394:	68da      	ldr	r2, [r3, #12]
 8017396:	697b      	ldr	r3, [r7, #20]
 8017398:	691b      	ldr	r3, [r3, #16]
 801739a:	429a      	cmp	r2, r3
 801739c:	d919      	bls.n	80173d2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801739e:	697b      	ldr	r3, [r7, #20]
 80173a0:	68da      	ldr	r2, [r3, #12]
 80173a2:	697b      	ldr	r3, [r7, #20]
 80173a4:	691b      	ldr	r3, [r3, #16]
 80173a6:	1ad2      	subs	r2, r2, r3
 80173a8:	697b      	ldr	r3, [r7, #20]
 80173aa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80173ac:	697b      	ldr	r3, [r7, #20]
 80173ae:	68da      	ldr	r2, [r3, #12]
 80173b0:	697b      	ldr	r3, [r7, #20]
 80173b2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80173b4:	429a      	cmp	r2, r3
 80173b6:	d203      	bcs.n	80173c0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80173b8:	697b      	ldr	r3, [r7, #20]
 80173ba:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80173bc:	b29b      	uxth	r3, r3
 80173be:	e002      	b.n	80173c6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80173c0:	697b      	ldr	r3, [r7, #20]
 80173c2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80173c4:	b29b      	uxth	r3, r3
 80173c6:	461a      	mov	r2, r3
 80173c8:	6879      	ldr	r1, [r7, #4]
 80173ca:	68f8      	ldr	r0, [r7, #12]
 80173cc:	f000 ff3d 	bl	801824a <USBD_CtlContinueRx>
 80173d0:	e038      	b.n	8017444 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80173d8:	691b      	ldr	r3, [r3, #16]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d00a      	beq.n	80173f4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80173e4:	2b03      	cmp	r3, #3
 80173e6:	d105      	bne.n	80173f4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80173ee:	691b      	ldr	r3, [r3, #16]
 80173f0:	68f8      	ldr	r0, [r7, #12]
 80173f2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80173f4:	68f8      	ldr	r0, [r7, #12]
 80173f6:	f000 ff3a 	bl	801826e <USBD_CtlSendStatus>
 80173fa:	e023      	b.n	8017444 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8017402:	2b05      	cmp	r3, #5
 8017404:	d11e      	bne.n	8017444 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	2200      	movs	r2, #0
 801740a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 801740e:	2100      	movs	r1, #0
 8017410:	68f8      	ldr	r0, [r7, #12]
 8017412:	f001 fa94 	bl	801893e <USBD_LL_StallEP>
 8017416:	e015      	b.n	8017444 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801741e:	699b      	ldr	r3, [r3, #24]
 8017420:	2b00      	cmp	r3, #0
 8017422:	d00d      	beq.n	8017440 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 801742a:	2b03      	cmp	r3, #3
 801742c:	d108      	bne.n	8017440 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017434:	699b      	ldr	r3, [r3, #24]
 8017436:	7afa      	ldrb	r2, [r7, #11]
 8017438:	4611      	mov	r1, r2
 801743a:	68f8      	ldr	r0, [r7, #12]
 801743c:	4798      	blx	r3
 801743e:	e001      	b.n	8017444 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8017440:	2302      	movs	r3, #2
 8017442:	e000      	b.n	8017446 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8017444:	2300      	movs	r3, #0
}
 8017446:	4618      	mov	r0, r3
 8017448:	3718      	adds	r7, #24
 801744a:	46bd      	mov	sp, r7
 801744c:	bd80      	pop	{r7, pc}

0801744e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801744e:	b580      	push	{r7, lr}
 8017450:	b086      	sub	sp, #24
 8017452:	af00      	add	r7, sp, #0
 8017454:	60f8      	str	r0, [r7, #12]
 8017456:	460b      	mov	r3, r1
 8017458:	607a      	str	r2, [r7, #4]
 801745a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801745c:	7afb      	ldrb	r3, [r7, #11]
 801745e:	2b00      	cmp	r3, #0
 8017460:	d17f      	bne.n	8017562 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	3314      	adds	r3, #20
 8017466:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801746e:	2b02      	cmp	r3, #2
 8017470:	d15c      	bne.n	801752c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8017472:	697b      	ldr	r3, [r7, #20]
 8017474:	68da      	ldr	r2, [r3, #12]
 8017476:	697b      	ldr	r3, [r7, #20]
 8017478:	691b      	ldr	r3, [r3, #16]
 801747a:	429a      	cmp	r2, r3
 801747c:	d915      	bls.n	80174aa <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 801747e:	697b      	ldr	r3, [r7, #20]
 8017480:	68da      	ldr	r2, [r3, #12]
 8017482:	697b      	ldr	r3, [r7, #20]
 8017484:	691b      	ldr	r3, [r3, #16]
 8017486:	1ad2      	subs	r2, r2, r3
 8017488:	697b      	ldr	r3, [r7, #20]
 801748a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801748c:	697b      	ldr	r3, [r7, #20]
 801748e:	68db      	ldr	r3, [r3, #12]
 8017490:	b29b      	uxth	r3, r3
 8017492:	461a      	mov	r2, r3
 8017494:	6879      	ldr	r1, [r7, #4]
 8017496:	68f8      	ldr	r0, [r7, #12]
 8017498:	f000 fec5 	bl	8018226 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801749c:	2300      	movs	r3, #0
 801749e:	2200      	movs	r2, #0
 80174a0:	2100      	movs	r1, #0
 80174a2:	68f8      	ldr	r0, [r7, #12]
 80174a4:	f001 faf7 	bl	8018a96 <USBD_LL_PrepareReceive>
 80174a8:	e04e      	b.n	8017548 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80174aa:	697b      	ldr	r3, [r7, #20]
 80174ac:	689b      	ldr	r3, [r3, #8]
 80174ae:	697a      	ldr	r2, [r7, #20]
 80174b0:	6912      	ldr	r2, [r2, #16]
 80174b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80174b6:	fb02 f201 	mul.w	r2, r2, r1
 80174ba:	1a9b      	subs	r3, r3, r2
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d11c      	bne.n	80174fa <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80174c0:	697b      	ldr	r3, [r7, #20]
 80174c2:	689a      	ldr	r2, [r3, #8]
 80174c4:	697b      	ldr	r3, [r7, #20]
 80174c6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80174c8:	429a      	cmp	r2, r3
 80174ca:	d316      	bcc.n	80174fa <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80174cc:	697b      	ldr	r3, [r7, #20]
 80174ce:	689a      	ldr	r2, [r3, #8]
 80174d0:	68fb      	ldr	r3, [r7, #12]
 80174d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80174d6:	429a      	cmp	r2, r3
 80174d8:	d20f      	bcs.n	80174fa <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80174da:	2200      	movs	r2, #0
 80174dc:	2100      	movs	r1, #0
 80174de:	68f8      	ldr	r0, [r7, #12]
 80174e0:	f000 fea1 	bl	8018226 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80174e4:	68fb      	ldr	r3, [r7, #12]
 80174e6:	2200      	movs	r2, #0
 80174e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80174ec:	2300      	movs	r3, #0
 80174ee:	2200      	movs	r2, #0
 80174f0:	2100      	movs	r1, #0
 80174f2:	68f8      	ldr	r0, [r7, #12]
 80174f4:	f001 facf 	bl	8018a96 <USBD_LL_PrepareReceive>
 80174f8:	e026      	b.n	8017548 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80174fa:	68fb      	ldr	r3, [r7, #12]
 80174fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017500:	68db      	ldr	r3, [r3, #12]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d00a      	beq.n	801751c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8017506:	68fb      	ldr	r3, [r7, #12]
 8017508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801750c:	2b03      	cmp	r3, #3
 801750e:	d105      	bne.n	801751c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8017510:	68fb      	ldr	r3, [r7, #12]
 8017512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017516:	68db      	ldr	r3, [r3, #12]
 8017518:	68f8      	ldr	r0, [r7, #12]
 801751a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801751c:	2180      	movs	r1, #128	; 0x80
 801751e:	68f8      	ldr	r0, [r7, #12]
 8017520:	f001 fa0d 	bl	801893e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8017524:	68f8      	ldr	r0, [r7, #12]
 8017526:	f000 feb5 	bl	8018294 <USBD_CtlReceiveStatus>
 801752a:	e00d      	b.n	8017548 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8017532:	2b04      	cmp	r3, #4
 8017534:	d004      	beq.n	8017540 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801753c:	2b00      	cmp	r3, #0
 801753e:	d103      	bne.n	8017548 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8017540:	2180      	movs	r1, #128	; 0x80
 8017542:	68f8      	ldr	r0, [r7, #12]
 8017544:	f001 f9fb 	bl	801893e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801754e:	2b01      	cmp	r3, #1
 8017550:	d11d      	bne.n	801758e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8017552:	68f8      	ldr	r0, [r7, #12]
 8017554:	f7ff fe80 	bl	8017258 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	2200      	movs	r2, #0
 801755c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8017560:	e015      	b.n	801758e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017568:	695b      	ldr	r3, [r3, #20]
 801756a:	2b00      	cmp	r3, #0
 801756c:	d00d      	beq.n	801758a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8017574:	2b03      	cmp	r3, #3
 8017576:	d108      	bne.n	801758a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801757e:	695b      	ldr	r3, [r3, #20]
 8017580:	7afa      	ldrb	r2, [r7, #11]
 8017582:	4611      	mov	r1, r2
 8017584:	68f8      	ldr	r0, [r7, #12]
 8017586:	4798      	blx	r3
 8017588:	e001      	b.n	801758e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801758a:	2302      	movs	r3, #2
 801758c:	e000      	b.n	8017590 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 801758e:	2300      	movs	r3, #0
}
 8017590:	4618      	mov	r0, r3
 8017592:	3718      	adds	r7, #24
 8017594:	46bd      	mov	sp, r7
 8017596:	bd80      	pop	{r7, pc}

08017598 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8017598:	b580      	push	{r7, lr}
 801759a:	b082      	sub	sp, #8
 801759c:	af00      	add	r7, sp, #0
 801759e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80175a0:	2340      	movs	r3, #64	; 0x40
 80175a2:	2200      	movs	r2, #0
 80175a4:	2100      	movs	r1, #0
 80175a6:	6878      	ldr	r0, [r7, #4]
 80175a8:	f001 f965 	bl	8018876 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	2201      	movs	r2, #1
 80175b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	2240      	movs	r2, #64	; 0x40
 80175b8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80175bc:	2340      	movs	r3, #64	; 0x40
 80175be:	2200      	movs	r2, #0
 80175c0:	2180      	movs	r1, #128	; 0x80
 80175c2:	6878      	ldr	r0, [r7, #4]
 80175c4:	f001 f957 	bl	8018876 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	2201      	movs	r2, #1
 80175cc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	2240      	movs	r2, #64	; 0x40
 80175d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	2201      	movs	r2, #1
 80175d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	2200      	movs	r2, #0
 80175e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	2200      	movs	r2, #0
 80175e8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	2200      	movs	r2, #0
 80175ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d009      	beq.n	8017610 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017602:	685b      	ldr	r3, [r3, #4]
 8017604:	687a      	ldr	r2, [r7, #4]
 8017606:	6852      	ldr	r2, [r2, #4]
 8017608:	b2d2      	uxtb	r2, r2
 801760a:	4611      	mov	r1, r2
 801760c:	6878      	ldr	r0, [r7, #4]
 801760e:	4798      	blx	r3
  }

  return USBD_OK;
 8017610:	2300      	movs	r3, #0
}
 8017612:	4618      	mov	r0, r3
 8017614:	3708      	adds	r7, #8
 8017616:	46bd      	mov	sp, r7
 8017618:	bd80      	pop	{r7, pc}

0801761a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801761a:	b480      	push	{r7}
 801761c:	b083      	sub	sp, #12
 801761e:	af00      	add	r7, sp, #0
 8017620:	6078      	str	r0, [r7, #4]
 8017622:	460b      	mov	r3, r1
 8017624:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	78fa      	ldrb	r2, [r7, #3]
 801762a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801762c:	2300      	movs	r3, #0
}
 801762e:	4618      	mov	r0, r3
 8017630:	370c      	adds	r7, #12
 8017632:	46bd      	mov	sp, r7
 8017634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017638:	4770      	bx	lr

0801763a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801763a:	b480      	push	{r7}
 801763c:	b083      	sub	sp, #12
 801763e:	af00      	add	r7, sp, #0
 8017640:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	2204      	movs	r2, #4
 8017652:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8017656:	2300      	movs	r3, #0
}
 8017658:	4618      	mov	r0, r3
 801765a:	370c      	adds	r7, #12
 801765c:	46bd      	mov	sp, r7
 801765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017662:	4770      	bx	lr

08017664 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8017664:	b480      	push	{r7}
 8017666:	b083      	sub	sp, #12
 8017668:	af00      	add	r7, sp, #0
 801766a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017672:	2b04      	cmp	r3, #4
 8017674:	d105      	bne.n	8017682 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8017682:	2300      	movs	r3, #0
}
 8017684:	4618      	mov	r0, r3
 8017686:	370c      	adds	r7, #12
 8017688:	46bd      	mov	sp, r7
 801768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801768e:	4770      	bx	lr

08017690 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8017690:	b580      	push	{r7, lr}
 8017692:	b082      	sub	sp, #8
 8017694:	af00      	add	r7, sp, #0
 8017696:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801769e:	2b03      	cmp	r3, #3
 80176a0:	d10b      	bne.n	80176ba <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80176a8:	69db      	ldr	r3, [r3, #28]
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d005      	beq.n	80176ba <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80176b4:	69db      	ldr	r3, [r3, #28]
 80176b6:	6878      	ldr	r0, [r7, #4]
 80176b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80176ba:	2300      	movs	r3, #0
}
 80176bc:	4618      	mov	r0, r3
 80176be:	3708      	adds	r7, #8
 80176c0:	46bd      	mov	sp, r7
 80176c2:	bd80      	pop	{r7, pc}

080176c4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80176c4:	b580      	push	{r7, lr}
 80176c6:	b084      	sub	sp, #16
 80176c8:	af00      	add	r7, sp, #0
 80176ca:	6078      	str	r0, [r7, #4]
 80176cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80176ce:	2300      	movs	r3, #0
 80176d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80176d2:	683b      	ldr	r3, [r7, #0]
 80176d4:	781b      	ldrb	r3, [r3, #0]
 80176d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80176da:	2b40      	cmp	r3, #64	; 0x40
 80176dc:	d005      	beq.n	80176ea <USBD_StdDevReq+0x26>
 80176de:	2b40      	cmp	r3, #64	; 0x40
 80176e0:	d84f      	bhi.n	8017782 <USBD_StdDevReq+0xbe>
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d009      	beq.n	80176fa <USBD_StdDevReq+0x36>
 80176e6:	2b20      	cmp	r3, #32
 80176e8:	d14b      	bne.n	8017782 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80176f0:	689b      	ldr	r3, [r3, #8]
 80176f2:	6839      	ldr	r1, [r7, #0]
 80176f4:	6878      	ldr	r0, [r7, #4]
 80176f6:	4798      	blx	r3
      break;
 80176f8:	e048      	b.n	801778c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80176fa:	683b      	ldr	r3, [r7, #0]
 80176fc:	785b      	ldrb	r3, [r3, #1]
 80176fe:	2b09      	cmp	r3, #9
 8017700:	d839      	bhi.n	8017776 <USBD_StdDevReq+0xb2>
 8017702:	a201      	add	r2, pc, #4	; (adr r2, 8017708 <USBD_StdDevReq+0x44>)
 8017704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017708:	08017759 	.word	0x08017759
 801770c:	0801776d 	.word	0x0801776d
 8017710:	08017777 	.word	0x08017777
 8017714:	08017763 	.word	0x08017763
 8017718:	08017777 	.word	0x08017777
 801771c:	0801773b 	.word	0x0801773b
 8017720:	08017731 	.word	0x08017731
 8017724:	08017777 	.word	0x08017777
 8017728:	0801774f 	.word	0x0801774f
 801772c:	08017745 	.word	0x08017745
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8017730:	6839      	ldr	r1, [r7, #0]
 8017732:	6878      	ldr	r0, [r7, #4]
 8017734:	f000 f9dc 	bl	8017af0 <USBD_GetDescriptor>
          break;
 8017738:	e022      	b.n	8017780 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801773a:	6839      	ldr	r1, [r7, #0]
 801773c:	6878      	ldr	r0, [r7, #4]
 801773e:	f000 fb3f 	bl	8017dc0 <USBD_SetAddress>
          break;
 8017742:	e01d      	b.n	8017780 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8017744:	6839      	ldr	r1, [r7, #0]
 8017746:	6878      	ldr	r0, [r7, #4]
 8017748:	f000 fb7e 	bl	8017e48 <USBD_SetConfig>
          break;
 801774c:	e018      	b.n	8017780 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801774e:	6839      	ldr	r1, [r7, #0]
 8017750:	6878      	ldr	r0, [r7, #4]
 8017752:	f000 fc07 	bl	8017f64 <USBD_GetConfig>
          break;
 8017756:	e013      	b.n	8017780 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8017758:	6839      	ldr	r1, [r7, #0]
 801775a:	6878      	ldr	r0, [r7, #4]
 801775c:	f000 fc37 	bl	8017fce <USBD_GetStatus>
          break;
 8017760:	e00e      	b.n	8017780 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8017762:	6839      	ldr	r1, [r7, #0]
 8017764:	6878      	ldr	r0, [r7, #4]
 8017766:	f000 fc65 	bl	8018034 <USBD_SetFeature>
          break;
 801776a:	e009      	b.n	8017780 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801776c:	6839      	ldr	r1, [r7, #0]
 801776e:	6878      	ldr	r0, [r7, #4]
 8017770:	f000 fc74 	bl	801805c <USBD_ClrFeature>
          break;
 8017774:	e004      	b.n	8017780 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8017776:	6839      	ldr	r1, [r7, #0]
 8017778:	6878      	ldr	r0, [r7, #4]
 801777a:	f000 fccd 	bl	8018118 <USBD_CtlError>
          break;
 801777e:	bf00      	nop
      }
      break;
 8017780:	e004      	b.n	801778c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8017782:	6839      	ldr	r1, [r7, #0]
 8017784:	6878      	ldr	r0, [r7, #4]
 8017786:	f000 fcc7 	bl	8018118 <USBD_CtlError>
      break;
 801778a:	bf00      	nop
  }

  return ret;
 801778c:	7bfb      	ldrb	r3, [r7, #15]
}
 801778e:	4618      	mov	r0, r3
 8017790:	3710      	adds	r7, #16
 8017792:	46bd      	mov	sp, r7
 8017794:	bd80      	pop	{r7, pc}
 8017796:	bf00      	nop

08017798 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8017798:	b580      	push	{r7, lr}
 801779a:	b084      	sub	sp, #16
 801779c:	af00      	add	r7, sp, #0
 801779e:	6078      	str	r0, [r7, #4]
 80177a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80177a2:	2300      	movs	r3, #0
 80177a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80177a6:	683b      	ldr	r3, [r7, #0]
 80177a8:	781b      	ldrb	r3, [r3, #0]
 80177aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80177ae:	2b40      	cmp	r3, #64	; 0x40
 80177b0:	d005      	beq.n	80177be <USBD_StdItfReq+0x26>
 80177b2:	2b40      	cmp	r3, #64	; 0x40
 80177b4:	d82e      	bhi.n	8017814 <USBD_StdItfReq+0x7c>
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d001      	beq.n	80177be <USBD_StdItfReq+0x26>
 80177ba:	2b20      	cmp	r3, #32
 80177bc:	d12a      	bne.n	8017814 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80177c4:	3b01      	subs	r3, #1
 80177c6:	2b02      	cmp	r3, #2
 80177c8:	d81d      	bhi.n	8017806 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80177ca:	683b      	ldr	r3, [r7, #0]
 80177cc:	889b      	ldrh	r3, [r3, #4]
 80177ce:	b2db      	uxtb	r3, r3
 80177d0:	2b01      	cmp	r3, #1
 80177d2:	d813      	bhi.n	80177fc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80177da:	689b      	ldr	r3, [r3, #8]
 80177dc:	6839      	ldr	r1, [r7, #0]
 80177de:	6878      	ldr	r0, [r7, #4]
 80177e0:	4798      	blx	r3
 80177e2:	4603      	mov	r3, r0
 80177e4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80177e6:	683b      	ldr	r3, [r7, #0]
 80177e8:	88db      	ldrh	r3, [r3, #6]
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d110      	bne.n	8017810 <USBD_StdItfReq+0x78>
 80177ee:	7bfb      	ldrb	r3, [r7, #15]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d10d      	bne.n	8017810 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80177f4:	6878      	ldr	r0, [r7, #4]
 80177f6:	f000 fd3a 	bl	801826e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80177fa:	e009      	b.n	8017810 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80177fc:	6839      	ldr	r1, [r7, #0]
 80177fe:	6878      	ldr	r0, [r7, #4]
 8017800:	f000 fc8a 	bl	8018118 <USBD_CtlError>
          break;
 8017804:	e004      	b.n	8017810 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8017806:	6839      	ldr	r1, [r7, #0]
 8017808:	6878      	ldr	r0, [r7, #4]
 801780a:	f000 fc85 	bl	8018118 <USBD_CtlError>
          break;
 801780e:	e000      	b.n	8017812 <USBD_StdItfReq+0x7a>
          break;
 8017810:	bf00      	nop
      }
      break;
 8017812:	e004      	b.n	801781e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8017814:	6839      	ldr	r1, [r7, #0]
 8017816:	6878      	ldr	r0, [r7, #4]
 8017818:	f000 fc7e 	bl	8018118 <USBD_CtlError>
      break;
 801781c:	bf00      	nop
  }

  return USBD_OK;
 801781e:	2300      	movs	r3, #0
}
 8017820:	4618      	mov	r0, r3
 8017822:	3710      	adds	r7, #16
 8017824:	46bd      	mov	sp, r7
 8017826:	bd80      	pop	{r7, pc}

08017828 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8017828:	b580      	push	{r7, lr}
 801782a:	b084      	sub	sp, #16
 801782c:	af00      	add	r7, sp, #0
 801782e:	6078      	str	r0, [r7, #4]
 8017830:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8017832:	2300      	movs	r3, #0
 8017834:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8017836:	683b      	ldr	r3, [r7, #0]
 8017838:	889b      	ldrh	r3, [r3, #4]
 801783a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801783c:	683b      	ldr	r3, [r7, #0]
 801783e:	781b      	ldrb	r3, [r3, #0]
 8017840:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017844:	2b40      	cmp	r3, #64	; 0x40
 8017846:	d007      	beq.n	8017858 <USBD_StdEPReq+0x30>
 8017848:	2b40      	cmp	r3, #64	; 0x40
 801784a:	f200 8146 	bhi.w	8017ada <USBD_StdEPReq+0x2b2>
 801784e:	2b00      	cmp	r3, #0
 8017850:	d00a      	beq.n	8017868 <USBD_StdEPReq+0x40>
 8017852:	2b20      	cmp	r3, #32
 8017854:	f040 8141 	bne.w	8017ada <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801785e:	689b      	ldr	r3, [r3, #8]
 8017860:	6839      	ldr	r1, [r7, #0]
 8017862:	6878      	ldr	r0, [r7, #4]
 8017864:	4798      	blx	r3
      break;
 8017866:	e13d      	b.n	8017ae4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8017868:	683b      	ldr	r3, [r7, #0]
 801786a:	781b      	ldrb	r3, [r3, #0]
 801786c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017870:	2b20      	cmp	r3, #32
 8017872:	d10a      	bne.n	801788a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801787a:	689b      	ldr	r3, [r3, #8]
 801787c:	6839      	ldr	r1, [r7, #0]
 801787e:	6878      	ldr	r0, [r7, #4]
 8017880:	4798      	blx	r3
 8017882:	4603      	mov	r3, r0
 8017884:	73fb      	strb	r3, [r7, #15]

        return ret;
 8017886:	7bfb      	ldrb	r3, [r7, #15]
 8017888:	e12d      	b.n	8017ae6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 801788a:	683b      	ldr	r3, [r7, #0]
 801788c:	785b      	ldrb	r3, [r3, #1]
 801788e:	2b03      	cmp	r3, #3
 8017890:	d007      	beq.n	80178a2 <USBD_StdEPReq+0x7a>
 8017892:	2b03      	cmp	r3, #3
 8017894:	f300 811b 	bgt.w	8017ace <USBD_StdEPReq+0x2a6>
 8017898:	2b00      	cmp	r3, #0
 801789a:	d072      	beq.n	8017982 <USBD_StdEPReq+0x15a>
 801789c:	2b01      	cmp	r3, #1
 801789e:	d03a      	beq.n	8017916 <USBD_StdEPReq+0xee>
 80178a0:	e115      	b.n	8017ace <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80178a8:	2b02      	cmp	r3, #2
 80178aa:	d002      	beq.n	80178b2 <USBD_StdEPReq+0x8a>
 80178ac:	2b03      	cmp	r3, #3
 80178ae:	d015      	beq.n	80178dc <USBD_StdEPReq+0xb4>
 80178b0:	e02b      	b.n	801790a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80178b2:	7bbb      	ldrb	r3, [r7, #14]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d00c      	beq.n	80178d2 <USBD_StdEPReq+0xaa>
 80178b8:	7bbb      	ldrb	r3, [r7, #14]
 80178ba:	2b80      	cmp	r3, #128	; 0x80
 80178bc:	d009      	beq.n	80178d2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80178be:	7bbb      	ldrb	r3, [r7, #14]
 80178c0:	4619      	mov	r1, r3
 80178c2:	6878      	ldr	r0, [r7, #4]
 80178c4:	f001 f83b 	bl	801893e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80178c8:	2180      	movs	r1, #128	; 0x80
 80178ca:	6878      	ldr	r0, [r7, #4]
 80178cc:	f001 f837 	bl	801893e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80178d0:	e020      	b.n	8017914 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80178d2:	6839      	ldr	r1, [r7, #0]
 80178d4:	6878      	ldr	r0, [r7, #4]
 80178d6:	f000 fc1f 	bl	8018118 <USBD_CtlError>
              break;
 80178da:	e01b      	b.n	8017914 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80178dc:	683b      	ldr	r3, [r7, #0]
 80178de:	885b      	ldrh	r3, [r3, #2]
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d10e      	bne.n	8017902 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80178e4:	7bbb      	ldrb	r3, [r7, #14]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d00b      	beq.n	8017902 <USBD_StdEPReq+0xda>
 80178ea:	7bbb      	ldrb	r3, [r7, #14]
 80178ec:	2b80      	cmp	r3, #128	; 0x80
 80178ee:	d008      	beq.n	8017902 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80178f0:	683b      	ldr	r3, [r7, #0]
 80178f2:	88db      	ldrh	r3, [r3, #6]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d104      	bne.n	8017902 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80178f8:	7bbb      	ldrb	r3, [r7, #14]
 80178fa:	4619      	mov	r1, r3
 80178fc:	6878      	ldr	r0, [r7, #4]
 80178fe:	f001 f81e 	bl	801893e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8017902:	6878      	ldr	r0, [r7, #4]
 8017904:	f000 fcb3 	bl	801826e <USBD_CtlSendStatus>

              break;
 8017908:	e004      	b.n	8017914 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 801790a:	6839      	ldr	r1, [r7, #0]
 801790c:	6878      	ldr	r0, [r7, #4]
 801790e:	f000 fc03 	bl	8018118 <USBD_CtlError>
              break;
 8017912:	bf00      	nop
          }
          break;
 8017914:	e0e0      	b.n	8017ad8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801791c:	2b02      	cmp	r3, #2
 801791e:	d002      	beq.n	8017926 <USBD_StdEPReq+0xfe>
 8017920:	2b03      	cmp	r3, #3
 8017922:	d015      	beq.n	8017950 <USBD_StdEPReq+0x128>
 8017924:	e026      	b.n	8017974 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017926:	7bbb      	ldrb	r3, [r7, #14]
 8017928:	2b00      	cmp	r3, #0
 801792a:	d00c      	beq.n	8017946 <USBD_StdEPReq+0x11e>
 801792c:	7bbb      	ldrb	r3, [r7, #14]
 801792e:	2b80      	cmp	r3, #128	; 0x80
 8017930:	d009      	beq.n	8017946 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8017932:	7bbb      	ldrb	r3, [r7, #14]
 8017934:	4619      	mov	r1, r3
 8017936:	6878      	ldr	r0, [r7, #4]
 8017938:	f001 f801 	bl	801893e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801793c:	2180      	movs	r1, #128	; 0x80
 801793e:	6878      	ldr	r0, [r7, #4]
 8017940:	f000 fffd 	bl	801893e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017944:	e01c      	b.n	8017980 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8017946:	6839      	ldr	r1, [r7, #0]
 8017948:	6878      	ldr	r0, [r7, #4]
 801794a:	f000 fbe5 	bl	8018118 <USBD_CtlError>
              break;
 801794e:	e017      	b.n	8017980 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017950:	683b      	ldr	r3, [r7, #0]
 8017952:	885b      	ldrh	r3, [r3, #2]
 8017954:	2b00      	cmp	r3, #0
 8017956:	d112      	bne.n	801797e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8017958:	7bbb      	ldrb	r3, [r7, #14]
 801795a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801795e:	2b00      	cmp	r3, #0
 8017960:	d004      	beq.n	801796c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8017962:	7bbb      	ldrb	r3, [r7, #14]
 8017964:	4619      	mov	r1, r3
 8017966:	6878      	ldr	r0, [r7, #4]
 8017968:	f001 f808 	bl	801897c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801796c:	6878      	ldr	r0, [r7, #4]
 801796e:	f000 fc7e 	bl	801826e <USBD_CtlSendStatus>
              }
              break;
 8017972:	e004      	b.n	801797e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8017974:	6839      	ldr	r1, [r7, #0]
 8017976:	6878      	ldr	r0, [r7, #4]
 8017978:	f000 fbce 	bl	8018118 <USBD_CtlError>
              break;
 801797c:	e000      	b.n	8017980 <USBD_StdEPReq+0x158>
              break;
 801797e:	bf00      	nop
          }
          break;
 8017980:	e0aa      	b.n	8017ad8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017988:	2b02      	cmp	r3, #2
 801798a:	d002      	beq.n	8017992 <USBD_StdEPReq+0x16a>
 801798c:	2b03      	cmp	r3, #3
 801798e:	d032      	beq.n	80179f6 <USBD_StdEPReq+0x1ce>
 8017990:	e097      	b.n	8017ac2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017992:	7bbb      	ldrb	r3, [r7, #14]
 8017994:	2b00      	cmp	r3, #0
 8017996:	d007      	beq.n	80179a8 <USBD_StdEPReq+0x180>
 8017998:	7bbb      	ldrb	r3, [r7, #14]
 801799a:	2b80      	cmp	r3, #128	; 0x80
 801799c:	d004      	beq.n	80179a8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 801799e:	6839      	ldr	r1, [r7, #0]
 80179a0:	6878      	ldr	r0, [r7, #4]
 80179a2:	f000 fbb9 	bl	8018118 <USBD_CtlError>
                break;
 80179a6:	e091      	b.n	8017acc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80179a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	da0b      	bge.n	80179c8 <USBD_StdEPReq+0x1a0>
 80179b0:	7bbb      	ldrb	r3, [r7, #14]
 80179b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80179b6:	4613      	mov	r3, r2
 80179b8:	009b      	lsls	r3, r3, #2
 80179ba:	4413      	add	r3, r2
 80179bc:	009b      	lsls	r3, r3, #2
 80179be:	3310      	adds	r3, #16
 80179c0:	687a      	ldr	r2, [r7, #4]
 80179c2:	4413      	add	r3, r2
 80179c4:	3304      	adds	r3, #4
 80179c6:	e00b      	b.n	80179e0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80179c8:	7bbb      	ldrb	r3, [r7, #14]
 80179ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80179ce:	4613      	mov	r3, r2
 80179d0:	009b      	lsls	r3, r3, #2
 80179d2:	4413      	add	r3, r2
 80179d4:	009b      	lsls	r3, r3, #2
 80179d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80179da:	687a      	ldr	r2, [r7, #4]
 80179dc:	4413      	add	r3, r2
 80179de:	3304      	adds	r3, #4
 80179e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80179e2:	68bb      	ldr	r3, [r7, #8]
 80179e4:	2200      	movs	r2, #0
 80179e6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80179e8:	68bb      	ldr	r3, [r7, #8]
 80179ea:	2202      	movs	r2, #2
 80179ec:	4619      	mov	r1, r3
 80179ee:	6878      	ldr	r0, [r7, #4]
 80179f0:	f000 fbfd 	bl	80181ee <USBD_CtlSendData>
              break;
 80179f4:	e06a      	b.n	8017acc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80179f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	da11      	bge.n	8017a22 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80179fe:	7bbb      	ldrb	r3, [r7, #14]
 8017a00:	f003 020f 	and.w	r2, r3, #15
 8017a04:	6879      	ldr	r1, [r7, #4]
 8017a06:	4613      	mov	r3, r2
 8017a08:	009b      	lsls	r3, r3, #2
 8017a0a:	4413      	add	r3, r2
 8017a0c:	009b      	lsls	r3, r3, #2
 8017a0e:	440b      	add	r3, r1
 8017a10:	3318      	adds	r3, #24
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d117      	bne.n	8017a48 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8017a18:	6839      	ldr	r1, [r7, #0]
 8017a1a:	6878      	ldr	r0, [r7, #4]
 8017a1c:	f000 fb7c 	bl	8018118 <USBD_CtlError>
                  break;
 8017a20:	e054      	b.n	8017acc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8017a22:	7bbb      	ldrb	r3, [r7, #14]
 8017a24:	f003 020f 	and.w	r2, r3, #15
 8017a28:	6879      	ldr	r1, [r7, #4]
 8017a2a:	4613      	mov	r3, r2
 8017a2c:	009b      	lsls	r3, r3, #2
 8017a2e:	4413      	add	r3, r2
 8017a30:	009b      	lsls	r3, r3, #2
 8017a32:	440b      	add	r3, r1
 8017a34:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d104      	bne.n	8017a48 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8017a3e:	6839      	ldr	r1, [r7, #0]
 8017a40:	6878      	ldr	r0, [r7, #4]
 8017a42:	f000 fb69 	bl	8018118 <USBD_CtlError>
                  break;
 8017a46:	e041      	b.n	8017acc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017a48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	da0b      	bge.n	8017a68 <USBD_StdEPReq+0x240>
 8017a50:	7bbb      	ldrb	r3, [r7, #14]
 8017a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017a56:	4613      	mov	r3, r2
 8017a58:	009b      	lsls	r3, r3, #2
 8017a5a:	4413      	add	r3, r2
 8017a5c:	009b      	lsls	r3, r3, #2
 8017a5e:	3310      	adds	r3, #16
 8017a60:	687a      	ldr	r2, [r7, #4]
 8017a62:	4413      	add	r3, r2
 8017a64:	3304      	adds	r3, #4
 8017a66:	e00b      	b.n	8017a80 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017a68:	7bbb      	ldrb	r3, [r7, #14]
 8017a6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017a6e:	4613      	mov	r3, r2
 8017a70:	009b      	lsls	r3, r3, #2
 8017a72:	4413      	add	r3, r2
 8017a74:	009b      	lsls	r3, r3, #2
 8017a76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8017a7a:	687a      	ldr	r2, [r7, #4]
 8017a7c:	4413      	add	r3, r2
 8017a7e:	3304      	adds	r3, #4
 8017a80:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8017a82:	7bbb      	ldrb	r3, [r7, #14]
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d002      	beq.n	8017a8e <USBD_StdEPReq+0x266>
 8017a88:	7bbb      	ldrb	r3, [r7, #14]
 8017a8a:	2b80      	cmp	r3, #128	; 0x80
 8017a8c:	d103      	bne.n	8017a96 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8017a8e:	68bb      	ldr	r3, [r7, #8]
 8017a90:	2200      	movs	r2, #0
 8017a92:	601a      	str	r2, [r3, #0]
 8017a94:	e00e      	b.n	8017ab4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8017a96:	7bbb      	ldrb	r3, [r7, #14]
 8017a98:	4619      	mov	r1, r3
 8017a9a:	6878      	ldr	r0, [r7, #4]
 8017a9c:	f000 ff8d 	bl	80189ba <USBD_LL_IsStallEP>
 8017aa0:	4603      	mov	r3, r0
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d003      	beq.n	8017aae <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8017aa6:	68bb      	ldr	r3, [r7, #8]
 8017aa8:	2201      	movs	r2, #1
 8017aaa:	601a      	str	r2, [r3, #0]
 8017aac:	e002      	b.n	8017ab4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8017aae:	68bb      	ldr	r3, [r7, #8]
 8017ab0:	2200      	movs	r2, #0
 8017ab2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8017ab4:	68bb      	ldr	r3, [r7, #8]
 8017ab6:	2202      	movs	r2, #2
 8017ab8:	4619      	mov	r1, r3
 8017aba:	6878      	ldr	r0, [r7, #4]
 8017abc:	f000 fb97 	bl	80181ee <USBD_CtlSendData>
              break;
 8017ac0:	e004      	b.n	8017acc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8017ac2:	6839      	ldr	r1, [r7, #0]
 8017ac4:	6878      	ldr	r0, [r7, #4]
 8017ac6:	f000 fb27 	bl	8018118 <USBD_CtlError>
              break;
 8017aca:	bf00      	nop
          }
          break;
 8017acc:	e004      	b.n	8017ad8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8017ace:	6839      	ldr	r1, [r7, #0]
 8017ad0:	6878      	ldr	r0, [r7, #4]
 8017ad2:	f000 fb21 	bl	8018118 <USBD_CtlError>
          break;
 8017ad6:	bf00      	nop
      }
      break;
 8017ad8:	e004      	b.n	8017ae4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8017ada:	6839      	ldr	r1, [r7, #0]
 8017adc:	6878      	ldr	r0, [r7, #4]
 8017ade:	f000 fb1b 	bl	8018118 <USBD_CtlError>
      break;
 8017ae2:	bf00      	nop
  }

  return ret;
 8017ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	3710      	adds	r7, #16
 8017aea:	46bd      	mov	sp, r7
 8017aec:	bd80      	pop	{r7, pc}
	...

08017af0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8017af0:	b580      	push	{r7, lr}
 8017af2:	b084      	sub	sp, #16
 8017af4:	af00      	add	r7, sp, #0
 8017af6:	6078      	str	r0, [r7, #4]
 8017af8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017afa:	2300      	movs	r3, #0
 8017afc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8017afe:	2300      	movs	r3, #0
 8017b00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8017b02:	2300      	movs	r3, #0
 8017b04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8017b06:	683b      	ldr	r3, [r7, #0]
 8017b08:	885b      	ldrh	r3, [r3, #2]
 8017b0a:	0a1b      	lsrs	r3, r3, #8
 8017b0c:	b29b      	uxth	r3, r3
 8017b0e:	3b01      	subs	r3, #1
 8017b10:	2b06      	cmp	r3, #6
 8017b12:	f200 8128 	bhi.w	8017d66 <USBD_GetDescriptor+0x276>
 8017b16:	a201      	add	r2, pc, #4	; (adr r2, 8017b1c <USBD_GetDescriptor+0x2c>)
 8017b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b1c:	08017b39 	.word	0x08017b39
 8017b20:	08017b51 	.word	0x08017b51
 8017b24:	08017b91 	.word	0x08017b91
 8017b28:	08017d67 	.word	0x08017d67
 8017b2c:	08017d67 	.word	0x08017d67
 8017b30:	08017d07 	.word	0x08017d07
 8017b34:	08017d33 	.word	0x08017d33
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	687a      	ldr	r2, [r7, #4]
 8017b42:	7c12      	ldrb	r2, [r2, #16]
 8017b44:	f107 0108 	add.w	r1, r7, #8
 8017b48:	4610      	mov	r0, r2
 8017b4a:	4798      	blx	r3
 8017b4c:	60f8      	str	r0, [r7, #12]
      break;
 8017b4e:	e112      	b.n	8017d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	7c1b      	ldrb	r3, [r3, #16]
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d10d      	bne.n	8017b74 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b60:	f107 0208 	add.w	r2, r7, #8
 8017b64:	4610      	mov	r0, r2
 8017b66:	4798      	blx	r3
 8017b68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	3301      	adds	r3, #1
 8017b6e:	2202      	movs	r2, #2
 8017b70:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8017b72:	e100      	b.n	8017d76 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b7c:	f107 0208 	add.w	r2, r7, #8
 8017b80:	4610      	mov	r0, r2
 8017b82:	4798      	blx	r3
 8017b84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	3301      	adds	r3, #1
 8017b8a:	2202      	movs	r2, #2
 8017b8c:	701a      	strb	r2, [r3, #0]
      break;
 8017b8e:	e0f2      	b.n	8017d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8017b90:	683b      	ldr	r3, [r7, #0]
 8017b92:	885b      	ldrh	r3, [r3, #2]
 8017b94:	b2db      	uxtb	r3, r3
 8017b96:	2b05      	cmp	r3, #5
 8017b98:	f200 80ac 	bhi.w	8017cf4 <USBD_GetDescriptor+0x204>
 8017b9c:	a201      	add	r2, pc, #4	; (adr r2, 8017ba4 <USBD_GetDescriptor+0xb4>)
 8017b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017ba2:	bf00      	nop
 8017ba4:	08017bbd 	.word	0x08017bbd
 8017ba8:	08017bf1 	.word	0x08017bf1
 8017bac:	08017c25 	.word	0x08017c25
 8017bb0:	08017c59 	.word	0x08017c59
 8017bb4:	08017c8d 	.word	0x08017c8d
 8017bb8:	08017cc1 	.word	0x08017cc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017bc2:	685b      	ldr	r3, [r3, #4]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d00b      	beq.n	8017be0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017bce:	685b      	ldr	r3, [r3, #4]
 8017bd0:	687a      	ldr	r2, [r7, #4]
 8017bd2:	7c12      	ldrb	r2, [r2, #16]
 8017bd4:	f107 0108 	add.w	r1, r7, #8
 8017bd8:	4610      	mov	r0, r2
 8017bda:	4798      	blx	r3
 8017bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017bde:	e091      	b.n	8017d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017be0:	6839      	ldr	r1, [r7, #0]
 8017be2:	6878      	ldr	r0, [r7, #4]
 8017be4:	f000 fa98 	bl	8018118 <USBD_CtlError>
            err++;
 8017be8:	7afb      	ldrb	r3, [r7, #11]
 8017bea:	3301      	adds	r3, #1
 8017bec:	72fb      	strb	r3, [r7, #11]
          break;
 8017bee:	e089      	b.n	8017d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017bf6:	689b      	ldr	r3, [r3, #8]
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d00b      	beq.n	8017c14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017c02:	689b      	ldr	r3, [r3, #8]
 8017c04:	687a      	ldr	r2, [r7, #4]
 8017c06:	7c12      	ldrb	r2, [r2, #16]
 8017c08:	f107 0108 	add.w	r1, r7, #8
 8017c0c:	4610      	mov	r0, r2
 8017c0e:	4798      	blx	r3
 8017c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017c12:	e077      	b.n	8017d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017c14:	6839      	ldr	r1, [r7, #0]
 8017c16:	6878      	ldr	r0, [r7, #4]
 8017c18:	f000 fa7e 	bl	8018118 <USBD_CtlError>
            err++;
 8017c1c:	7afb      	ldrb	r3, [r7, #11]
 8017c1e:	3301      	adds	r3, #1
 8017c20:	72fb      	strb	r3, [r7, #11]
          break;
 8017c22:	e06f      	b.n	8017d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017c2a:	68db      	ldr	r3, [r3, #12]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d00b      	beq.n	8017c48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017c36:	68db      	ldr	r3, [r3, #12]
 8017c38:	687a      	ldr	r2, [r7, #4]
 8017c3a:	7c12      	ldrb	r2, [r2, #16]
 8017c3c:	f107 0108 	add.w	r1, r7, #8
 8017c40:	4610      	mov	r0, r2
 8017c42:	4798      	blx	r3
 8017c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017c46:	e05d      	b.n	8017d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017c48:	6839      	ldr	r1, [r7, #0]
 8017c4a:	6878      	ldr	r0, [r7, #4]
 8017c4c:	f000 fa64 	bl	8018118 <USBD_CtlError>
            err++;
 8017c50:	7afb      	ldrb	r3, [r7, #11]
 8017c52:	3301      	adds	r3, #1
 8017c54:	72fb      	strb	r3, [r7, #11]
          break;
 8017c56:	e055      	b.n	8017d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017c5e:	691b      	ldr	r3, [r3, #16]
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d00b      	beq.n	8017c7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017c6a:	691b      	ldr	r3, [r3, #16]
 8017c6c:	687a      	ldr	r2, [r7, #4]
 8017c6e:	7c12      	ldrb	r2, [r2, #16]
 8017c70:	f107 0108 	add.w	r1, r7, #8
 8017c74:	4610      	mov	r0, r2
 8017c76:	4798      	blx	r3
 8017c78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017c7a:	e043      	b.n	8017d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017c7c:	6839      	ldr	r1, [r7, #0]
 8017c7e:	6878      	ldr	r0, [r7, #4]
 8017c80:	f000 fa4a 	bl	8018118 <USBD_CtlError>
            err++;
 8017c84:	7afb      	ldrb	r3, [r7, #11]
 8017c86:	3301      	adds	r3, #1
 8017c88:	72fb      	strb	r3, [r7, #11]
          break;
 8017c8a:	e03b      	b.n	8017d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017c92:	695b      	ldr	r3, [r3, #20]
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d00b      	beq.n	8017cb0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017c9e:	695b      	ldr	r3, [r3, #20]
 8017ca0:	687a      	ldr	r2, [r7, #4]
 8017ca2:	7c12      	ldrb	r2, [r2, #16]
 8017ca4:	f107 0108 	add.w	r1, r7, #8
 8017ca8:	4610      	mov	r0, r2
 8017caa:	4798      	blx	r3
 8017cac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017cae:	e029      	b.n	8017d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017cb0:	6839      	ldr	r1, [r7, #0]
 8017cb2:	6878      	ldr	r0, [r7, #4]
 8017cb4:	f000 fa30 	bl	8018118 <USBD_CtlError>
            err++;
 8017cb8:	7afb      	ldrb	r3, [r7, #11]
 8017cba:	3301      	adds	r3, #1
 8017cbc:	72fb      	strb	r3, [r7, #11]
          break;
 8017cbe:	e021      	b.n	8017d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017cc6:	699b      	ldr	r3, [r3, #24]
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d00b      	beq.n	8017ce4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017cd2:	699b      	ldr	r3, [r3, #24]
 8017cd4:	687a      	ldr	r2, [r7, #4]
 8017cd6:	7c12      	ldrb	r2, [r2, #16]
 8017cd8:	f107 0108 	add.w	r1, r7, #8
 8017cdc:	4610      	mov	r0, r2
 8017cde:	4798      	blx	r3
 8017ce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017ce2:	e00f      	b.n	8017d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017ce4:	6839      	ldr	r1, [r7, #0]
 8017ce6:	6878      	ldr	r0, [r7, #4]
 8017ce8:	f000 fa16 	bl	8018118 <USBD_CtlError>
            err++;
 8017cec:	7afb      	ldrb	r3, [r7, #11]
 8017cee:	3301      	adds	r3, #1
 8017cf0:	72fb      	strb	r3, [r7, #11]
          break;
 8017cf2:	e007      	b.n	8017d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8017cf4:	6839      	ldr	r1, [r7, #0]
 8017cf6:	6878      	ldr	r0, [r7, #4]
 8017cf8:	f000 fa0e 	bl	8018118 <USBD_CtlError>
          err++;
 8017cfc:	7afb      	ldrb	r3, [r7, #11]
 8017cfe:	3301      	adds	r3, #1
 8017d00:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8017d02:	e038      	b.n	8017d76 <USBD_GetDescriptor+0x286>
 8017d04:	e037      	b.n	8017d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	7c1b      	ldrb	r3, [r3, #16]
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d109      	bne.n	8017d22 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017d16:	f107 0208 	add.w	r2, r7, #8
 8017d1a:	4610      	mov	r0, r2
 8017d1c:	4798      	blx	r3
 8017d1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017d20:	e029      	b.n	8017d76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8017d22:	6839      	ldr	r1, [r7, #0]
 8017d24:	6878      	ldr	r0, [r7, #4]
 8017d26:	f000 f9f7 	bl	8018118 <USBD_CtlError>
        err++;
 8017d2a:	7afb      	ldrb	r3, [r7, #11]
 8017d2c:	3301      	adds	r3, #1
 8017d2e:	72fb      	strb	r3, [r7, #11]
      break;
 8017d30:	e021      	b.n	8017d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	7c1b      	ldrb	r3, [r3, #16]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d10d      	bne.n	8017d56 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d42:	f107 0208 	add.w	r2, r7, #8
 8017d46:	4610      	mov	r0, r2
 8017d48:	4798      	blx	r3
 8017d4a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	3301      	adds	r3, #1
 8017d50:	2207      	movs	r2, #7
 8017d52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017d54:	e00f      	b.n	8017d76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8017d56:	6839      	ldr	r1, [r7, #0]
 8017d58:	6878      	ldr	r0, [r7, #4]
 8017d5a:	f000 f9dd 	bl	8018118 <USBD_CtlError>
        err++;
 8017d5e:	7afb      	ldrb	r3, [r7, #11]
 8017d60:	3301      	adds	r3, #1
 8017d62:	72fb      	strb	r3, [r7, #11]
      break;
 8017d64:	e007      	b.n	8017d76 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8017d66:	6839      	ldr	r1, [r7, #0]
 8017d68:	6878      	ldr	r0, [r7, #4]
 8017d6a:	f000 f9d5 	bl	8018118 <USBD_CtlError>
      err++;
 8017d6e:	7afb      	ldrb	r3, [r7, #11]
 8017d70:	3301      	adds	r3, #1
 8017d72:	72fb      	strb	r3, [r7, #11]
      break;
 8017d74:	bf00      	nop
  }

  if (err != 0U)
 8017d76:	7afb      	ldrb	r3, [r7, #11]
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d11c      	bne.n	8017db6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8017d7c:	893b      	ldrh	r3, [r7, #8]
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d011      	beq.n	8017da6 <USBD_GetDescriptor+0x2b6>
 8017d82:	683b      	ldr	r3, [r7, #0]
 8017d84:	88db      	ldrh	r3, [r3, #6]
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	d00d      	beq.n	8017da6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8017d8a:	683b      	ldr	r3, [r7, #0]
 8017d8c:	88da      	ldrh	r2, [r3, #6]
 8017d8e:	893b      	ldrh	r3, [r7, #8]
 8017d90:	4293      	cmp	r3, r2
 8017d92:	bf28      	it	cs
 8017d94:	4613      	movcs	r3, r2
 8017d96:	b29b      	uxth	r3, r3
 8017d98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8017d9a:	893b      	ldrh	r3, [r7, #8]
 8017d9c:	461a      	mov	r2, r3
 8017d9e:	68f9      	ldr	r1, [r7, #12]
 8017da0:	6878      	ldr	r0, [r7, #4]
 8017da2:	f000 fa24 	bl	80181ee <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8017da6:	683b      	ldr	r3, [r7, #0]
 8017da8:	88db      	ldrh	r3, [r3, #6]
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d104      	bne.n	8017db8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8017dae:	6878      	ldr	r0, [r7, #4]
 8017db0:	f000 fa5d 	bl	801826e <USBD_CtlSendStatus>
 8017db4:	e000      	b.n	8017db8 <USBD_GetDescriptor+0x2c8>
    return;
 8017db6:	bf00      	nop
    }
  }
}
 8017db8:	3710      	adds	r7, #16
 8017dba:	46bd      	mov	sp, r7
 8017dbc:	bd80      	pop	{r7, pc}
 8017dbe:	bf00      	nop

08017dc0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8017dc0:	b580      	push	{r7, lr}
 8017dc2:	b084      	sub	sp, #16
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	6078      	str	r0, [r7, #4]
 8017dc8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8017dca:	683b      	ldr	r3, [r7, #0]
 8017dcc:	889b      	ldrh	r3, [r3, #4]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d130      	bne.n	8017e34 <USBD_SetAddress+0x74>
 8017dd2:	683b      	ldr	r3, [r7, #0]
 8017dd4:	88db      	ldrh	r3, [r3, #6]
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d12c      	bne.n	8017e34 <USBD_SetAddress+0x74>
 8017dda:	683b      	ldr	r3, [r7, #0]
 8017ddc:	885b      	ldrh	r3, [r3, #2]
 8017dde:	2b7f      	cmp	r3, #127	; 0x7f
 8017de0:	d828      	bhi.n	8017e34 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8017de2:	683b      	ldr	r3, [r7, #0]
 8017de4:	885b      	ldrh	r3, [r3, #2]
 8017de6:	b2db      	uxtb	r3, r3
 8017de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017dec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017df4:	2b03      	cmp	r3, #3
 8017df6:	d104      	bne.n	8017e02 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8017df8:	6839      	ldr	r1, [r7, #0]
 8017dfa:	6878      	ldr	r0, [r7, #4]
 8017dfc:	f000 f98c 	bl	8018118 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017e00:	e01d      	b.n	8017e3e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	7bfa      	ldrb	r2, [r7, #15]
 8017e06:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017e0a:	7bfb      	ldrb	r3, [r7, #15]
 8017e0c:	4619      	mov	r1, r3
 8017e0e:	6878      	ldr	r0, [r7, #4]
 8017e10:	f000 fdff 	bl	8018a12 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8017e14:	6878      	ldr	r0, [r7, #4]
 8017e16:	f000 fa2a 	bl	801826e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8017e1a:	7bfb      	ldrb	r3, [r7, #15]
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d004      	beq.n	8017e2a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	2202      	movs	r2, #2
 8017e24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017e28:	e009      	b.n	8017e3e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	2201      	movs	r2, #1
 8017e2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017e32:	e004      	b.n	8017e3e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8017e34:	6839      	ldr	r1, [r7, #0]
 8017e36:	6878      	ldr	r0, [r7, #4]
 8017e38:	f000 f96e 	bl	8018118 <USBD_CtlError>
  }
}
 8017e3c:	bf00      	nop
 8017e3e:	bf00      	nop
 8017e40:	3710      	adds	r7, #16
 8017e42:	46bd      	mov	sp, r7
 8017e44:	bd80      	pop	{r7, pc}
	...

08017e48 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017e48:	b580      	push	{r7, lr}
 8017e4a:	b082      	sub	sp, #8
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	6078      	str	r0, [r7, #4]
 8017e50:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8017e52:	683b      	ldr	r3, [r7, #0]
 8017e54:	885b      	ldrh	r3, [r3, #2]
 8017e56:	b2da      	uxtb	r2, r3
 8017e58:	4b41      	ldr	r3, [pc, #260]	; (8017f60 <USBD_SetConfig+0x118>)
 8017e5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017e5c:	4b40      	ldr	r3, [pc, #256]	; (8017f60 <USBD_SetConfig+0x118>)
 8017e5e:	781b      	ldrb	r3, [r3, #0]
 8017e60:	2b01      	cmp	r3, #1
 8017e62:	d904      	bls.n	8017e6e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8017e64:	6839      	ldr	r1, [r7, #0]
 8017e66:	6878      	ldr	r0, [r7, #4]
 8017e68:	f000 f956 	bl	8018118 <USBD_CtlError>
 8017e6c:	e075      	b.n	8017f5a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017e74:	2b02      	cmp	r3, #2
 8017e76:	d002      	beq.n	8017e7e <USBD_SetConfig+0x36>
 8017e78:	2b03      	cmp	r3, #3
 8017e7a:	d023      	beq.n	8017ec4 <USBD_SetConfig+0x7c>
 8017e7c:	e062      	b.n	8017f44 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8017e7e:	4b38      	ldr	r3, [pc, #224]	; (8017f60 <USBD_SetConfig+0x118>)
 8017e80:	781b      	ldrb	r3, [r3, #0]
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d01a      	beq.n	8017ebc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8017e86:	4b36      	ldr	r3, [pc, #216]	; (8017f60 <USBD_SetConfig+0x118>)
 8017e88:	781b      	ldrb	r3, [r3, #0]
 8017e8a:	461a      	mov	r2, r3
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	2203      	movs	r2, #3
 8017e94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8017e98:	4b31      	ldr	r3, [pc, #196]	; (8017f60 <USBD_SetConfig+0x118>)
 8017e9a:	781b      	ldrb	r3, [r3, #0]
 8017e9c:	4619      	mov	r1, r3
 8017e9e:	6878      	ldr	r0, [r7, #4]
 8017ea0:	f7ff f9e5 	bl	801726e <USBD_SetClassConfig>
 8017ea4:	4603      	mov	r3, r0
 8017ea6:	2b02      	cmp	r3, #2
 8017ea8:	d104      	bne.n	8017eb4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8017eaa:	6839      	ldr	r1, [r7, #0]
 8017eac:	6878      	ldr	r0, [r7, #4]
 8017eae:	f000 f933 	bl	8018118 <USBD_CtlError>
            return;
 8017eb2:	e052      	b.n	8017f5a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8017eb4:	6878      	ldr	r0, [r7, #4]
 8017eb6:	f000 f9da 	bl	801826e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8017eba:	e04e      	b.n	8017f5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8017ebc:	6878      	ldr	r0, [r7, #4]
 8017ebe:	f000 f9d6 	bl	801826e <USBD_CtlSendStatus>
        break;
 8017ec2:	e04a      	b.n	8017f5a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8017ec4:	4b26      	ldr	r3, [pc, #152]	; (8017f60 <USBD_SetConfig+0x118>)
 8017ec6:	781b      	ldrb	r3, [r3, #0]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d112      	bne.n	8017ef2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	2202      	movs	r2, #2
 8017ed0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8017ed4:	4b22      	ldr	r3, [pc, #136]	; (8017f60 <USBD_SetConfig+0x118>)
 8017ed6:	781b      	ldrb	r3, [r3, #0]
 8017ed8:	461a      	mov	r2, r3
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8017ede:	4b20      	ldr	r3, [pc, #128]	; (8017f60 <USBD_SetConfig+0x118>)
 8017ee0:	781b      	ldrb	r3, [r3, #0]
 8017ee2:	4619      	mov	r1, r3
 8017ee4:	6878      	ldr	r0, [r7, #4]
 8017ee6:	f7ff f9e1 	bl	80172ac <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8017eea:	6878      	ldr	r0, [r7, #4]
 8017eec:	f000 f9bf 	bl	801826e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8017ef0:	e033      	b.n	8017f5a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8017ef2:	4b1b      	ldr	r3, [pc, #108]	; (8017f60 <USBD_SetConfig+0x118>)
 8017ef4:	781b      	ldrb	r3, [r3, #0]
 8017ef6:	461a      	mov	r2, r3
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	685b      	ldr	r3, [r3, #4]
 8017efc:	429a      	cmp	r2, r3
 8017efe:	d01d      	beq.n	8017f3c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	685b      	ldr	r3, [r3, #4]
 8017f04:	b2db      	uxtb	r3, r3
 8017f06:	4619      	mov	r1, r3
 8017f08:	6878      	ldr	r0, [r7, #4]
 8017f0a:	f7ff f9cf 	bl	80172ac <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8017f0e:	4b14      	ldr	r3, [pc, #80]	; (8017f60 <USBD_SetConfig+0x118>)
 8017f10:	781b      	ldrb	r3, [r3, #0]
 8017f12:	461a      	mov	r2, r3
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8017f18:	4b11      	ldr	r3, [pc, #68]	; (8017f60 <USBD_SetConfig+0x118>)
 8017f1a:	781b      	ldrb	r3, [r3, #0]
 8017f1c:	4619      	mov	r1, r3
 8017f1e:	6878      	ldr	r0, [r7, #4]
 8017f20:	f7ff f9a5 	bl	801726e <USBD_SetClassConfig>
 8017f24:	4603      	mov	r3, r0
 8017f26:	2b02      	cmp	r3, #2
 8017f28:	d104      	bne.n	8017f34 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8017f2a:	6839      	ldr	r1, [r7, #0]
 8017f2c:	6878      	ldr	r0, [r7, #4]
 8017f2e:	f000 f8f3 	bl	8018118 <USBD_CtlError>
            return;
 8017f32:	e012      	b.n	8017f5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8017f34:	6878      	ldr	r0, [r7, #4]
 8017f36:	f000 f99a 	bl	801826e <USBD_CtlSendStatus>
        break;
 8017f3a:	e00e      	b.n	8017f5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8017f3c:	6878      	ldr	r0, [r7, #4]
 8017f3e:	f000 f996 	bl	801826e <USBD_CtlSendStatus>
        break;
 8017f42:	e00a      	b.n	8017f5a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8017f44:	6839      	ldr	r1, [r7, #0]
 8017f46:	6878      	ldr	r0, [r7, #4]
 8017f48:	f000 f8e6 	bl	8018118 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8017f4c:	4b04      	ldr	r3, [pc, #16]	; (8017f60 <USBD_SetConfig+0x118>)
 8017f4e:	781b      	ldrb	r3, [r3, #0]
 8017f50:	4619      	mov	r1, r3
 8017f52:	6878      	ldr	r0, [r7, #4]
 8017f54:	f7ff f9aa 	bl	80172ac <USBD_ClrClassConfig>
        break;
 8017f58:	bf00      	nop
    }
  }
}
 8017f5a:	3708      	adds	r7, #8
 8017f5c:	46bd      	mov	sp, r7
 8017f5e:	bd80      	pop	{r7, pc}
 8017f60:	2000013c 	.word	0x2000013c

08017f64 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017f64:	b580      	push	{r7, lr}
 8017f66:	b082      	sub	sp, #8
 8017f68:	af00      	add	r7, sp, #0
 8017f6a:	6078      	str	r0, [r7, #4]
 8017f6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017f6e:	683b      	ldr	r3, [r7, #0]
 8017f70:	88db      	ldrh	r3, [r3, #6]
 8017f72:	2b01      	cmp	r3, #1
 8017f74:	d004      	beq.n	8017f80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017f76:	6839      	ldr	r1, [r7, #0]
 8017f78:	6878      	ldr	r0, [r7, #4]
 8017f7a:	f000 f8cd 	bl	8018118 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017f7e:	e022      	b.n	8017fc6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017f86:	2b02      	cmp	r3, #2
 8017f88:	dc02      	bgt.n	8017f90 <USBD_GetConfig+0x2c>
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	dc03      	bgt.n	8017f96 <USBD_GetConfig+0x32>
 8017f8e:	e015      	b.n	8017fbc <USBD_GetConfig+0x58>
 8017f90:	2b03      	cmp	r3, #3
 8017f92:	d00b      	beq.n	8017fac <USBD_GetConfig+0x48>
 8017f94:	e012      	b.n	8017fbc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	2200      	movs	r2, #0
 8017f9a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	3308      	adds	r3, #8
 8017fa0:	2201      	movs	r2, #1
 8017fa2:	4619      	mov	r1, r3
 8017fa4:	6878      	ldr	r0, [r7, #4]
 8017fa6:	f000 f922 	bl	80181ee <USBD_CtlSendData>
        break;
 8017faa:	e00c      	b.n	8017fc6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	3304      	adds	r3, #4
 8017fb0:	2201      	movs	r2, #1
 8017fb2:	4619      	mov	r1, r3
 8017fb4:	6878      	ldr	r0, [r7, #4]
 8017fb6:	f000 f91a 	bl	80181ee <USBD_CtlSendData>
        break;
 8017fba:	e004      	b.n	8017fc6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8017fbc:	6839      	ldr	r1, [r7, #0]
 8017fbe:	6878      	ldr	r0, [r7, #4]
 8017fc0:	f000 f8aa 	bl	8018118 <USBD_CtlError>
        break;
 8017fc4:	bf00      	nop
}
 8017fc6:	bf00      	nop
 8017fc8:	3708      	adds	r7, #8
 8017fca:	46bd      	mov	sp, r7
 8017fcc:	bd80      	pop	{r7, pc}

08017fce <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017fce:	b580      	push	{r7, lr}
 8017fd0:	b082      	sub	sp, #8
 8017fd2:	af00      	add	r7, sp, #0
 8017fd4:	6078      	str	r0, [r7, #4]
 8017fd6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017fde:	3b01      	subs	r3, #1
 8017fe0:	2b02      	cmp	r3, #2
 8017fe2:	d81e      	bhi.n	8018022 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017fe4:	683b      	ldr	r3, [r7, #0]
 8017fe6:	88db      	ldrh	r3, [r3, #6]
 8017fe8:	2b02      	cmp	r3, #2
 8017fea:	d004      	beq.n	8017ff6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8017fec:	6839      	ldr	r1, [r7, #0]
 8017fee:	6878      	ldr	r0, [r7, #4]
 8017ff0:	f000 f892 	bl	8018118 <USBD_CtlError>
        break;
 8017ff4:	e01a      	b.n	801802c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	2201      	movs	r2, #1
 8017ffa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8018002:	2b00      	cmp	r3, #0
 8018004:	d005      	beq.n	8018012 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	68db      	ldr	r3, [r3, #12]
 801800a:	f043 0202 	orr.w	r2, r3, #2
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	330c      	adds	r3, #12
 8018016:	2202      	movs	r2, #2
 8018018:	4619      	mov	r1, r3
 801801a:	6878      	ldr	r0, [r7, #4]
 801801c:	f000 f8e7 	bl	80181ee <USBD_CtlSendData>
      break;
 8018020:	e004      	b.n	801802c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8018022:	6839      	ldr	r1, [r7, #0]
 8018024:	6878      	ldr	r0, [r7, #4]
 8018026:	f000 f877 	bl	8018118 <USBD_CtlError>
      break;
 801802a:	bf00      	nop
  }
}
 801802c:	bf00      	nop
 801802e:	3708      	adds	r7, #8
 8018030:	46bd      	mov	sp, r7
 8018032:	bd80      	pop	{r7, pc}

08018034 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8018034:	b580      	push	{r7, lr}
 8018036:	b082      	sub	sp, #8
 8018038:	af00      	add	r7, sp, #0
 801803a:	6078      	str	r0, [r7, #4]
 801803c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801803e:	683b      	ldr	r3, [r7, #0]
 8018040:	885b      	ldrh	r3, [r3, #2]
 8018042:	2b01      	cmp	r3, #1
 8018044:	d106      	bne.n	8018054 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	2201      	movs	r2, #1
 801804a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 801804e:	6878      	ldr	r0, [r7, #4]
 8018050:	f000 f90d 	bl	801826e <USBD_CtlSendStatus>
  }
}
 8018054:	bf00      	nop
 8018056:	3708      	adds	r7, #8
 8018058:	46bd      	mov	sp, r7
 801805a:	bd80      	pop	{r7, pc}

0801805c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801805c:	b580      	push	{r7, lr}
 801805e:	b082      	sub	sp, #8
 8018060:	af00      	add	r7, sp, #0
 8018062:	6078      	str	r0, [r7, #4]
 8018064:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801806c:	3b01      	subs	r3, #1
 801806e:	2b02      	cmp	r3, #2
 8018070:	d80b      	bhi.n	801808a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018072:	683b      	ldr	r3, [r7, #0]
 8018074:	885b      	ldrh	r3, [r3, #2]
 8018076:	2b01      	cmp	r3, #1
 8018078:	d10c      	bne.n	8018094 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	2200      	movs	r2, #0
 801807e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8018082:	6878      	ldr	r0, [r7, #4]
 8018084:	f000 f8f3 	bl	801826e <USBD_CtlSendStatus>
      }
      break;
 8018088:	e004      	b.n	8018094 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801808a:	6839      	ldr	r1, [r7, #0]
 801808c:	6878      	ldr	r0, [r7, #4]
 801808e:	f000 f843 	bl	8018118 <USBD_CtlError>
      break;
 8018092:	e000      	b.n	8018096 <USBD_ClrFeature+0x3a>
      break;
 8018094:	bf00      	nop
  }
}
 8018096:	bf00      	nop
 8018098:	3708      	adds	r7, #8
 801809a:	46bd      	mov	sp, r7
 801809c:	bd80      	pop	{r7, pc}

0801809e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801809e:	b480      	push	{r7}
 80180a0:	b083      	sub	sp, #12
 80180a2:	af00      	add	r7, sp, #0
 80180a4:	6078      	str	r0, [r7, #4]
 80180a6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80180a8:	683b      	ldr	r3, [r7, #0]
 80180aa:	781a      	ldrb	r2, [r3, #0]
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80180b0:	683b      	ldr	r3, [r7, #0]
 80180b2:	785a      	ldrb	r2, [r3, #1]
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80180b8:	683b      	ldr	r3, [r7, #0]
 80180ba:	3302      	adds	r3, #2
 80180bc:	781b      	ldrb	r3, [r3, #0]
 80180be:	b29a      	uxth	r2, r3
 80180c0:	683b      	ldr	r3, [r7, #0]
 80180c2:	3303      	adds	r3, #3
 80180c4:	781b      	ldrb	r3, [r3, #0]
 80180c6:	b29b      	uxth	r3, r3
 80180c8:	021b      	lsls	r3, r3, #8
 80180ca:	b29b      	uxth	r3, r3
 80180cc:	4413      	add	r3, r2
 80180ce:	b29a      	uxth	r2, r3
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80180d4:	683b      	ldr	r3, [r7, #0]
 80180d6:	3304      	adds	r3, #4
 80180d8:	781b      	ldrb	r3, [r3, #0]
 80180da:	b29a      	uxth	r2, r3
 80180dc:	683b      	ldr	r3, [r7, #0]
 80180de:	3305      	adds	r3, #5
 80180e0:	781b      	ldrb	r3, [r3, #0]
 80180e2:	b29b      	uxth	r3, r3
 80180e4:	021b      	lsls	r3, r3, #8
 80180e6:	b29b      	uxth	r3, r3
 80180e8:	4413      	add	r3, r2
 80180ea:	b29a      	uxth	r2, r3
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80180f0:	683b      	ldr	r3, [r7, #0]
 80180f2:	3306      	adds	r3, #6
 80180f4:	781b      	ldrb	r3, [r3, #0]
 80180f6:	b29a      	uxth	r2, r3
 80180f8:	683b      	ldr	r3, [r7, #0]
 80180fa:	3307      	adds	r3, #7
 80180fc:	781b      	ldrb	r3, [r3, #0]
 80180fe:	b29b      	uxth	r3, r3
 8018100:	021b      	lsls	r3, r3, #8
 8018102:	b29b      	uxth	r3, r3
 8018104:	4413      	add	r3, r2
 8018106:	b29a      	uxth	r2, r3
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	80da      	strh	r2, [r3, #6]

}
 801810c:	bf00      	nop
 801810e:	370c      	adds	r7, #12
 8018110:	46bd      	mov	sp, r7
 8018112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018116:	4770      	bx	lr

08018118 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8018118:	b580      	push	{r7, lr}
 801811a:	b082      	sub	sp, #8
 801811c:	af00      	add	r7, sp, #0
 801811e:	6078      	str	r0, [r7, #4]
 8018120:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8018122:	2180      	movs	r1, #128	; 0x80
 8018124:	6878      	ldr	r0, [r7, #4]
 8018126:	f000 fc0a 	bl	801893e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801812a:	2100      	movs	r1, #0
 801812c:	6878      	ldr	r0, [r7, #4]
 801812e:	f000 fc06 	bl	801893e <USBD_LL_StallEP>
}
 8018132:	bf00      	nop
 8018134:	3708      	adds	r7, #8
 8018136:	46bd      	mov	sp, r7
 8018138:	bd80      	pop	{r7, pc}

0801813a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801813a:	b580      	push	{r7, lr}
 801813c:	b086      	sub	sp, #24
 801813e:	af00      	add	r7, sp, #0
 8018140:	60f8      	str	r0, [r7, #12]
 8018142:	60b9      	str	r1, [r7, #8]
 8018144:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8018146:	2300      	movs	r3, #0
 8018148:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 801814a:	68fb      	ldr	r3, [r7, #12]
 801814c:	2b00      	cmp	r3, #0
 801814e:	d032      	beq.n	80181b6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8018150:	68f8      	ldr	r0, [r7, #12]
 8018152:	f000 f834 	bl	80181be <USBD_GetLen>
 8018156:	4603      	mov	r3, r0
 8018158:	3301      	adds	r3, #1
 801815a:	b29b      	uxth	r3, r3
 801815c:	005b      	lsls	r3, r3, #1
 801815e:	b29a      	uxth	r2, r3
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8018164:	7dfb      	ldrb	r3, [r7, #23]
 8018166:	1c5a      	adds	r2, r3, #1
 8018168:	75fa      	strb	r2, [r7, #23]
 801816a:	461a      	mov	r2, r3
 801816c:	68bb      	ldr	r3, [r7, #8]
 801816e:	4413      	add	r3, r2
 8018170:	687a      	ldr	r2, [r7, #4]
 8018172:	7812      	ldrb	r2, [r2, #0]
 8018174:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8018176:	7dfb      	ldrb	r3, [r7, #23]
 8018178:	1c5a      	adds	r2, r3, #1
 801817a:	75fa      	strb	r2, [r7, #23]
 801817c:	461a      	mov	r2, r3
 801817e:	68bb      	ldr	r3, [r7, #8]
 8018180:	4413      	add	r3, r2
 8018182:	2203      	movs	r2, #3
 8018184:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8018186:	e012      	b.n	80181ae <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	1c5a      	adds	r2, r3, #1
 801818c:	60fa      	str	r2, [r7, #12]
 801818e:	7dfa      	ldrb	r2, [r7, #23]
 8018190:	1c51      	adds	r1, r2, #1
 8018192:	75f9      	strb	r1, [r7, #23]
 8018194:	4611      	mov	r1, r2
 8018196:	68ba      	ldr	r2, [r7, #8]
 8018198:	440a      	add	r2, r1
 801819a:	781b      	ldrb	r3, [r3, #0]
 801819c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801819e:	7dfb      	ldrb	r3, [r7, #23]
 80181a0:	1c5a      	adds	r2, r3, #1
 80181a2:	75fa      	strb	r2, [r7, #23]
 80181a4:	461a      	mov	r2, r3
 80181a6:	68bb      	ldr	r3, [r7, #8]
 80181a8:	4413      	add	r3, r2
 80181aa:	2200      	movs	r2, #0
 80181ac:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80181ae:	68fb      	ldr	r3, [r7, #12]
 80181b0:	781b      	ldrb	r3, [r3, #0]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d1e8      	bne.n	8018188 <USBD_GetString+0x4e>
    }
  }
}
 80181b6:	bf00      	nop
 80181b8:	3718      	adds	r7, #24
 80181ba:	46bd      	mov	sp, r7
 80181bc:	bd80      	pop	{r7, pc}

080181be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80181be:	b480      	push	{r7}
 80181c0:	b085      	sub	sp, #20
 80181c2:	af00      	add	r7, sp, #0
 80181c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80181c6:	2300      	movs	r3, #0
 80181c8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80181ca:	e005      	b.n	80181d8 <USBD_GetLen+0x1a>
  {
    len++;
 80181cc:	7bfb      	ldrb	r3, [r7, #15]
 80181ce:	3301      	adds	r3, #1
 80181d0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	3301      	adds	r3, #1
 80181d6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	781b      	ldrb	r3, [r3, #0]
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d1f5      	bne.n	80181cc <USBD_GetLen+0xe>
  }

  return len;
 80181e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80181e2:	4618      	mov	r0, r3
 80181e4:	3714      	adds	r7, #20
 80181e6:	46bd      	mov	sp, r7
 80181e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ec:	4770      	bx	lr

080181ee <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80181ee:	b580      	push	{r7, lr}
 80181f0:	b084      	sub	sp, #16
 80181f2:	af00      	add	r7, sp, #0
 80181f4:	60f8      	str	r0, [r7, #12]
 80181f6:	60b9      	str	r1, [r7, #8]
 80181f8:	4613      	mov	r3, r2
 80181fa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80181fc:	68fb      	ldr	r3, [r7, #12]
 80181fe:	2202      	movs	r2, #2
 8018200:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8018204:	88fa      	ldrh	r2, [r7, #6]
 8018206:	68fb      	ldr	r3, [r7, #12]
 8018208:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801820a:	88fa      	ldrh	r2, [r7, #6]
 801820c:	68fb      	ldr	r3, [r7, #12]
 801820e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018210:	88fb      	ldrh	r3, [r7, #6]
 8018212:	68ba      	ldr	r2, [r7, #8]
 8018214:	2100      	movs	r1, #0
 8018216:	68f8      	ldr	r0, [r7, #12]
 8018218:	f000 fc1a 	bl	8018a50 <USBD_LL_Transmit>

  return USBD_OK;
 801821c:	2300      	movs	r3, #0
}
 801821e:	4618      	mov	r0, r3
 8018220:	3710      	adds	r7, #16
 8018222:	46bd      	mov	sp, r7
 8018224:	bd80      	pop	{r7, pc}

08018226 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8018226:	b580      	push	{r7, lr}
 8018228:	b084      	sub	sp, #16
 801822a:	af00      	add	r7, sp, #0
 801822c:	60f8      	str	r0, [r7, #12]
 801822e:	60b9      	str	r1, [r7, #8]
 8018230:	4613      	mov	r3, r2
 8018232:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018234:	88fb      	ldrh	r3, [r7, #6]
 8018236:	68ba      	ldr	r2, [r7, #8]
 8018238:	2100      	movs	r1, #0
 801823a:	68f8      	ldr	r0, [r7, #12]
 801823c:	f000 fc08 	bl	8018a50 <USBD_LL_Transmit>

  return USBD_OK;
 8018240:	2300      	movs	r3, #0
}
 8018242:	4618      	mov	r0, r3
 8018244:	3710      	adds	r7, #16
 8018246:	46bd      	mov	sp, r7
 8018248:	bd80      	pop	{r7, pc}

0801824a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801824a:	b580      	push	{r7, lr}
 801824c:	b084      	sub	sp, #16
 801824e:	af00      	add	r7, sp, #0
 8018250:	60f8      	str	r0, [r7, #12]
 8018252:	60b9      	str	r1, [r7, #8]
 8018254:	4613      	mov	r3, r2
 8018256:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8018258:	88fb      	ldrh	r3, [r7, #6]
 801825a:	68ba      	ldr	r2, [r7, #8]
 801825c:	2100      	movs	r1, #0
 801825e:	68f8      	ldr	r0, [r7, #12]
 8018260:	f000 fc19 	bl	8018a96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018264:	2300      	movs	r3, #0
}
 8018266:	4618      	mov	r0, r3
 8018268:	3710      	adds	r7, #16
 801826a:	46bd      	mov	sp, r7
 801826c:	bd80      	pop	{r7, pc}

0801826e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801826e:	b580      	push	{r7, lr}
 8018270:	b082      	sub	sp, #8
 8018272:	af00      	add	r7, sp, #0
 8018274:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	2204      	movs	r2, #4
 801827a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801827e:	2300      	movs	r3, #0
 8018280:	2200      	movs	r2, #0
 8018282:	2100      	movs	r1, #0
 8018284:	6878      	ldr	r0, [r7, #4]
 8018286:	f000 fbe3 	bl	8018a50 <USBD_LL_Transmit>

  return USBD_OK;
 801828a:	2300      	movs	r3, #0
}
 801828c:	4618      	mov	r0, r3
 801828e:	3708      	adds	r7, #8
 8018290:	46bd      	mov	sp, r7
 8018292:	bd80      	pop	{r7, pc}

08018294 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8018294:	b580      	push	{r7, lr}
 8018296:	b082      	sub	sp, #8
 8018298:	af00      	add	r7, sp, #0
 801829a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	2205      	movs	r2, #5
 80182a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80182a4:	2300      	movs	r3, #0
 80182a6:	2200      	movs	r2, #0
 80182a8:	2100      	movs	r1, #0
 80182aa:	6878      	ldr	r0, [r7, #4]
 80182ac:	f000 fbf3 	bl	8018a96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80182b0:	2300      	movs	r3, #0
}
 80182b2:	4618      	mov	r0, r3
 80182b4:	3708      	adds	r7, #8
 80182b6:	46bd      	mov	sp, r7
 80182b8:	bd80      	pop	{r7, pc}
	...

080182bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80182bc:	b580      	push	{r7, lr}
 80182be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80182c0:	2200      	movs	r2, #0
 80182c2:	4912      	ldr	r1, [pc, #72]	; (801830c <MX_USB_DEVICE_Init+0x50>)
 80182c4:	4812      	ldr	r0, [pc, #72]	; (8018310 <MX_USB_DEVICE_Init+0x54>)
 80182c6:	f7fe ff76 	bl	80171b6 <USBD_Init>
 80182ca:	4603      	mov	r3, r0
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d001      	beq.n	80182d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80182d0:	f7f8 f844 	bl	801035c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80182d4:	490f      	ldr	r1, [pc, #60]	; (8018314 <MX_USB_DEVICE_Init+0x58>)
 80182d6:	480e      	ldr	r0, [pc, #56]	; (8018310 <MX_USB_DEVICE_Init+0x54>)
 80182d8:	f7fe ff98 	bl	801720c <USBD_RegisterClass>
 80182dc:	4603      	mov	r3, r0
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d001      	beq.n	80182e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80182e2:	f7f8 f83b 	bl	801035c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80182e6:	490c      	ldr	r1, [pc, #48]	; (8018318 <MX_USB_DEVICE_Init+0x5c>)
 80182e8:	4809      	ldr	r0, [pc, #36]	; (8018310 <MX_USB_DEVICE_Init+0x54>)
 80182ea:	f7fd ff3d 	bl	8016168 <USBD_MSC_RegisterStorage>
 80182ee:	4603      	mov	r3, r0
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d001      	beq.n	80182f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80182f4:	f7f8 f832 	bl	801035c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80182f8:	4805      	ldr	r0, [pc, #20]	; (8018310 <MX_USB_DEVICE_Init+0x54>)
 80182fa:	f7fe ffa1 	bl	8017240 <USBD_Start>
 80182fe:	4603      	mov	r3, r0
 8018300:	2b00      	cmp	r3, #0
 8018302:	d001      	beq.n	8018308 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018304:	f7f8 f82a 	bl	801035c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018308:	bf00      	nop
 801830a:	bd80      	pop	{r7, pc}
 801830c:	200000b0 	.word	0x200000b0
 8018310:	200003b4 	.word	0x200003b4
 8018314:	2000000c 	.word	0x2000000c
 8018318:	20000100 	.word	0x20000100

0801831c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801831c:	b480      	push	{r7}
 801831e:	b083      	sub	sp, #12
 8018320:	af00      	add	r7, sp, #0
 8018322:	4603      	mov	r3, r0
 8018324:	6039      	str	r1, [r7, #0]
 8018326:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018328:	683b      	ldr	r3, [r7, #0]
 801832a:	2212      	movs	r2, #18
 801832c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801832e:	4b03      	ldr	r3, [pc, #12]	; (801833c <USBD_FS_DeviceDescriptor+0x20>)
}
 8018330:	4618      	mov	r0, r3
 8018332:	370c      	adds	r7, #12
 8018334:	46bd      	mov	sp, r7
 8018336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801833a:	4770      	bx	lr
 801833c:	200000cc 	.word	0x200000cc

08018340 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018340:	b480      	push	{r7}
 8018342:	b083      	sub	sp, #12
 8018344:	af00      	add	r7, sp, #0
 8018346:	4603      	mov	r3, r0
 8018348:	6039      	str	r1, [r7, #0]
 801834a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801834c:	683b      	ldr	r3, [r7, #0]
 801834e:	2204      	movs	r2, #4
 8018350:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018352:	4b03      	ldr	r3, [pc, #12]	; (8018360 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018354:	4618      	mov	r0, r3
 8018356:	370c      	adds	r7, #12
 8018358:	46bd      	mov	sp, r7
 801835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801835e:	4770      	bx	lr
 8018360:	200000e0 	.word	0x200000e0

08018364 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018364:	b580      	push	{r7, lr}
 8018366:	b082      	sub	sp, #8
 8018368:	af00      	add	r7, sp, #0
 801836a:	4603      	mov	r3, r0
 801836c:	6039      	str	r1, [r7, #0]
 801836e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018370:	79fb      	ldrb	r3, [r7, #7]
 8018372:	2b00      	cmp	r3, #0
 8018374:	d105      	bne.n	8018382 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018376:	683a      	ldr	r2, [r7, #0]
 8018378:	4907      	ldr	r1, [pc, #28]	; (8018398 <USBD_FS_ProductStrDescriptor+0x34>)
 801837a:	4808      	ldr	r0, [pc, #32]	; (801839c <USBD_FS_ProductStrDescriptor+0x38>)
 801837c:	f7ff fedd 	bl	801813a <USBD_GetString>
 8018380:	e004      	b.n	801838c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018382:	683a      	ldr	r2, [r7, #0]
 8018384:	4904      	ldr	r1, [pc, #16]	; (8018398 <USBD_FS_ProductStrDescriptor+0x34>)
 8018386:	4805      	ldr	r0, [pc, #20]	; (801839c <USBD_FS_ProductStrDescriptor+0x38>)
 8018388:	f7ff fed7 	bl	801813a <USBD_GetString>
  }
  return USBD_StrDesc;
 801838c:	4b02      	ldr	r3, [pc, #8]	; (8018398 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801838e:	4618      	mov	r0, r3
 8018390:	3708      	adds	r7, #8
 8018392:	46bd      	mov	sp, r7
 8018394:	bd80      	pop	{r7, pc}
 8018396:	bf00      	nop
 8018398:	20000678 	.word	0x20000678
 801839c:	08018c30 	.word	0x08018c30

080183a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80183a0:	b580      	push	{r7, lr}
 80183a2:	b082      	sub	sp, #8
 80183a4:	af00      	add	r7, sp, #0
 80183a6:	4603      	mov	r3, r0
 80183a8:	6039      	str	r1, [r7, #0]
 80183aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80183ac:	683a      	ldr	r2, [r7, #0]
 80183ae:	4904      	ldr	r1, [pc, #16]	; (80183c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80183b0:	4804      	ldr	r0, [pc, #16]	; (80183c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80183b2:	f7ff fec2 	bl	801813a <USBD_GetString>
  return USBD_StrDesc;
 80183b6:	4b02      	ldr	r3, [pc, #8]	; (80183c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80183b8:	4618      	mov	r0, r3
 80183ba:	3708      	adds	r7, #8
 80183bc:	46bd      	mov	sp, r7
 80183be:	bd80      	pop	{r7, pc}
 80183c0:	20000678 	.word	0x20000678
 80183c4:	08018c44 	.word	0x08018c44

080183c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80183c8:	b580      	push	{r7, lr}
 80183ca:	b082      	sub	sp, #8
 80183cc:	af00      	add	r7, sp, #0
 80183ce:	4603      	mov	r3, r0
 80183d0:	6039      	str	r1, [r7, #0]
 80183d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80183d4:	683b      	ldr	r3, [r7, #0]
 80183d6:	221a      	movs	r2, #26
 80183d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80183da:	f000 f843 	bl	8018464 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80183de:	4b02      	ldr	r3, [pc, #8]	; (80183e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80183e0:	4618      	mov	r0, r3
 80183e2:	3708      	adds	r7, #8
 80183e4:	46bd      	mov	sp, r7
 80183e6:	bd80      	pop	{r7, pc}
 80183e8:	200000e4 	.word	0x200000e4

080183ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80183ec:	b580      	push	{r7, lr}
 80183ee:	b082      	sub	sp, #8
 80183f0:	af00      	add	r7, sp, #0
 80183f2:	4603      	mov	r3, r0
 80183f4:	6039      	str	r1, [r7, #0]
 80183f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80183f8:	79fb      	ldrb	r3, [r7, #7]
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d105      	bne.n	801840a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80183fe:	683a      	ldr	r2, [r7, #0]
 8018400:	4907      	ldr	r1, [pc, #28]	; (8018420 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018402:	4808      	ldr	r0, [pc, #32]	; (8018424 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018404:	f7ff fe99 	bl	801813a <USBD_GetString>
 8018408:	e004      	b.n	8018414 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801840a:	683a      	ldr	r2, [r7, #0]
 801840c:	4904      	ldr	r1, [pc, #16]	; (8018420 <USBD_FS_ConfigStrDescriptor+0x34>)
 801840e:	4805      	ldr	r0, [pc, #20]	; (8018424 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018410:	f7ff fe93 	bl	801813a <USBD_GetString>
  }
  return USBD_StrDesc;
 8018414:	4b02      	ldr	r3, [pc, #8]	; (8018420 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018416:	4618      	mov	r0, r3
 8018418:	3708      	adds	r7, #8
 801841a:	46bd      	mov	sp, r7
 801841c:	bd80      	pop	{r7, pc}
 801841e:	bf00      	nop
 8018420:	20000678 	.word	0x20000678
 8018424:	08018c58 	.word	0x08018c58

08018428 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018428:	b580      	push	{r7, lr}
 801842a:	b082      	sub	sp, #8
 801842c:	af00      	add	r7, sp, #0
 801842e:	4603      	mov	r3, r0
 8018430:	6039      	str	r1, [r7, #0]
 8018432:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018434:	79fb      	ldrb	r3, [r7, #7]
 8018436:	2b00      	cmp	r3, #0
 8018438:	d105      	bne.n	8018446 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801843a:	683a      	ldr	r2, [r7, #0]
 801843c:	4907      	ldr	r1, [pc, #28]	; (801845c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801843e:	4808      	ldr	r0, [pc, #32]	; (8018460 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018440:	f7ff fe7b 	bl	801813a <USBD_GetString>
 8018444:	e004      	b.n	8018450 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018446:	683a      	ldr	r2, [r7, #0]
 8018448:	4904      	ldr	r1, [pc, #16]	; (801845c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801844a:	4805      	ldr	r0, [pc, #20]	; (8018460 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801844c:	f7ff fe75 	bl	801813a <USBD_GetString>
  }
  return USBD_StrDesc;
 8018450:	4b02      	ldr	r3, [pc, #8]	; (801845c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018452:	4618      	mov	r0, r3
 8018454:	3708      	adds	r7, #8
 8018456:	46bd      	mov	sp, r7
 8018458:	bd80      	pop	{r7, pc}
 801845a:	bf00      	nop
 801845c:	20000678 	.word	0x20000678
 8018460:	08018c64 	.word	0x08018c64

08018464 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018464:	b580      	push	{r7, lr}
 8018466:	b084      	sub	sp, #16
 8018468:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801846a:	4b0f      	ldr	r3, [pc, #60]	; (80184a8 <Get_SerialNum+0x44>)
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018470:	4b0e      	ldr	r3, [pc, #56]	; (80184ac <Get_SerialNum+0x48>)
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018476:	4b0e      	ldr	r3, [pc, #56]	; (80184b0 <Get_SerialNum+0x4c>)
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801847c:	68fa      	ldr	r2, [r7, #12]
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	4413      	add	r3, r2
 8018482:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018484:	68fb      	ldr	r3, [r7, #12]
 8018486:	2b00      	cmp	r3, #0
 8018488:	d009      	beq.n	801849e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801848a:	2208      	movs	r2, #8
 801848c:	4909      	ldr	r1, [pc, #36]	; (80184b4 <Get_SerialNum+0x50>)
 801848e:	68f8      	ldr	r0, [r7, #12]
 8018490:	f000 f814 	bl	80184bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018494:	2204      	movs	r2, #4
 8018496:	4908      	ldr	r1, [pc, #32]	; (80184b8 <Get_SerialNum+0x54>)
 8018498:	68b8      	ldr	r0, [r7, #8]
 801849a:	f000 f80f 	bl	80184bc <IntToUnicode>
  }
}
 801849e:	bf00      	nop
 80184a0:	3710      	adds	r7, #16
 80184a2:	46bd      	mov	sp, r7
 80184a4:	bd80      	pop	{r7, pc}
 80184a6:	bf00      	nop
 80184a8:	1ffff7ac 	.word	0x1ffff7ac
 80184ac:	1ffff7b0 	.word	0x1ffff7b0
 80184b0:	1ffff7b4 	.word	0x1ffff7b4
 80184b4:	200000e6 	.word	0x200000e6
 80184b8:	200000f6 	.word	0x200000f6

080184bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80184bc:	b480      	push	{r7}
 80184be:	b087      	sub	sp, #28
 80184c0:	af00      	add	r7, sp, #0
 80184c2:	60f8      	str	r0, [r7, #12]
 80184c4:	60b9      	str	r1, [r7, #8]
 80184c6:	4613      	mov	r3, r2
 80184c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80184ca:	2300      	movs	r3, #0
 80184cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80184ce:	2300      	movs	r3, #0
 80184d0:	75fb      	strb	r3, [r7, #23]
 80184d2:	e027      	b.n	8018524 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	0f1b      	lsrs	r3, r3, #28
 80184d8:	2b09      	cmp	r3, #9
 80184da:	d80b      	bhi.n	80184f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	0f1b      	lsrs	r3, r3, #28
 80184e0:	b2da      	uxtb	r2, r3
 80184e2:	7dfb      	ldrb	r3, [r7, #23]
 80184e4:	005b      	lsls	r3, r3, #1
 80184e6:	4619      	mov	r1, r3
 80184e8:	68bb      	ldr	r3, [r7, #8]
 80184ea:	440b      	add	r3, r1
 80184ec:	3230      	adds	r2, #48	; 0x30
 80184ee:	b2d2      	uxtb	r2, r2
 80184f0:	701a      	strb	r2, [r3, #0]
 80184f2:	e00a      	b.n	801850a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80184f4:	68fb      	ldr	r3, [r7, #12]
 80184f6:	0f1b      	lsrs	r3, r3, #28
 80184f8:	b2da      	uxtb	r2, r3
 80184fa:	7dfb      	ldrb	r3, [r7, #23]
 80184fc:	005b      	lsls	r3, r3, #1
 80184fe:	4619      	mov	r1, r3
 8018500:	68bb      	ldr	r3, [r7, #8]
 8018502:	440b      	add	r3, r1
 8018504:	3237      	adds	r2, #55	; 0x37
 8018506:	b2d2      	uxtb	r2, r2
 8018508:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	011b      	lsls	r3, r3, #4
 801850e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018510:	7dfb      	ldrb	r3, [r7, #23]
 8018512:	005b      	lsls	r3, r3, #1
 8018514:	3301      	adds	r3, #1
 8018516:	68ba      	ldr	r2, [r7, #8]
 8018518:	4413      	add	r3, r2
 801851a:	2200      	movs	r2, #0
 801851c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801851e:	7dfb      	ldrb	r3, [r7, #23]
 8018520:	3301      	adds	r3, #1
 8018522:	75fb      	strb	r3, [r7, #23]
 8018524:	7dfa      	ldrb	r2, [r7, #23]
 8018526:	79fb      	ldrb	r3, [r7, #7]
 8018528:	429a      	cmp	r2, r3
 801852a:	d3d3      	bcc.n	80184d4 <IntToUnicode+0x18>
  }
}
 801852c:	bf00      	nop
 801852e:	bf00      	nop
 8018530:	371c      	adds	r7, #28
 8018532:	46bd      	mov	sp, r7
 8018534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018538:	4770      	bx	lr

0801853a <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801853a:	b480      	push	{r7}
 801853c:	b083      	sub	sp, #12
 801853e:	af00      	add	r7, sp, #0
 8018540:	4603      	mov	r3, r0
 8018542:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8018544:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8018546:	4618      	mov	r0, r3
 8018548:	370c      	adds	r7, #12
 801854a:	46bd      	mov	sp, r7
 801854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018550:	4770      	bx	lr

08018552 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8018552:	b480      	push	{r7}
 8018554:	b085      	sub	sp, #20
 8018556:	af00      	add	r7, sp, #0
 8018558:	4603      	mov	r3, r0
 801855a:	60b9      	str	r1, [r7, #8]
 801855c:	607a      	str	r2, [r7, #4]
 801855e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8018560:	68bb      	ldr	r3, [r7, #8]
 8018562:	2280      	movs	r2, #128	; 0x80
 8018564:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	f44f 7200 	mov.w	r2, #512	; 0x200
 801856c:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 801856e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018570:	4618      	mov	r0, r3
 8018572:	3714      	adds	r7, #20
 8018574:	46bd      	mov	sp, r7
 8018576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801857a:	4770      	bx	lr

0801857c <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801857c:	b480      	push	{r7}
 801857e:	b083      	sub	sp, #12
 8018580:	af00      	add	r7, sp, #0
 8018582:	4603      	mov	r3, r0
 8018584:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018586:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018588:	4618      	mov	r0, r3
 801858a:	370c      	adds	r7, #12
 801858c:	46bd      	mov	sp, r7
 801858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018592:	4770      	bx	lr

08018594 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8018594:	b480      	push	{r7}
 8018596:	b083      	sub	sp, #12
 8018598:	af00      	add	r7, sp, #0
 801859a:	4603      	mov	r3, r0
 801859c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801859e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80185a0:	4618      	mov	r0, r3
 80185a2:	370c      	adds	r7, #12
 80185a4:	46bd      	mov	sp, r7
 80185a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185aa:	4770      	bx	lr

080185ac <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80185ac:	b580      	push	{r7, lr}
 80185ae:	b084      	sub	sp, #16
 80185b0:	af00      	add	r7, sp, #0
 80185b2:	60b9      	str	r1, [r7, #8]
 80185b4:	607a      	str	r2, [r7, #4]
 80185b6:	461a      	mov	r2, r3
 80185b8:	4603      	mov	r3, r0
 80185ba:	73fb      	strb	r3, [r7, #15]
 80185bc:	4613      	mov	r3, r2
 80185be:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	memcpy(buf, &flash_image_img[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	025b      	lsls	r3, r3, #9
 80185c4:	4a06      	ldr	r2, [pc, #24]	; (80185e0 <STORAGE_Read_FS+0x34>)
 80185c6:	1899      	adds	r1, r3, r2
 80185c8:	89bb      	ldrh	r3, [r7, #12]
 80185ca:	025b      	lsls	r3, r3, #9
 80185cc:	461a      	mov	r2, r3
 80185ce:	68b8      	ldr	r0, [r7, #8]
 80185d0:	f000 fb0c 	bl	8018bec <memcpy>
  return (USBD_OK);
 80185d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80185d6:	4618      	mov	r0, r3
 80185d8:	3710      	adds	r7, #16
 80185da:	46bd      	mov	sp, r7
 80185dc:	bd80      	pop	{r7, pc}
 80185de:	bf00      	nop
 80185e0:	08018c74 	.word	0x08018c74

080185e4 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80185e4:	b480      	push	{r7}
 80185e6:	b085      	sub	sp, #20
 80185e8:	af00      	add	r7, sp, #0
 80185ea:	60b9      	str	r1, [r7, #8]
 80185ec:	607a      	str	r2, [r7, #4]
 80185ee:	461a      	mov	r2, r3
 80185f0:	4603      	mov	r3, r0
 80185f2:	73fb      	strb	r3, [r7, #15]
 80185f4:	4613      	mov	r3, r2
 80185f6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	//memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);
  return (USBD_OK);
 80185f8:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80185fa:	4618      	mov	r0, r3
 80185fc:	3714      	adds	r7, #20
 80185fe:	46bd      	mov	sp, r7
 8018600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018604:	4770      	bx	lr

08018606 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8018606:	b480      	push	{r7}
 8018608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801860a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801860c:	4618      	mov	r0, r3
 801860e:	46bd      	mov	sp, r7
 8018610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018614:	4770      	bx	lr
	...

08018618 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018618:	b580      	push	{r7, lr}
 801861a:	b084      	sub	sp, #16
 801861c:	af00      	add	r7, sp, #0
 801861e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	4a0d      	ldr	r2, [pc, #52]	; (801865c <HAL_PCD_MspInit+0x44>)
 8018626:	4293      	cmp	r3, r2
 8018628:	d113      	bne.n	8018652 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801862a:	4b0d      	ldr	r3, [pc, #52]	; (8018660 <HAL_PCD_MspInit+0x48>)
 801862c:	69db      	ldr	r3, [r3, #28]
 801862e:	4a0c      	ldr	r2, [pc, #48]	; (8018660 <HAL_PCD_MspInit+0x48>)
 8018630:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8018634:	61d3      	str	r3, [r2, #28]
 8018636:	4b0a      	ldr	r3, [pc, #40]	; (8018660 <HAL_PCD_MspInit+0x48>)
 8018638:	69db      	ldr	r3, [r3, #28]
 801863a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801863e:	60fb      	str	r3, [r7, #12]
 8018640:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8018642:	2200      	movs	r2, #0
 8018644:	2100      	movs	r1, #0
 8018646:	2014      	movs	r0, #20
 8018648:	f7f8 f887 	bl	801075a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 801864c:	2014      	movs	r0, #20
 801864e:	f7f8 f8a0 	bl	8010792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8018652:	bf00      	nop
 8018654:	3710      	adds	r7, #16
 8018656:	46bd      	mov	sp, r7
 8018658:	bd80      	pop	{r7, pc}
 801865a:	bf00      	nop
 801865c:	40005c00 	.word	0x40005c00
 8018660:	40021000 	.word	0x40021000

08018664 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018664:	b580      	push	{r7, lr}
 8018666:	b082      	sub	sp, #8
 8018668:	af00      	add	r7, sp, #0
 801866a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	f8d3 22d0 	ldr.w	r2, [r3, #720]	; 0x2d0
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8018678:	4619      	mov	r1, r3
 801867a:	4610      	mov	r0, r2
 801867c:	f7fe fe29 	bl	80172d2 <USBD_LL_SetupStage>
}
 8018680:	bf00      	nop
 8018682:	3708      	adds	r7, #8
 8018684:	46bd      	mov	sp, r7
 8018686:	bd80      	pop	{r7, pc}

08018688 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018688:	b580      	push	{r7, lr}
 801868a:	b082      	sub	sp, #8
 801868c:	af00      	add	r7, sp, #0
 801868e:	6078      	str	r0, [r7, #4]
 8018690:	460b      	mov	r3, r1
 8018692:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	f8d3 02d0 	ldr.w	r0, [r3, #720]	; 0x2d0
 801869a:	78fa      	ldrb	r2, [r7, #3]
 801869c:	6879      	ldr	r1, [r7, #4]
 801869e:	4613      	mov	r3, r2
 80186a0:	009b      	lsls	r3, r3, #2
 80186a2:	4413      	add	r3, r2
 80186a4:	00db      	lsls	r3, r3, #3
 80186a6:	440b      	add	r3, r1
 80186a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80186ac:	681a      	ldr	r2, [r3, #0]
 80186ae:	78fb      	ldrb	r3, [r7, #3]
 80186b0:	4619      	mov	r1, r3
 80186b2:	f7fe fe5b 	bl	801736c <USBD_LL_DataOutStage>
}
 80186b6:	bf00      	nop
 80186b8:	3708      	adds	r7, #8
 80186ba:	46bd      	mov	sp, r7
 80186bc:	bd80      	pop	{r7, pc}

080186be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80186be:	b580      	push	{r7, lr}
 80186c0:	b082      	sub	sp, #8
 80186c2:	af00      	add	r7, sp, #0
 80186c4:	6078      	str	r0, [r7, #4]
 80186c6:	460b      	mov	r3, r1
 80186c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	f8d3 02d0 	ldr.w	r0, [r3, #720]	; 0x2d0
 80186d0:	78fa      	ldrb	r2, [r7, #3]
 80186d2:	6879      	ldr	r1, [r7, #4]
 80186d4:	4613      	mov	r3, r2
 80186d6:	009b      	lsls	r3, r3, #2
 80186d8:	4413      	add	r3, r2
 80186da:	00db      	lsls	r3, r3, #3
 80186dc:	440b      	add	r3, r1
 80186de:	3324      	adds	r3, #36	; 0x24
 80186e0:	681a      	ldr	r2, [r3, #0]
 80186e2:	78fb      	ldrb	r3, [r7, #3]
 80186e4:	4619      	mov	r1, r3
 80186e6:	f7fe feb2 	bl	801744e <USBD_LL_DataInStage>
}
 80186ea:	bf00      	nop
 80186ec:	3708      	adds	r7, #8
 80186ee:	46bd      	mov	sp, r7
 80186f0:	bd80      	pop	{r7, pc}

080186f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80186f2:	b580      	push	{r7, lr}
 80186f4:	b082      	sub	sp, #8
 80186f6:	af00      	add	r7, sp, #0
 80186f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8018700:	4618      	mov	r0, r3
 8018702:	f7fe ffc5 	bl	8017690 <USBD_LL_SOF>
}
 8018706:	bf00      	nop
 8018708:	3708      	adds	r7, #8
 801870a:	46bd      	mov	sp, r7
 801870c:	bd80      	pop	{r7, pc}

0801870e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801870e:	b580      	push	{r7, lr}
 8018710:	b084      	sub	sp, #16
 8018712:	af00      	add	r7, sp, #0
 8018714:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018716:	2301      	movs	r3, #1
 8018718:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	795b      	ldrb	r3, [r3, #5]
 801871e:	2b02      	cmp	r3, #2
 8018720:	d001      	beq.n	8018726 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8018722:	f7f7 fe1b 	bl	801035c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 801872c:	7bfa      	ldrb	r2, [r7, #15]
 801872e:	4611      	mov	r1, r2
 8018730:	4618      	mov	r0, r3
 8018732:	f7fe ff72 	bl	801761a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 801873c:	4618      	mov	r0, r3
 801873e:	f7fe ff2b 	bl	8017598 <USBD_LL_Reset>
}
 8018742:	bf00      	nop
 8018744:	3710      	adds	r7, #16
 8018746:	46bd      	mov	sp, r7
 8018748:	bd80      	pop	{r7, pc}
	...

0801874c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801874c:	b580      	push	{r7, lr}
 801874e:	b082      	sub	sp, #8
 8018750:	af00      	add	r7, sp, #0
 8018752:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 801875a:	4618      	mov	r0, r3
 801875c:	f7fe ff6d 	bl	801763a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	7a5b      	ldrb	r3, [r3, #9]
 8018764:	2b00      	cmp	r3, #0
 8018766:	d005      	beq.n	8018774 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018768:	4b04      	ldr	r3, [pc, #16]	; (801877c <HAL_PCD_SuspendCallback+0x30>)
 801876a:	691b      	ldr	r3, [r3, #16]
 801876c:	4a03      	ldr	r2, [pc, #12]	; (801877c <HAL_PCD_SuspendCallback+0x30>)
 801876e:	f043 0306 	orr.w	r3, r3, #6
 8018772:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018774:	bf00      	nop
 8018776:	3708      	adds	r7, #8
 8018778:	46bd      	mov	sp, r7
 801877a:	bd80      	pop	{r7, pc}
 801877c:	e000ed00 	.word	0xe000ed00

08018780 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018780:	b580      	push	{r7, lr}
 8018782:	b082      	sub	sp, #8
 8018784:	af00      	add	r7, sp, #0
 8018786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 801878e:	4618      	mov	r0, r3
 8018790:	f7fe ff68 	bl	8017664 <USBD_LL_Resume>
}
 8018794:	bf00      	nop
 8018796:	3708      	adds	r7, #8
 8018798:	46bd      	mov	sp, r7
 801879a:	bd80      	pop	{r7, pc}

0801879c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801879c:	b580      	push	{r7, lr}
 801879e:	b082      	sub	sp, #8
 80187a0:	af00      	add	r7, sp, #0
 80187a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80187a4:	4a24      	ldr	r2, [pc, #144]	; (8018838 <USBD_LL_Init+0x9c>)
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	f8c2 32d0 	str.w	r3, [r2, #720]	; 0x2d0
  pdev->pData = &hpcd_USB_FS;
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	4a22      	ldr	r2, [pc, #136]	; (8018838 <USBD_LL_Init+0x9c>)
 80187b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80187b4:	4b20      	ldr	r3, [pc, #128]	; (8018838 <USBD_LL_Init+0x9c>)
 80187b6:	4a21      	ldr	r2, [pc, #132]	; (801883c <USBD_LL_Init+0xa0>)
 80187b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80187ba:	4b1f      	ldr	r3, [pc, #124]	; (8018838 <USBD_LL_Init+0x9c>)
 80187bc:	2208      	movs	r2, #8
 80187be:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80187c0:	4b1d      	ldr	r3, [pc, #116]	; (8018838 <USBD_LL_Init+0x9c>)
 80187c2:	2202      	movs	r2, #2
 80187c4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80187c6:	4b1c      	ldr	r3, [pc, #112]	; (8018838 <USBD_LL_Init+0x9c>)
 80187c8:	2202      	movs	r2, #2
 80187ca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80187cc:	4b1a      	ldr	r3, [pc, #104]	; (8018838 <USBD_LL_Init+0x9c>)
 80187ce:	2200      	movs	r2, #0
 80187d0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80187d2:	4b19      	ldr	r3, [pc, #100]	; (8018838 <USBD_LL_Init+0x9c>)
 80187d4:	2200      	movs	r2, #0
 80187d6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80187d8:	4b17      	ldr	r3, [pc, #92]	; (8018838 <USBD_LL_Init+0x9c>)
 80187da:	2200      	movs	r2, #0
 80187dc:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80187de:	4816      	ldr	r0, [pc, #88]	; (8018838 <USBD_LL_Init+0x9c>)
 80187e0:	f7f8 f9ae 	bl	8010b40 <HAL_PCD_Init>
 80187e4:	4603      	mov	r3, r0
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d001      	beq.n	80187ee <USBD_LL_Init+0x52>
  {
    Error_Handler( );
 80187ea:	f7f7 fdb7 	bl	801035c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80187f4:	2318      	movs	r3, #24
 80187f6:	2200      	movs	r2, #0
 80187f8:	2100      	movs	r1, #0
 80187fa:	f7f9 fe3f 	bl	801247c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8018804:	2358      	movs	r3, #88	; 0x58
 8018806:	2200      	movs	r2, #0
 8018808:	2180      	movs	r1, #128	; 0x80
 801880a:	f7f9 fe37 	bl	801247c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8018814:	2398      	movs	r3, #152	; 0x98
 8018816:	2200      	movs	r2, #0
 8018818:	2181      	movs	r1, #129	; 0x81
 801881a:	f7f9 fe2f 	bl	801247c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8018824:	23d8      	movs	r3, #216	; 0xd8
 8018826:	2200      	movs	r2, #0
 8018828:	2101      	movs	r1, #1
 801882a:	f7f9 fe27 	bl	801247c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 801882e:	2300      	movs	r3, #0
}
 8018830:	4618      	mov	r0, r3
 8018832:	3708      	adds	r7, #8
 8018834:	46bd      	mov	sp, r7
 8018836:	bd80      	pop	{r7, pc}
 8018838:	20000878 	.word	0x20000878
 801883c:	40005c00 	.word	0x40005c00

08018840 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018840:	b580      	push	{r7, lr}
 8018842:	b084      	sub	sp, #16
 8018844:	af00      	add	r7, sp, #0
 8018846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018848:	2300      	movs	r3, #0
 801884a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801884c:	2300      	movs	r3, #0
 801884e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018856:	4618      	mov	r0, r3
 8018858:	f7f8 fa39 	bl	8010cce <HAL_PCD_Start>
 801885c:	4603      	mov	r3, r0
 801885e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018860:	7bfb      	ldrb	r3, [r7, #15]
 8018862:	4618      	mov	r0, r3
 8018864:	f000 f972 	bl	8018b4c <USBD_Get_USB_Status>
 8018868:	4603      	mov	r3, r0
 801886a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801886c:	7bbb      	ldrb	r3, [r7, #14]
}
 801886e:	4618      	mov	r0, r3
 8018870:	3710      	adds	r7, #16
 8018872:	46bd      	mov	sp, r7
 8018874:	bd80      	pop	{r7, pc}

08018876 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018876:	b580      	push	{r7, lr}
 8018878:	b084      	sub	sp, #16
 801887a:	af00      	add	r7, sp, #0
 801887c:	6078      	str	r0, [r7, #4]
 801887e:	4608      	mov	r0, r1
 8018880:	4611      	mov	r1, r2
 8018882:	461a      	mov	r2, r3
 8018884:	4603      	mov	r3, r0
 8018886:	70fb      	strb	r3, [r7, #3]
 8018888:	460b      	mov	r3, r1
 801888a:	70bb      	strb	r3, [r7, #2]
 801888c:	4613      	mov	r3, r2
 801888e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018890:	2300      	movs	r3, #0
 8018892:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018894:	2300      	movs	r3, #0
 8018896:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801889e:	78bb      	ldrb	r3, [r7, #2]
 80188a0:	883a      	ldrh	r2, [r7, #0]
 80188a2:	78f9      	ldrb	r1, [r7, #3]
 80188a4:	f7f8 fb31 	bl	8010f0a <HAL_PCD_EP_Open>
 80188a8:	4603      	mov	r3, r0
 80188aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80188ac:	7bfb      	ldrb	r3, [r7, #15]
 80188ae:	4618      	mov	r0, r3
 80188b0:	f000 f94c 	bl	8018b4c <USBD_Get_USB_Status>
 80188b4:	4603      	mov	r3, r0
 80188b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80188b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80188ba:	4618      	mov	r0, r3
 80188bc:	3710      	adds	r7, #16
 80188be:	46bd      	mov	sp, r7
 80188c0:	bd80      	pop	{r7, pc}

080188c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80188c2:	b580      	push	{r7, lr}
 80188c4:	b084      	sub	sp, #16
 80188c6:	af00      	add	r7, sp, #0
 80188c8:	6078      	str	r0, [r7, #4]
 80188ca:	460b      	mov	r3, r1
 80188cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80188ce:	2300      	movs	r3, #0
 80188d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80188d2:	2300      	movs	r3, #0
 80188d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80188dc:	78fa      	ldrb	r2, [r7, #3]
 80188de:	4611      	mov	r1, r2
 80188e0:	4618      	mov	r0, r3
 80188e2:	f7f8 fb6f 	bl	8010fc4 <HAL_PCD_EP_Close>
 80188e6:	4603      	mov	r3, r0
 80188e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80188ea:	7bfb      	ldrb	r3, [r7, #15]
 80188ec:	4618      	mov	r0, r3
 80188ee:	f000 f92d 	bl	8018b4c <USBD_Get_USB_Status>
 80188f2:	4603      	mov	r3, r0
 80188f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80188f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80188f8:	4618      	mov	r0, r3
 80188fa:	3710      	adds	r7, #16
 80188fc:	46bd      	mov	sp, r7
 80188fe:	bd80      	pop	{r7, pc}

08018900 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018900:	b580      	push	{r7, lr}
 8018902:	b084      	sub	sp, #16
 8018904:	af00      	add	r7, sp, #0
 8018906:	6078      	str	r0, [r7, #4]
 8018908:	460b      	mov	r3, r1
 801890a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801890c:	2300      	movs	r3, #0
 801890e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018910:	2300      	movs	r3, #0
 8018912:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801891a:	78fa      	ldrb	r2, [r7, #3]
 801891c:	4611      	mov	r1, r2
 801891e:	4618      	mov	r0, r3
 8018920:	f7f8 fcbe 	bl	80112a0 <HAL_PCD_EP_Flush>
 8018924:	4603      	mov	r3, r0
 8018926:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018928:	7bfb      	ldrb	r3, [r7, #15]
 801892a:	4618      	mov	r0, r3
 801892c:	f000 f90e 	bl	8018b4c <USBD_Get_USB_Status>
 8018930:	4603      	mov	r3, r0
 8018932:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018934:	7bbb      	ldrb	r3, [r7, #14]
}
 8018936:	4618      	mov	r0, r3
 8018938:	3710      	adds	r7, #16
 801893a:	46bd      	mov	sp, r7
 801893c:	bd80      	pop	{r7, pc}

0801893e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801893e:	b580      	push	{r7, lr}
 8018940:	b084      	sub	sp, #16
 8018942:	af00      	add	r7, sp, #0
 8018944:	6078      	str	r0, [r7, #4]
 8018946:	460b      	mov	r3, r1
 8018948:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801894a:	2300      	movs	r3, #0
 801894c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801894e:	2300      	movs	r3, #0
 8018950:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018958:	78fa      	ldrb	r2, [r7, #3]
 801895a:	4611      	mov	r1, r2
 801895c:	4618      	mov	r0, r3
 801895e:	f7f8 fbf9 	bl	8011154 <HAL_PCD_EP_SetStall>
 8018962:	4603      	mov	r3, r0
 8018964:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018966:	7bfb      	ldrb	r3, [r7, #15]
 8018968:	4618      	mov	r0, r3
 801896a:	f000 f8ef 	bl	8018b4c <USBD_Get_USB_Status>
 801896e:	4603      	mov	r3, r0
 8018970:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018972:	7bbb      	ldrb	r3, [r7, #14]
}
 8018974:	4618      	mov	r0, r3
 8018976:	3710      	adds	r7, #16
 8018978:	46bd      	mov	sp, r7
 801897a:	bd80      	pop	{r7, pc}

0801897c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801897c:	b580      	push	{r7, lr}
 801897e:	b084      	sub	sp, #16
 8018980:	af00      	add	r7, sp, #0
 8018982:	6078      	str	r0, [r7, #4]
 8018984:	460b      	mov	r3, r1
 8018986:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018988:	2300      	movs	r3, #0
 801898a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801898c:	2300      	movs	r3, #0
 801898e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018996:	78fa      	ldrb	r2, [r7, #3]
 8018998:	4611      	mov	r1, r2
 801899a:	4618      	mov	r0, r3
 801899c:	f7f8 fc2c 	bl	80111f8 <HAL_PCD_EP_ClrStall>
 80189a0:	4603      	mov	r3, r0
 80189a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80189a4:	7bfb      	ldrb	r3, [r7, #15]
 80189a6:	4618      	mov	r0, r3
 80189a8:	f000 f8d0 	bl	8018b4c <USBD_Get_USB_Status>
 80189ac:	4603      	mov	r3, r0
 80189ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80189b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80189b2:	4618      	mov	r0, r3
 80189b4:	3710      	adds	r7, #16
 80189b6:	46bd      	mov	sp, r7
 80189b8:	bd80      	pop	{r7, pc}

080189ba <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80189ba:	b480      	push	{r7}
 80189bc:	b085      	sub	sp, #20
 80189be:	af00      	add	r7, sp, #0
 80189c0:	6078      	str	r0, [r7, #4]
 80189c2:	460b      	mov	r3, r1
 80189c4:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80189cc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80189ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	da0b      	bge.n	80189ee <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80189d6:	78fb      	ldrb	r3, [r7, #3]
 80189d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80189dc:	68f9      	ldr	r1, [r7, #12]
 80189de:	4613      	mov	r3, r2
 80189e0:	009b      	lsls	r3, r3, #2
 80189e2:	4413      	add	r3, r2
 80189e4:	00db      	lsls	r3, r3, #3
 80189e6:	440b      	add	r3, r1
 80189e8:	3312      	adds	r3, #18
 80189ea:	781b      	ldrb	r3, [r3, #0]
 80189ec:	e00b      	b.n	8018a06 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80189ee:	78fb      	ldrb	r3, [r7, #3]
 80189f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80189f4:	68f9      	ldr	r1, [r7, #12]
 80189f6:	4613      	mov	r3, r2
 80189f8:	009b      	lsls	r3, r3, #2
 80189fa:	4413      	add	r3, r2
 80189fc:	00db      	lsls	r3, r3, #3
 80189fe:	440b      	add	r3, r1
 8018a00:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8018a04:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018a06:	4618      	mov	r0, r3
 8018a08:	3714      	adds	r7, #20
 8018a0a:	46bd      	mov	sp, r7
 8018a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a10:	4770      	bx	lr

08018a12 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018a12:	b580      	push	{r7, lr}
 8018a14:	b084      	sub	sp, #16
 8018a16:	af00      	add	r7, sp, #0
 8018a18:	6078      	str	r0, [r7, #4]
 8018a1a:	460b      	mov	r3, r1
 8018a1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018a1e:	2300      	movs	r3, #0
 8018a20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018a22:	2300      	movs	r3, #0
 8018a24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018a2c:	78fa      	ldrb	r2, [r7, #3]
 8018a2e:	4611      	mov	r1, r2
 8018a30:	4618      	mov	r0, r3
 8018a32:	f7f8 fa46 	bl	8010ec2 <HAL_PCD_SetAddress>
 8018a36:	4603      	mov	r3, r0
 8018a38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018a3a:	7bfb      	ldrb	r3, [r7, #15]
 8018a3c:	4618      	mov	r0, r3
 8018a3e:	f000 f885 	bl	8018b4c <USBD_Get_USB_Status>
 8018a42:	4603      	mov	r3, r0
 8018a44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018a46:	7bbb      	ldrb	r3, [r7, #14]
}
 8018a48:	4618      	mov	r0, r3
 8018a4a:	3710      	adds	r7, #16
 8018a4c:	46bd      	mov	sp, r7
 8018a4e:	bd80      	pop	{r7, pc}

08018a50 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8018a50:	b580      	push	{r7, lr}
 8018a52:	b086      	sub	sp, #24
 8018a54:	af00      	add	r7, sp, #0
 8018a56:	60f8      	str	r0, [r7, #12]
 8018a58:	607a      	str	r2, [r7, #4]
 8018a5a:	461a      	mov	r2, r3
 8018a5c:	460b      	mov	r3, r1
 8018a5e:	72fb      	strb	r3, [r7, #11]
 8018a60:	4613      	mov	r3, r2
 8018a62:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018a64:	2300      	movs	r3, #0
 8018a66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018a68:	2300      	movs	r3, #0
 8018a6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018a6c:	68fb      	ldr	r3, [r7, #12]
 8018a6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8018a72:	893b      	ldrh	r3, [r7, #8]
 8018a74:	7af9      	ldrb	r1, [r7, #11]
 8018a76:	687a      	ldr	r2, [r7, #4]
 8018a78:	f7f8 fb35 	bl	80110e6 <HAL_PCD_EP_Transmit>
 8018a7c:	4603      	mov	r3, r0
 8018a7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018a80:	7dfb      	ldrb	r3, [r7, #23]
 8018a82:	4618      	mov	r0, r3
 8018a84:	f000 f862 	bl	8018b4c <USBD_Get_USB_Status>
 8018a88:	4603      	mov	r3, r0
 8018a8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018a8c:	7dbb      	ldrb	r3, [r7, #22]
}
 8018a8e:	4618      	mov	r0, r3
 8018a90:	3718      	adds	r7, #24
 8018a92:	46bd      	mov	sp, r7
 8018a94:	bd80      	pop	{r7, pc}

08018a96 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8018a96:	b580      	push	{r7, lr}
 8018a98:	b086      	sub	sp, #24
 8018a9a:	af00      	add	r7, sp, #0
 8018a9c:	60f8      	str	r0, [r7, #12]
 8018a9e:	607a      	str	r2, [r7, #4]
 8018aa0:	461a      	mov	r2, r3
 8018aa2:	460b      	mov	r3, r1
 8018aa4:	72fb      	strb	r3, [r7, #11]
 8018aa6:	4613      	mov	r3, r2
 8018aa8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018aaa:	2300      	movs	r3, #0
 8018aac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018aae:	2300      	movs	r3, #0
 8018ab0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8018ab8:	893b      	ldrh	r3, [r7, #8]
 8018aba:	7af9      	ldrb	r1, [r7, #11]
 8018abc:	687a      	ldr	r2, [r7, #4]
 8018abe:	f7f8 fac9 	bl	8011054 <HAL_PCD_EP_Receive>
 8018ac2:	4603      	mov	r3, r0
 8018ac4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018ac6:	7dfb      	ldrb	r3, [r7, #23]
 8018ac8:	4618      	mov	r0, r3
 8018aca:	f000 f83f 	bl	8018b4c <USBD_Get_USB_Status>
 8018ace:	4603      	mov	r3, r0
 8018ad0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018ad2:	7dbb      	ldrb	r3, [r7, #22]
}
 8018ad4:	4618      	mov	r0, r3
 8018ad6:	3718      	adds	r7, #24
 8018ad8:	46bd      	mov	sp, r7
 8018ada:	bd80      	pop	{r7, pc}

08018adc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018adc:	b580      	push	{r7, lr}
 8018ade:	b082      	sub	sp, #8
 8018ae0:	af00      	add	r7, sp, #0
 8018ae2:	6078      	str	r0, [r7, #4]
 8018ae4:	460b      	mov	r3, r1
 8018ae6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018aee:	78fa      	ldrb	r2, [r7, #3]
 8018af0:	4611      	mov	r1, r2
 8018af2:	4618      	mov	r0, r3
 8018af4:	f7f8 fadf 	bl	80110b6 <HAL_PCD_EP_GetRxCount>
 8018af8:	4603      	mov	r3, r0
}
 8018afa:	4618      	mov	r0, r3
 8018afc:	3708      	adds	r7, #8
 8018afe:	46bd      	mov	sp, r7
 8018b00:	bd80      	pop	{r7, pc}
	...

08018b04 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018b04:	b480      	push	{r7}
 8018b06:	b083      	sub	sp, #12
 8018b08:	af00      	add	r7, sp, #0
 8018b0a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018b0c:	4b03      	ldr	r3, [pc, #12]	; (8018b1c <USBD_static_malloc+0x18>)
}
 8018b0e:	4618      	mov	r0, r3
 8018b10:	370c      	adds	r7, #12
 8018b12:	46bd      	mov	sp, r7
 8018b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b18:	4770      	bx	lr
 8018b1a:	bf00      	nop
 8018b1c:	20000140 	.word	0x20000140

08018b20 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018b20:	b480      	push	{r7}
 8018b22:	b083      	sub	sp, #12
 8018b24:	af00      	add	r7, sp, #0
 8018b26:	6078      	str	r0, [r7, #4]

}
 8018b28:	bf00      	nop
 8018b2a:	370c      	adds	r7, #12
 8018b2c:	46bd      	mov	sp, r7
 8018b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b32:	4770      	bx	lr

08018b34 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018b34:	b480      	push	{r7}
 8018b36:	b083      	sub	sp, #12
 8018b38:	af00      	add	r7, sp, #0
 8018b3a:	6078      	str	r0, [r7, #4]
 8018b3c:	460b      	mov	r3, r1
 8018b3e:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8018b40:	bf00      	nop
 8018b42:	370c      	adds	r7, #12
 8018b44:	46bd      	mov	sp, r7
 8018b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b4a:	4770      	bx	lr

08018b4c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018b4c:	b480      	push	{r7}
 8018b4e:	b085      	sub	sp, #20
 8018b50:	af00      	add	r7, sp, #0
 8018b52:	4603      	mov	r3, r0
 8018b54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018b56:	2300      	movs	r3, #0
 8018b58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018b5a:	79fb      	ldrb	r3, [r7, #7]
 8018b5c:	2b03      	cmp	r3, #3
 8018b5e:	d817      	bhi.n	8018b90 <USBD_Get_USB_Status+0x44>
 8018b60:	a201      	add	r2, pc, #4	; (adr r2, 8018b68 <USBD_Get_USB_Status+0x1c>)
 8018b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b66:	bf00      	nop
 8018b68:	08018b79 	.word	0x08018b79
 8018b6c:	08018b7f 	.word	0x08018b7f
 8018b70:	08018b85 	.word	0x08018b85
 8018b74:	08018b8b 	.word	0x08018b8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018b78:	2300      	movs	r3, #0
 8018b7a:	73fb      	strb	r3, [r7, #15]
    break;
 8018b7c:	e00b      	b.n	8018b96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018b7e:	2302      	movs	r3, #2
 8018b80:	73fb      	strb	r3, [r7, #15]
    break;
 8018b82:	e008      	b.n	8018b96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018b84:	2301      	movs	r3, #1
 8018b86:	73fb      	strb	r3, [r7, #15]
    break;
 8018b88:	e005      	b.n	8018b96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018b8a:	2302      	movs	r3, #2
 8018b8c:	73fb      	strb	r3, [r7, #15]
    break;
 8018b8e:	e002      	b.n	8018b96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018b90:	2302      	movs	r3, #2
 8018b92:	73fb      	strb	r3, [r7, #15]
    break;
 8018b94:	bf00      	nop
  }
  return usb_status;
 8018b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b98:	4618      	mov	r0, r3
 8018b9a:	3714      	adds	r7, #20
 8018b9c:	46bd      	mov	sp, r7
 8018b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ba2:	4770      	bx	lr

08018ba4 <__libc_init_array>:
 8018ba4:	b570      	push	{r4, r5, r6, lr}
 8018ba6:	4d0d      	ldr	r5, [pc, #52]	; (8018bdc <__libc_init_array+0x38>)
 8018ba8:	4c0d      	ldr	r4, [pc, #52]	; (8018be0 <__libc_init_array+0x3c>)
 8018baa:	1b64      	subs	r4, r4, r5
 8018bac:	10a4      	asrs	r4, r4, #2
 8018bae:	2600      	movs	r6, #0
 8018bb0:	42a6      	cmp	r6, r4
 8018bb2:	d109      	bne.n	8018bc8 <__libc_init_array+0x24>
 8018bb4:	4d0b      	ldr	r5, [pc, #44]	; (8018be4 <__libc_init_array+0x40>)
 8018bb6:	4c0c      	ldr	r4, [pc, #48]	; (8018be8 <__libc_init_array+0x44>)
 8018bb8:	f000 f82e 	bl	8018c18 <_init>
 8018bbc:	1b64      	subs	r4, r4, r5
 8018bbe:	10a4      	asrs	r4, r4, #2
 8018bc0:	2600      	movs	r6, #0
 8018bc2:	42a6      	cmp	r6, r4
 8018bc4:	d105      	bne.n	8018bd2 <__libc_init_array+0x2e>
 8018bc6:	bd70      	pop	{r4, r5, r6, pc}
 8018bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8018bcc:	4798      	blx	r3
 8018bce:	3601      	adds	r6, #1
 8018bd0:	e7ee      	b.n	8018bb0 <__libc_init_array+0xc>
 8018bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8018bd6:	4798      	blx	r3
 8018bd8:	3601      	adds	r6, #1
 8018bda:	e7f2      	b.n	8018bc2 <__libc_init_array+0x1e>
 8018bdc:	08028ce0 	.word	0x08028ce0
 8018be0:	08028ce0 	.word	0x08028ce0
 8018be4:	08028ce0 	.word	0x08028ce0
 8018be8:	08028ce4 	.word	0x08028ce4

08018bec <memcpy>:
 8018bec:	440a      	add	r2, r1
 8018bee:	4291      	cmp	r1, r2
 8018bf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8018bf4:	d100      	bne.n	8018bf8 <memcpy+0xc>
 8018bf6:	4770      	bx	lr
 8018bf8:	b510      	push	{r4, lr}
 8018bfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018bfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018c02:	4291      	cmp	r1, r2
 8018c04:	d1f9      	bne.n	8018bfa <memcpy+0xe>
 8018c06:	bd10      	pop	{r4, pc}

08018c08 <memset>:
 8018c08:	4402      	add	r2, r0
 8018c0a:	4603      	mov	r3, r0
 8018c0c:	4293      	cmp	r3, r2
 8018c0e:	d100      	bne.n	8018c12 <memset+0xa>
 8018c10:	4770      	bx	lr
 8018c12:	f803 1b01 	strb.w	r1, [r3], #1
 8018c16:	e7f9      	b.n	8018c0c <memset+0x4>

08018c18 <_init>:
 8018c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c1a:	bf00      	nop
 8018c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018c1e:	bc08      	pop	{r3}
 8018c20:	469e      	mov	lr, r3
 8018c22:	4770      	bx	lr

08018c24 <_fini>:
 8018c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c26:	bf00      	nop
 8018c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018c2a:	bc08      	pop	{r3}
 8018c2c:	469e      	mov	lr, r3
 8018c2e:	4770      	bx	lr
